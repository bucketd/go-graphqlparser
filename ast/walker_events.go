// Code generated by lab/walkergen
// DO NOT EDIT!
package ast

const (
	WalkerEnter WalkerEventKind = iota
	WalkerLeave
)

type WalkerEventKind uint8

// TODO(elliot): Can we think of a shorter name than "EventHandler"?
type DocumentEventHandler func(Document)
type DocumentEventHandlers map[WalkerEventKind][]DocumentEventHandler

type DefinitionsEventHandler func(*Definitions)
type DefinitionsEventHandlers map[WalkerEventKind][]DefinitionsEventHandler

type DefinitionEventHandler func(Definition)
type DefinitionEventHandlers map[WalkerEventKind][]DefinitionEventHandler

type Walker struct {
	documentEventHandlers    DocumentEventHandlers
	definitionsEventHandlers DefinitionsEventHandlers
	definitionEventHandlers  DefinitionEventHandlers
}

func NewWalker() *Walker {
	return &Walker{
		documentEventHandlers:    make(DocumentEventHandlers),
		definitionsEventHandlers: make(DefinitionsEventHandlers),
		definitionEventHandlers:  make(DefinitionEventHandlers),
	}
}

func (w *Walker) AddDocumentEventHandler(kind WalkerEventKind, handler DocumentEventHandler) {
	w.documentEventHandlers[kind] = append(w.documentEventHandlers[kind], handler)
}

func (w *Walker) OnDocumentEvent(kind WalkerEventKind, doc Document) {
	for _, h := range w.documentEventHandlers[kind] {
		h(doc)
	}
}

func (w *Walker) AddDefinitionsEventHandler(kind WalkerEventKind, handler DefinitionsEventHandler) {
	w.definitionsEventHandlers[kind] = append(w.definitionsEventHandlers[kind], handler)
}

func (w *Walker) OnDefinitionsEvent(kind WalkerEventKind, def *Definitions) {
	for _, h := range w.definitionsEventHandlers[kind] {
		h(def)
	}
}

func (w *Walker) AddDefinitionEventHandler(kind WalkerEventKind, handler DefinitionEventHandler) {
	w.definitionEventHandlers[kind] = append(w.definitionEventHandlers[kind], handler)
}

func (w *Walker) OnDefinitionEvent(kind WalkerEventKind, def Definition) {
	for _, h := range w.definitionEventHandlers[kind] {
		h(def)
	}
}
