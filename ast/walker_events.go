// Code generated by lab/walkergen
// DO NOT EDIT!
package ast

// Walker holds event handlers for entering and leaving AST nodes.
type Walker struct {
	argumentEventHandlers                    ArgumentEventHandlers
	argumentsEventHandlers                   ArgumentsEventHandlers
	argumentsDefinitionEventHandlers         ArgumentsDefinitionEventHandlers
	definitionEventHandlers                  DefinitionEventHandlers
	definitionsEventHandlers                 DefinitionsEventHandlers
	descriptionEventHandlers                 DescriptionEventHandlers
	directiveEventHandlers                   DirectiveEventHandlers
	directiveDefinitionEventHandlers         DirectiveDefinitionEventHandlers
	directiveLocationsEventHandlers          DirectiveLocationsEventHandlers
	directivesEventHandlers                  DirectivesEventHandlers
	documentEventHandlers                    DocumentEventHandlers
	enumTypeExtensionEventHandlers           EnumTypeExtensionEventHandlers
	enumValueDefinitionEventHandlers         EnumValueDefinitionEventHandlers
	enumValuesDefinitionEventHandlers        EnumValuesDefinitionEventHandlers
	executableDefinitionEventHandlers        ExecutableDefinitionEventHandlers
	fieldDefinitionEventHandlers             FieldDefinitionEventHandlers
	fieldSelectionEventHandlers              FieldSelectionEventHandlers
	fieldsDefinitionEventHandlers            FieldsDefinitionEventHandlers
	fragmentDefinitionEventHandlers          FragmentDefinitionEventHandlers
	fragmentSpreadEventHandlers              FragmentSpreadEventHandlers
	implementsInterfacesEventHandlers        ImplementsInterfacesEventHandlers
	inlineFragmentEventHandlers              InlineFragmentEventHandlers
	inputFieldsDefinitionEventHandlers       InputFieldsDefinitionEventHandlers
	inputObjectTypeExtensionEventHandlers    InputObjectTypeExtensionEventHandlers
	inputValueDefinitionEventHandlers        InputValueDefinitionEventHandlers
	interfaceTypeExtensionEventHandlers      InterfaceTypeExtensionEventHandlers
	objectTypeExtensionEventHandlers         ObjectTypeExtensionEventHandlers
	operationDefinitionEventHandlers         OperationDefinitionEventHandlers
	operationTypeDefinitionEventHandlers     OperationTypeDefinitionEventHandlers
	rootOperationTypeDefinitionEventHandlers RootOperationTypeDefinitionEventHandlers
	scalarTypeExtensionEventHandlers         ScalarTypeExtensionEventHandlers
	schemaDefinitionEventHandlers            SchemaDefinitionEventHandlers
	schemaExtensionEventHandlers             SchemaExtensionEventHandlers
	selectionEventHandlers                   SelectionEventHandlers
	selectionsEventHandlers                  SelectionsEventHandlers
	typeEventHandlers                        TypeEventHandlers
	typeDefinitionEventHandlers              TypeDefinitionEventHandlers
	typeDefinitionEnumEventHandlers          TypeDefinitionEnumEventHandlers
	typeDefinitionInputObjectEventHandlers   TypeDefinitionInputObjectEventHandlers
	typeDefinitionInterfaceEventHandlers     TypeDefinitionInterfaceEventHandlers
	typeDefinitionObjectEventHandlers        TypeDefinitionObjectEventHandlers
	typeDefinitionScalarEventHandlers        TypeDefinitionScalarEventHandlers
	typeDefinitionUnionEventHandlers         TypeDefinitionUnionEventHandlers
	typeExtensionEventHandlers               TypeExtensionEventHandlers
	typeSystemDefinitionEventHandlers        TypeSystemDefinitionEventHandlers
	typeSystemExtensionEventHandlers         TypeSystemExtensionEventHandlers
	unionMemberTypesEventHandlers            UnionMemberTypesEventHandlers
	unionTypeExtensionEventHandlers          UnionTypeExtensionEventHandlers
	valueEventHandlers                       ValueEventHandlers
	variableDefinitionEventHandlers          VariableDefinitionEventHandlers
	variableDefinitionsEventHandlers         VariableDefinitionsEventHandlers
}

// NewWalker returns a *Walker.
func NewWalker() *Walker {
	return &Walker{}
}

// ArgumentEventHandler function can handle enter/leave events for Argument.
type ArgumentEventHandler func(Argument)

// ArgumentEventHandlers stores the enter and leave events handlers.
type ArgumentEventHandlers struct {
	enter []ArgumentEventHandler
	leave []ArgumentEventHandler
}

// AddArgumentEnterEventHandler adds an event handler to be called when entering a Argument node.
func (w *Walker) AddArgumentEnterEventHandler(handler ArgumentEventHandler) {
	w.argumentEventHandlers.enter = append(w.argumentEventHandlers.enter, handler)
}

// AddArgumentLeaveEventHandler adds an event handler to be called when leaving a Argument node.
func (w *Walker) AddArgumentLeaveEventHandler(handler ArgumentEventHandler) {
	w.argumentEventHandlers.leave = append(w.argumentEventHandlers.leave, handler)
}

// OnArgumentEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnArgumentEnter(a Argument) {
	for _, handler := range w.argumentEventHandlers.enter {
		handler(a)
	}
}

// OnArgumentLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnArgumentLeave(a Argument) {
	for _, handler := range w.argumentEventHandlers.leave {
		handler(a)
	}
}

// ArgumentsEventHandler function can handle enter/leave events for Arguments.
type ArgumentsEventHandler func(*Arguments)

// ArgumentsEventHandlers stores the enter and leave events handlers.
type ArgumentsEventHandlers struct {
	enter []ArgumentsEventHandler
	leave []ArgumentsEventHandler
}

// AddArgumentsEnterEventHandler adds an event handler to be called when entering a Arguments node.
func (w *Walker) AddArgumentsEnterEventHandler(handler ArgumentsEventHandler) {
	w.argumentsEventHandlers.enter = append(w.argumentsEventHandlers.enter, handler)
}

// AddArgumentsLeaveEventHandler adds an event handler to be called when leaving a Arguments node.
func (w *Walker) AddArgumentsLeaveEventHandler(handler ArgumentsEventHandler) {
	w.argumentsEventHandlers.leave = append(w.argumentsEventHandlers.leave, handler)
}

// OnArgumentsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnArgumentsEnter(a *Arguments) {
	for _, handler := range w.argumentsEventHandlers.enter {
		handler(a)
	}
}

// OnArgumentsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnArgumentsLeave(a *Arguments) {
	for _, handler := range w.argumentsEventHandlers.leave {
		handler(a)
	}
}

// ArgumentsDefinitionEventHandler function can handle enter/leave events for ArgumentsDefinition.
type ArgumentsDefinitionEventHandler func(*InputValueDefinitions)

// ArgumentsDefinitionEventHandlers stores the enter and leave events handlers.
type ArgumentsDefinitionEventHandlers struct {
	enter []ArgumentsDefinitionEventHandler
	leave []ArgumentsDefinitionEventHandler
}

// AddArgumentsDefinitionEnterEventHandler adds an event handler to be called when entering a ArgumentsDefinition node.
func (w *Walker) AddArgumentsDefinitionEnterEventHandler(handler ArgumentsDefinitionEventHandler) {
	w.argumentsDefinitionEventHandlers.enter = append(w.argumentsDefinitionEventHandlers.enter, handler)
}

// AddArgumentsDefinitionLeaveEventHandler adds an event handler to be called when leaving a ArgumentsDefinition node.
func (w *Walker) AddArgumentsDefinitionLeaveEventHandler(handler ArgumentsDefinitionEventHandler) {
	w.argumentsDefinitionEventHandlers.leave = append(w.argumentsDefinitionEventHandlers.leave, handler)
}

// OnArgumentsDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnArgumentsDefinitionEnter(ad *InputValueDefinitions) {
	for _, handler := range w.argumentsDefinitionEventHandlers.enter {
		handler(ad)
	}
}

// OnArgumentsDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnArgumentsDefinitionLeave(ad *InputValueDefinitions) {
	for _, handler := range w.argumentsDefinitionEventHandlers.leave {
		handler(ad)
	}
}

// DefinitionEventHandler function can handle enter/leave events for Definition.
type DefinitionEventHandler func(Definition)

// DefinitionEventHandlers stores the enter and leave events handlers.
type DefinitionEventHandlers struct {
	enter []DefinitionEventHandler
	leave []DefinitionEventHandler
}

// AddDefinitionEnterEventHandler adds an event handler to be called when entering a Definition node.
func (w *Walker) AddDefinitionEnterEventHandler(handler DefinitionEventHandler) {
	w.definitionEventHandlers.enter = append(w.definitionEventHandlers.enter, handler)
}

// AddDefinitionLeaveEventHandler adds an event handler to be called when leaving a Definition node.
func (w *Walker) AddDefinitionLeaveEventHandler(handler DefinitionEventHandler) {
	w.definitionEventHandlers.leave = append(w.definitionEventHandlers.leave, handler)
}

// OnDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDefinitionEnter(d Definition) {
	for _, handler := range w.definitionEventHandlers.enter {
		handler(d)
	}
}

// OnDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDefinitionLeave(d Definition) {
	for _, handler := range w.definitionEventHandlers.leave {
		handler(d)
	}
}

// DefinitionsEventHandler function can handle enter/leave events for Definitions.
type DefinitionsEventHandler func(*Definitions)

// DefinitionsEventHandlers stores the enter and leave events handlers.
type DefinitionsEventHandlers struct {
	enter []DefinitionsEventHandler
	leave []DefinitionsEventHandler
}

// AddDefinitionsEnterEventHandler adds an event handler to be called when entering a Definitions node.
func (w *Walker) AddDefinitionsEnterEventHandler(handler DefinitionsEventHandler) {
	w.definitionsEventHandlers.enter = append(w.definitionsEventHandlers.enter, handler)
}

// AddDefinitionsLeaveEventHandler adds an event handler to be called when leaving a Definitions node.
func (w *Walker) AddDefinitionsLeaveEventHandler(handler DefinitionsEventHandler) {
	w.definitionsEventHandlers.leave = append(w.definitionsEventHandlers.leave, handler)
}

// OnDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDefinitionsEnter(d *Definitions) {
	for _, handler := range w.definitionsEventHandlers.enter {
		handler(d)
	}
}

// OnDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDefinitionsLeave(d *Definitions) {
	for _, handler := range w.definitionsEventHandlers.leave {
		handler(d)
	}
}

// DescriptionEventHandler function can handle enter/leave events for Description.
type DescriptionEventHandler func(string)

// DescriptionEventHandlers stores the enter and leave events handlers.
type DescriptionEventHandlers struct {
	enter []DescriptionEventHandler
	leave []DescriptionEventHandler
}

// AddDescriptionEnterEventHandler adds an event handler to be called when entering a Description node.
func (w *Walker) AddDescriptionEnterEventHandler(handler DescriptionEventHandler) {
	w.descriptionEventHandlers.enter = append(w.descriptionEventHandlers.enter, handler)
}

// AddDescriptionLeaveEventHandler adds an event handler to be called when leaving a Description node.
func (w *Walker) AddDescriptionLeaveEventHandler(handler DescriptionEventHandler) {
	w.descriptionEventHandlers.leave = append(w.descriptionEventHandlers.leave, handler)
}

// OnDescriptionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDescriptionEnter(d string) {
	for _, handler := range w.descriptionEventHandlers.enter {
		handler(d)
	}
}

// OnDescriptionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDescriptionLeave(d string) {
	for _, handler := range w.descriptionEventHandlers.leave {
		handler(d)
	}
}

// DirectiveEventHandler function can handle enter/leave events for Directive.
type DirectiveEventHandler func(Directive)

// DirectiveEventHandlers stores the enter and leave events handlers.
type DirectiveEventHandlers struct {
	enter []DirectiveEventHandler
	leave []DirectiveEventHandler
}

// AddDirectiveEnterEventHandler adds an event handler to be called when entering a Directive node.
func (w *Walker) AddDirectiveEnterEventHandler(handler DirectiveEventHandler) {
	w.directiveEventHandlers.enter = append(w.directiveEventHandlers.enter, handler)
}

// AddDirectiveLeaveEventHandler adds an event handler to be called when leaving a Directive node.
func (w *Walker) AddDirectiveLeaveEventHandler(handler DirectiveEventHandler) {
	w.directiveEventHandlers.leave = append(w.directiveEventHandlers.leave, handler)
}

// OnDirectiveEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectiveEnter(d Directive) {
	for _, handler := range w.directiveEventHandlers.enter {
		handler(d)
	}
}

// OnDirectiveLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectiveLeave(d Directive) {
	for _, handler := range w.directiveEventHandlers.leave {
		handler(d)
	}
}

// DirectiveDefinitionEventHandler function can handle enter/leave events for DirectiveDefinition.
type DirectiveDefinitionEventHandler func(*DirectiveDefinition)

// DirectiveDefinitionEventHandlers stores the enter and leave events handlers.
type DirectiveDefinitionEventHandlers struct {
	enter []DirectiveDefinitionEventHandler
	leave []DirectiveDefinitionEventHandler
}

// AddDirectiveDefinitionEnterEventHandler adds an event handler to be called when entering a DirectiveDefinition node.
func (w *Walker) AddDirectiveDefinitionEnterEventHandler(handler DirectiveDefinitionEventHandler) {
	w.directiveDefinitionEventHandlers.enter = append(w.directiveDefinitionEventHandlers.enter, handler)
}

// AddDirectiveDefinitionLeaveEventHandler adds an event handler to be called when leaving a DirectiveDefinition node.
func (w *Walker) AddDirectiveDefinitionLeaveEventHandler(handler DirectiveDefinitionEventHandler) {
	w.directiveDefinitionEventHandlers.leave = append(w.directiveDefinitionEventHandlers.leave, handler)
}

// OnDirectiveDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectiveDefinitionEnter(dd *DirectiveDefinition) {
	for _, handler := range w.directiveDefinitionEventHandlers.enter {
		handler(dd)
	}
}

// OnDirectiveDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectiveDefinitionLeave(dd *DirectiveDefinition) {
	for _, handler := range w.directiveDefinitionEventHandlers.leave {
		handler(dd)
	}
}

// DirectiveLocationsEventHandler function can handle enter/leave events for DirectiveLocations.
type DirectiveLocationsEventHandler func(*DirectiveLocations)

// DirectiveLocationsEventHandlers stores the enter and leave events handlers.
type DirectiveLocationsEventHandlers struct {
	enter []DirectiveLocationsEventHandler
	leave []DirectiveLocationsEventHandler
}

// AddDirectiveLocationsEnterEventHandler adds an event handler to be called when entering a DirectiveLocations node.
func (w *Walker) AddDirectiveLocationsEnterEventHandler(handler DirectiveLocationsEventHandler) {
	w.directiveLocationsEventHandlers.enter = append(w.directiveLocationsEventHandlers.enter, handler)
}

// AddDirectiveLocationsLeaveEventHandler adds an event handler to be called when leaving a DirectiveLocations node.
func (w *Walker) AddDirectiveLocationsLeaveEventHandler(handler DirectiveLocationsEventHandler) {
	w.directiveLocationsEventHandlers.leave = append(w.directiveLocationsEventHandlers.leave, handler)
}

// OnDirectiveLocationsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectiveLocationsEnter(dl *DirectiveLocations) {
	for _, handler := range w.directiveLocationsEventHandlers.enter {
		handler(dl)
	}
}

// OnDirectiveLocationsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectiveLocationsLeave(dl *DirectiveLocations) {
	for _, handler := range w.directiveLocationsEventHandlers.leave {
		handler(dl)
	}
}

// DirectivesEventHandler function can handle enter/leave events for Directives.
type DirectivesEventHandler func(*Directives)

// DirectivesEventHandlers stores the enter and leave events handlers.
type DirectivesEventHandlers struct {
	enter []DirectivesEventHandler
	leave []DirectivesEventHandler
}

// AddDirectivesEnterEventHandler adds an event handler to be called when entering a Directives node.
func (w *Walker) AddDirectivesEnterEventHandler(handler DirectivesEventHandler) {
	w.directivesEventHandlers.enter = append(w.directivesEventHandlers.enter, handler)
}

// AddDirectivesLeaveEventHandler adds an event handler to be called when leaving a Directives node.
func (w *Walker) AddDirectivesLeaveEventHandler(handler DirectivesEventHandler) {
	w.directivesEventHandlers.leave = append(w.directivesEventHandlers.leave, handler)
}

// OnDirectivesEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectivesEnter(d *Directives) {
	for _, handler := range w.directivesEventHandlers.enter {
		handler(d)
	}
}

// OnDirectivesLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectivesLeave(d *Directives) {
	for _, handler := range w.directivesEventHandlers.leave {
		handler(d)
	}
}

// DocumentEventHandler function can handle enter/leave events for Document.
type DocumentEventHandler func(Document)

// DocumentEventHandlers stores the enter and leave events handlers.
type DocumentEventHandlers struct {
	enter []DocumentEventHandler
	leave []DocumentEventHandler
}

// AddDocumentEnterEventHandler adds an event handler to be called when entering a Document node.
func (w *Walker) AddDocumentEnterEventHandler(handler DocumentEventHandler) {
	w.documentEventHandlers.enter = append(w.documentEventHandlers.enter, handler)
}

// AddDocumentLeaveEventHandler adds an event handler to be called when leaving a Document node.
func (w *Walker) AddDocumentLeaveEventHandler(handler DocumentEventHandler) {
	w.documentEventHandlers.leave = append(w.documentEventHandlers.leave, handler)
}

// OnDocumentEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDocumentEnter(d Document) {
	for _, handler := range w.documentEventHandlers.enter {
		handler(d)
	}
}

// OnDocumentLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDocumentLeave(d Document) {
	for _, handler := range w.documentEventHandlers.leave {
		handler(d)
	}
}

// EnumTypeExtensionEventHandler function can handle enter/leave events for EnumTypeExtension.
type EnumTypeExtensionEventHandler func(*TypeExtension)

// EnumTypeExtensionEventHandlers stores the enter and leave events handlers.
type EnumTypeExtensionEventHandlers struct {
	enter []EnumTypeExtensionEventHandler
	leave []EnumTypeExtensionEventHandler
}

// AddEnumTypeExtensionEnterEventHandler adds an event handler to be called when entering a EnumTypeExtension node.
func (w *Walker) AddEnumTypeExtensionEnterEventHandler(handler EnumTypeExtensionEventHandler) {
	w.enumTypeExtensionEventHandlers.enter = append(w.enumTypeExtensionEventHandlers.enter, handler)
}

// AddEnumTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a EnumTypeExtension node.
func (w *Walker) AddEnumTypeExtensionLeaveEventHandler(handler EnumTypeExtensionEventHandler) {
	w.enumTypeExtensionEventHandlers.leave = append(w.enumTypeExtensionEventHandlers.leave, handler)
}

// OnEnumTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumTypeExtensionEnter(ete *TypeExtension) {
	for _, handler := range w.enumTypeExtensionEventHandlers.enter {
		handler(ete)
	}
}

// OnEnumTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumTypeExtensionLeave(ete *TypeExtension) {
	for _, handler := range w.enumTypeExtensionEventHandlers.leave {
		handler(ete)
	}
}

// EnumValueDefinitionEventHandler function can handle enter/leave events for EnumValueDefinition.
type EnumValueDefinitionEventHandler func(EnumValueDefinition)

// EnumValueDefinitionEventHandlers stores the enter and leave events handlers.
type EnumValueDefinitionEventHandlers struct {
	enter []EnumValueDefinitionEventHandler
	leave []EnumValueDefinitionEventHandler
}

// AddEnumValueDefinitionEnterEventHandler adds an event handler to be called when entering a EnumValueDefinition node.
func (w *Walker) AddEnumValueDefinitionEnterEventHandler(handler EnumValueDefinitionEventHandler) {
	w.enumValueDefinitionEventHandlers.enter = append(w.enumValueDefinitionEventHandlers.enter, handler)
}

// AddEnumValueDefinitionLeaveEventHandler adds an event handler to be called when leaving a EnumValueDefinition node.
func (w *Walker) AddEnumValueDefinitionLeaveEventHandler(handler EnumValueDefinitionEventHandler) {
	w.enumValueDefinitionEventHandlers.leave = append(w.enumValueDefinitionEventHandlers.leave, handler)
}

// OnEnumValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionEnter(evd EnumValueDefinition) {
	for _, handler := range w.enumValueDefinitionEventHandlers.enter {
		handler(evd)
	}
}

// OnEnumValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionLeave(evd EnumValueDefinition) {
	for _, handler := range w.enumValueDefinitionEventHandlers.leave {
		handler(evd)
	}
}

// EnumValuesDefinitionEventHandler function can handle enter/leave events for EnumValuesDefinition.
type EnumValuesDefinitionEventHandler func(*EnumValueDefinitions)

// EnumValuesDefinitionEventHandlers stores the enter and leave events handlers.
type EnumValuesDefinitionEventHandlers struct {
	enter []EnumValuesDefinitionEventHandler
	leave []EnumValuesDefinitionEventHandler
}

// AddEnumValuesDefinitionEnterEventHandler adds an event handler to be called when entering a EnumValuesDefinition node.
func (w *Walker) AddEnumValuesDefinitionEnterEventHandler(handler EnumValuesDefinitionEventHandler) {
	w.enumValuesDefinitionEventHandlers.enter = append(w.enumValuesDefinitionEventHandlers.enter, handler)
}

// AddEnumValuesDefinitionLeaveEventHandler adds an event handler to be called when leaving a EnumValuesDefinition node.
func (w *Walker) AddEnumValuesDefinitionLeaveEventHandler(handler EnumValuesDefinitionEventHandler) {
	w.enumValuesDefinitionEventHandlers.leave = append(w.enumValuesDefinitionEventHandlers.leave, handler)
}

// OnEnumValuesDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumValuesDefinitionEnter(evd *EnumValueDefinitions) {
	for _, handler := range w.enumValuesDefinitionEventHandlers.enter {
		handler(evd)
	}
}

// OnEnumValuesDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumValuesDefinitionLeave(evd *EnumValueDefinitions) {
	for _, handler := range w.enumValuesDefinitionEventHandlers.leave {
		handler(evd)
	}
}

// ExecutableDefinitionEventHandler function can handle enter/leave events for ExecutableDefinition.
type ExecutableDefinitionEventHandler func(*ExecutableDefinition)

// ExecutableDefinitionEventHandlers stores the enter and leave events handlers.
type ExecutableDefinitionEventHandlers struct {
	enter []ExecutableDefinitionEventHandler
	leave []ExecutableDefinitionEventHandler
}

// AddExecutableDefinitionEnterEventHandler adds an event handler to be called when entering a ExecutableDefinition node.
func (w *Walker) AddExecutableDefinitionEnterEventHandler(handler ExecutableDefinitionEventHandler) {
	w.executableDefinitionEventHandlers.enter = append(w.executableDefinitionEventHandlers.enter, handler)
}

// AddExecutableDefinitionLeaveEventHandler adds an event handler to be called when leaving a ExecutableDefinition node.
func (w *Walker) AddExecutableDefinitionLeaveEventHandler(handler ExecutableDefinitionEventHandler) {
	w.executableDefinitionEventHandlers.leave = append(w.executableDefinitionEventHandlers.leave, handler)
}

// OnExecutableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnExecutableDefinitionEnter(ed *ExecutableDefinition) {
	for _, handler := range w.executableDefinitionEventHandlers.enter {
		handler(ed)
	}
}

// OnExecutableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnExecutableDefinitionLeave(ed *ExecutableDefinition) {
	for _, handler := range w.executableDefinitionEventHandlers.leave {
		handler(ed)
	}
}

// FieldDefinitionEventHandler function can handle enter/leave events for FieldDefinition.
type FieldDefinitionEventHandler func(FieldDefinition)

// FieldDefinitionEventHandlers stores the enter and leave events handlers.
type FieldDefinitionEventHandlers struct {
	enter []FieldDefinitionEventHandler
	leave []FieldDefinitionEventHandler
}

// AddFieldDefinitionEnterEventHandler adds an event handler to be called when entering a FieldDefinition node.
func (w *Walker) AddFieldDefinitionEnterEventHandler(handler FieldDefinitionEventHandler) {
	w.fieldDefinitionEventHandlers.enter = append(w.fieldDefinitionEventHandlers.enter, handler)
}

// AddFieldDefinitionLeaveEventHandler adds an event handler to be called when leaving a FieldDefinition node.
func (w *Walker) AddFieldDefinitionLeaveEventHandler(handler FieldDefinitionEventHandler) {
	w.fieldDefinitionEventHandlers.leave = append(w.fieldDefinitionEventHandlers.leave, handler)
}

// OnFieldDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionEnter(fd FieldDefinition) {
	for _, handler := range w.fieldDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFieldDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionLeave(fd FieldDefinition) {
	for _, handler := range w.fieldDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// FieldSelectionEventHandler function can handle enter/leave events for FieldSelection.
type FieldSelectionEventHandler func(Selection)

// FieldSelectionEventHandlers stores the enter and leave events handlers.
type FieldSelectionEventHandlers struct {
	enter []FieldSelectionEventHandler
	leave []FieldSelectionEventHandler
}

// AddFieldSelectionEnterEventHandler adds an event handler to be called when entering a FieldSelection node.
func (w *Walker) AddFieldSelectionEnterEventHandler(handler FieldSelectionEventHandler) {
	w.fieldSelectionEventHandlers.enter = append(w.fieldSelectionEventHandlers.enter, handler)
}

// AddFieldSelectionLeaveEventHandler adds an event handler to be called when leaving a FieldSelection node.
func (w *Walker) AddFieldSelectionLeaveEventHandler(handler FieldSelectionEventHandler) {
	w.fieldSelectionEventHandlers.leave = append(w.fieldSelectionEventHandlers.leave, handler)
}

// OnFieldSelectionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldSelectionEnter(fs Selection) {
	for _, handler := range w.fieldSelectionEventHandlers.enter {
		handler(fs)
	}
}

// OnFieldSelectionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldSelectionLeave(fs Selection) {
	for _, handler := range w.fieldSelectionEventHandlers.leave {
		handler(fs)
	}
}

// FieldsDefinitionEventHandler function can handle enter/leave events for FieldsDefinition.
type FieldsDefinitionEventHandler func(*FieldDefinitions)

// FieldsDefinitionEventHandlers stores the enter and leave events handlers.
type FieldsDefinitionEventHandlers struct {
	enter []FieldsDefinitionEventHandler
	leave []FieldsDefinitionEventHandler
}

// AddFieldsDefinitionEnterEventHandler adds an event handler to be called when entering a FieldsDefinition node.
func (w *Walker) AddFieldsDefinitionEnterEventHandler(handler FieldsDefinitionEventHandler) {
	w.fieldsDefinitionEventHandlers.enter = append(w.fieldsDefinitionEventHandlers.enter, handler)
}

// AddFieldsDefinitionLeaveEventHandler adds an event handler to be called when leaving a FieldsDefinition node.
func (w *Walker) AddFieldsDefinitionLeaveEventHandler(handler FieldsDefinitionEventHandler) {
	w.fieldsDefinitionEventHandlers.leave = append(w.fieldsDefinitionEventHandlers.leave, handler)
}

// OnFieldsDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldsDefinitionEnter(fd *FieldDefinitions) {
	for _, handler := range w.fieldsDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFieldsDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldsDefinitionLeave(fd *FieldDefinitions) {
	for _, handler := range w.fieldsDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// FragmentDefinitionEventHandler function can handle enter/leave events for FragmentDefinition.
type FragmentDefinitionEventHandler func(*ExecutableDefinition)

// FragmentDefinitionEventHandlers stores the enter and leave events handlers.
type FragmentDefinitionEventHandlers struct {
	enter []FragmentDefinitionEventHandler
	leave []FragmentDefinitionEventHandler
}

// AddFragmentDefinitionEnterEventHandler adds an event handler to be called when entering a FragmentDefinition node.
func (w *Walker) AddFragmentDefinitionEnterEventHandler(handler FragmentDefinitionEventHandler) {
	w.fragmentDefinitionEventHandlers.enter = append(w.fragmentDefinitionEventHandlers.enter, handler)
}

// AddFragmentDefinitionLeaveEventHandler adds an event handler to be called when leaving a FragmentDefinition node.
func (w *Walker) AddFragmentDefinitionLeaveEventHandler(handler FragmentDefinitionEventHandler) {
	w.fragmentDefinitionEventHandlers.leave = append(w.fragmentDefinitionEventHandlers.leave, handler)
}

// OnFragmentDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFragmentDefinitionEnter(fd *ExecutableDefinition) {
	for _, handler := range w.fragmentDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFragmentDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFragmentDefinitionLeave(fd *ExecutableDefinition) {
	for _, handler := range w.fragmentDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// FragmentSpreadEventHandler function can handle enter/leave events for FragmentSpread.
type FragmentSpreadEventHandler func(Selection)

// FragmentSpreadEventHandlers stores the enter and leave events handlers.
type FragmentSpreadEventHandlers struct {
	enter []FragmentSpreadEventHandler
	leave []FragmentSpreadEventHandler
}

// AddFragmentSpreadEnterEventHandler adds an event handler to be called when entering a FragmentSpread node.
func (w *Walker) AddFragmentSpreadEnterEventHandler(handler FragmentSpreadEventHandler) {
	w.fragmentSpreadEventHandlers.enter = append(w.fragmentSpreadEventHandlers.enter, handler)
}

// AddFragmentSpreadLeaveEventHandler adds an event handler to be called when leaving a FragmentSpread node.
func (w *Walker) AddFragmentSpreadLeaveEventHandler(handler FragmentSpreadEventHandler) {
	w.fragmentSpreadEventHandlers.leave = append(w.fragmentSpreadEventHandlers.leave, handler)
}

// OnFragmentSpreadEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFragmentSpreadEnter(fs Selection) {
	for _, handler := range w.fragmentSpreadEventHandlers.enter {
		handler(fs)
	}
}

// OnFragmentSpreadLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFragmentSpreadLeave(fs Selection) {
	for _, handler := range w.fragmentSpreadEventHandlers.leave {
		handler(fs)
	}
}

// ImplementsInterfacesEventHandler function can handle enter/leave events for ImplementsInterfaces.
type ImplementsInterfacesEventHandler func(*Types)

// ImplementsInterfacesEventHandlers stores the enter and leave events handlers.
type ImplementsInterfacesEventHandlers struct {
	enter []ImplementsInterfacesEventHandler
	leave []ImplementsInterfacesEventHandler
}

// AddImplementsInterfacesEnterEventHandler adds an event handler to be called when entering a ImplementsInterfaces node.
func (w *Walker) AddImplementsInterfacesEnterEventHandler(handler ImplementsInterfacesEventHandler) {
	w.implementsInterfacesEventHandlers.enter = append(w.implementsInterfacesEventHandlers.enter, handler)
}

// AddImplementsInterfacesLeaveEventHandler adds an event handler to be called when leaving a ImplementsInterfaces node.
func (w *Walker) AddImplementsInterfacesLeaveEventHandler(handler ImplementsInterfacesEventHandler) {
	w.implementsInterfacesEventHandlers.leave = append(w.implementsInterfacesEventHandlers.leave, handler)
}

// OnImplementsInterfacesEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnImplementsInterfacesEnter(ii *Types) {
	for _, handler := range w.implementsInterfacesEventHandlers.enter {
		handler(ii)
	}
}

// OnImplementsInterfacesLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnImplementsInterfacesLeave(ii *Types) {
	for _, handler := range w.implementsInterfacesEventHandlers.leave {
		handler(ii)
	}
}

// InlineFragmentEventHandler function can handle enter/leave events for InlineFragment.
type InlineFragmentEventHandler func(Selection)

// InlineFragmentEventHandlers stores the enter and leave events handlers.
type InlineFragmentEventHandlers struct {
	enter []InlineFragmentEventHandler
	leave []InlineFragmentEventHandler
}

// AddInlineFragmentEnterEventHandler adds an event handler to be called when entering a InlineFragment node.
func (w *Walker) AddInlineFragmentEnterEventHandler(handler InlineFragmentEventHandler) {
	w.inlineFragmentEventHandlers.enter = append(w.inlineFragmentEventHandlers.enter, handler)
}

// AddInlineFragmentLeaveEventHandler adds an event handler to be called when leaving a InlineFragment node.
func (w *Walker) AddInlineFragmentLeaveEventHandler(handler InlineFragmentEventHandler) {
	w.inlineFragmentEventHandlers.leave = append(w.inlineFragmentEventHandlers.leave, handler)
}

// OnInlineFragmentEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInlineFragmentEnter(ilf Selection) {
	for _, handler := range w.inlineFragmentEventHandlers.enter {
		handler(ilf)
	}
}

// OnInlineFragmentLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInlineFragmentLeave(ilf Selection) {
	for _, handler := range w.inlineFragmentEventHandlers.leave {
		handler(ilf)
	}
}

// InputFieldsDefinitionEventHandler function can handle enter/leave events for InputFieldsDefinition.
type InputFieldsDefinitionEventHandler func(*InputValueDefinitions)

// InputFieldsDefinitionEventHandlers stores the enter and leave events handlers.
type InputFieldsDefinitionEventHandlers struct {
	enter []InputFieldsDefinitionEventHandler
	leave []InputFieldsDefinitionEventHandler
}

// AddInputFieldsDefinitionEnterEventHandler adds an event handler to be called when entering a InputFieldsDefinition node.
func (w *Walker) AddInputFieldsDefinitionEnterEventHandler(handler InputFieldsDefinitionEventHandler) {
	w.inputFieldsDefinitionEventHandlers.enter = append(w.inputFieldsDefinitionEventHandlers.enter, handler)
}

// AddInputFieldsDefinitionLeaveEventHandler adds an event handler to be called when leaving a InputFieldsDefinition node.
func (w *Walker) AddInputFieldsDefinitionLeaveEventHandler(handler InputFieldsDefinitionEventHandler) {
	w.inputFieldsDefinitionEventHandlers.leave = append(w.inputFieldsDefinitionEventHandlers.leave, handler)
}

// OnInputFieldsDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputFieldsDefinitionEnter(ifd *InputValueDefinitions) {
	for _, handler := range w.inputFieldsDefinitionEventHandlers.enter {
		handler(ifd)
	}
}

// OnInputFieldsDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputFieldsDefinitionLeave(ifd *InputValueDefinitions) {
	for _, handler := range w.inputFieldsDefinitionEventHandlers.leave {
		handler(ifd)
	}
}

// InputObjectTypeExtensionEventHandler function can handle enter/leave events for InputObjectTypeExtension.
type InputObjectTypeExtensionEventHandler func(*TypeExtension)

// InputObjectTypeExtensionEventHandlers stores the enter and leave events handlers.
type InputObjectTypeExtensionEventHandlers struct {
	enter []InputObjectTypeExtensionEventHandler
	leave []InputObjectTypeExtensionEventHandler
}

// AddInputObjectTypeExtensionEnterEventHandler adds an event handler to be called when entering a InputObjectTypeExtension node.
func (w *Walker) AddInputObjectTypeExtensionEnterEventHandler(handler InputObjectTypeExtensionEventHandler) {
	w.inputObjectTypeExtensionEventHandlers.enter = append(w.inputObjectTypeExtensionEventHandlers.enter, handler)
}

// AddInputObjectTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a InputObjectTypeExtension node.
func (w *Walker) AddInputObjectTypeExtensionLeaveEventHandler(handler InputObjectTypeExtensionEventHandler) {
	w.inputObjectTypeExtensionEventHandlers.leave = append(w.inputObjectTypeExtensionEventHandlers.leave, handler)
}

// OnInputObjectTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputObjectTypeExtensionEnter(iote *TypeExtension) {
	for _, handler := range w.inputObjectTypeExtensionEventHandlers.enter {
		handler(iote)
	}
}

// OnInputObjectTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputObjectTypeExtensionLeave(iote *TypeExtension) {
	for _, handler := range w.inputObjectTypeExtensionEventHandlers.leave {
		handler(iote)
	}
}

// InputValueDefinitionEventHandler function can handle enter/leave events for InputValueDefinition.
type InputValueDefinitionEventHandler func(InputValueDefinition)

// InputValueDefinitionEventHandlers stores the enter and leave events handlers.
type InputValueDefinitionEventHandlers struct {
	enter []InputValueDefinitionEventHandler
	leave []InputValueDefinitionEventHandler
}

// AddInputValueDefinitionEnterEventHandler adds an event handler to be called when entering a InputValueDefinition node.
func (w *Walker) AddInputValueDefinitionEnterEventHandler(handler InputValueDefinitionEventHandler) {
	w.inputValueDefinitionEventHandlers.enter = append(w.inputValueDefinitionEventHandlers.enter, handler)
}

// AddInputValueDefinitionLeaveEventHandler adds an event handler to be called when leaving a InputValueDefinition node.
func (w *Walker) AddInputValueDefinitionLeaveEventHandler(handler InputValueDefinitionEventHandler) {
	w.inputValueDefinitionEventHandlers.leave = append(w.inputValueDefinitionEventHandlers.leave, handler)
}

// OnInputValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionEnter(ivd InputValueDefinition) {
	for _, handler := range w.inputValueDefinitionEventHandlers.enter {
		handler(ivd)
	}
}

// OnInputValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionLeave(ivd InputValueDefinition) {
	for _, handler := range w.inputValueDefinitionEventHandlers.leave {
		handler(ivd)
	}
}

// InterfaceTypeExtensionEventHandler function can handle enter/leave events for InterfaceTypeExtension.
type InterfaceTypeExtensionEventHandler func(*TypeExtension)

// InterfaceTypeExtensionEventHandlers stores the enter and leave events handlers.
type InterfaceTypeExtensionEventHandlers struct {
	enter []InterfaceTypeExtensionEventHandler
	leave []InterfaceTypeExtensionEventHandler
}

// AddInterfaceTypeExtensionEnterEventHandler adds an event handler to be called when entering a InterfaceTypeExtension node.
func (w *Walker) AddInterfaceTypeExtensionEnterEventHandler(handler InterfaceTypeExtensionEventHandler) {
	w.interfaceTypeExtensionEventHandlers.enter = append(w.interfaceTypeExtensionEventHandlers.enter, handler)
}

// AddInterfaceTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a InterfaceTypeExtension node.
func (w *Walker) AddInterfaceTypeExtensionLeaveEventHandler(handler InterfaceTypeExtensionEventHandler) {
	w.interfaceTypeExtensionEventHandlers.leave = append(w.interfaceTypeExtensionEventHandlers.leave, handler)
}

// OnInterfaceTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInterfaceTypeExtensionEnter(ite *TypeExtension) {
	for _, handler := range w.interfaceTypeExtensionEventHandlers.enter {
		handler(ite)
	}
}

// OnInterfaceTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInterfaceTypeExtensionLeave(ite *TypeExtension) {
	for _, handler := range w.interfaceTypeExtensionEventHandlers.leave {
		handler(ite)
	}
}

// ObjectTypeExtensionEventHandler function can handle enter/leave events for ObjectTypeExtension.
type ObjectTypeExtensionEventHandler func(*TypeExtension)

// ObjectTypeExtensionEventHandlers stores the enter and leave events handlers.
type ObjectTypeExtensionEventHandlers struct {
	enter []ObjectTypeExtensionEventHandler
	leave []ObjectTypeExtensionEventHandler
}

// AddObjectTypeExtensionEnterEventHandler adds an event handler to be called when entering a ObjectTypeExtension node.
func (w *Walker) AddObjectTypeExtensionEnterEventHandler(handler ObjectTypeExtensionEventHandler) {
	w.objectTypeExtensionEventHandlers.enter = append(w.objectTypeExtensionEventHandlers.enter, handler)
}

// AddObjectTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a ObjectTypeExtension node.
func (w *Walker) AddObjectTypeExtensionLeaveEventHandler(handler ObjectTypeExtensionEventHandler) {
	w.objectTypeExtensionEventHandlers.leave = append(w.objectTypeExtensionEventHandlers.leave, handler)
}

// OnObjectTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnObjectTypeExtensionEnter(ote *TypeExtension) {
	for _, handler := range w.objectTypeExtensionEventHandlers.enter {
		handler(ote)
	}
}

// OnObjectTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnObjectTypeExtensionLeave(ote *TypeExtension) {
	for _, handler := range w.objectTypeExtensionEventHandlers.leave {
		handler(ote)
	}
}

// OperationDefinitionEventHandler function can handle enter/leave events for OperationDefinition.
type OperationDefinitionEventHandler func(*ExecutableDefinition)

// OperationDefinitionEventHandlers stores the enter and leave events handlers.
type OperationDefinitionEventHandlers struct {
	enter []OperationDefinitionEventHandler
	leave []OperationDefinitionEventHandler
}

// AddOperationDefinitionEnterEventHandler adds an event handler to be called when entering a OperationDefinition node.
func (w *Walker) AddOperationDefinitionEnterEventHandler(handler OperationDefinitionEventHandler) {
	w.operationDefinitionEventHandlers.enter = append(w.operationDefinitionEventHandlers.enter, handler)
}

// AddOperationDefinitionLeaveEventHandler adds an event handler to be called when leaving a OperationDefinition node.
func (w *Walker) AddOperationDefinitionLeaveEventHandler(handler OperationDefinitionEventHandler) {
	w.operationDefinitionEventHandlers.leave = append(w.operationDefinitionEventHandlers.leave, handler)
}

// OnOperationDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationDefinitionEnter(od *ExecutableDefinition) {
	for _, handler := range w.operationDefinitionEventHandlers.enter {
		handler(od)
	}
}

// OnOperationDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationDefinitionLeave(od *ExecutableDefinition) {
	for _, handler := range w.operationDefinitionEventHandlers.leave {
		handler(od)
	}
}

// OperationTypeDefinitionEventHandler function can handle enter/leave events for OperationTypeDefinition.
type OperationTypeDefinitionEventHandler func(OperationTypeDefinition)

// OperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type OperationTypeDefinitionEventHandlers struct {
	enter []OperationTypeDefinitionEventHandler
	leave []OperationTypeDefinitionEventHandler
}

// AddOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering a OperationTypeDefinition node.
func (w *Walker) AddOperationTypeDefinitionEnterEventHandler(handler OperationTypeDefinitionEventHandler) {
	w.operationTypeDefinitionEventHandlers.enter = append(w.operationTypeDefinitionEventHandlers.enter, handler)
}

// AddOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving a OperationTypeDefinition node.
func (w *Walker) AddOperationTypeDefinitionLeaveEventHandler(handler OperationTypeDefinitionEventHandler) {
	w.operationTypeDefinitionEventHandlers.leave = append(w.operationTypeDefinitionEventHandlers.leave, handler)
}

// OnOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionEnter(otd OperationTypeDefinition) {
	for _, handler := range w.operationTypeDefinitionEventHandlers.enter {
		handler(otd)
	}
}

// OnOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionLeave(otd OperationTypeDefinition) {
	for _, handler := range w.operationTypeDefinitionEventHandlers.leave {
		handler(otd)
	}
}

// RootOperationTypeDefinitionEventHandler function can handle enter/leave events for RootOperationTypeDefinition.
type RootOperationTypeDefinitionEventHandler func(RootOperationTypeDefinition)

// RootOperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type RootOperationTypeDefinitionEventHandlers struct {
	enter []RootOperationTypeDefinitionEventHandler
	leave []RootOperationTypeDefinitionEventHandler
}

// AddRootOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering a RootOperationTypeDefinition node.
func (w *Walker) AddRootOperationTypeDefinitionEnterEventHandler(handler RootOperationTypeDefinitionEventHandler) {
	w.rootOperationTypeDefinitionEventHandlers.enter = append(w.rootOperationTypeDefinitionEventHandlers.enter, handler)
}

// AddRootOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving a RootOperationTypeDefinition node.
func (w *Walker) AddRootOperationTypeDefinitionLeaveEventHandler(handler RootOperationTypeDefinitionEventHandler) {
	w.rootOperationTypeDefinitionEventHandlers.leave = append(w.rootOperationTypeDefinitionEventHandlers.leave, handler)
}

// OnRootOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionEnter(rotd RootOperationTypeDefinition) {
	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.enter {
		handler(rotd)
	}
}

// OnRootOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionLeave(rotd RootOperationTypeDefinition) {
	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.leave {
		handler(rotd)
	}
}

// ScalarTypeExtensionEventHandler function can handle enter/leave events for ScalarTypeExtension.
type ScalarTypeExtensionEventHandler func(*TypeExtension)

// ScalarTypeExtensionEventHandlers stores the enter and leave events handlers.
type ScalarTypeExtensionEventHandlers struct {
	enter []ScalarTypeExtensionEventHandler
	leave []ScalarTypeExtensionEventHandler
}

// AddScalarTypeExtensionEnterEventHandler adds an event handler to be called when entering a ScalarTypeExtension node.
func (w *Walker) AddScalarTypeExtensionEnterEventHandler(handler ScalarTypeExtensionEventHandler) {
	w.scalarTypeExtensionEventHandlers.enter = append(w.scalarTypeExtensionEventHandlers.enter, handler)
}

// AddScalarTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a ScalarTypeExtension node.
func (w *Walker) AddScalarTypeExtensionLeaveEventHandler(handler ScalarTypeExtensionEventHandler) {
	w.scalarTypeExtensionEventHandlers.leave = append(w.scalarTypeExtensionEventHandlers.leave, handler)
}

// OnScalarTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnScalarTypeExtensionEnter(ste *TypeExtension) {
	for _, handler := range w.scalarTypeExtensionEventHandlers.enter {
		handler(ste)
	}
}

// OnScalarTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnScalarTypeExtensionLeave(ste *TypeExtension) {
	for _, handler := range w.scalarTypeExtensionEventHandlers.leave {
		handler(ste)
	}
}

// SchemaDefinitionEventHandler function can handle enter/leave events for SchemaDefinition.
type SchemaDefinitionEventHandler func(*SchemaDefinition)

// SchemaDefinitionEventHandlers stores the enter and leave events handlers.
type SchemaDefinitionEventHandlers struct {
	enter []SchemaDefinitionEventHandler
	leave []SchemaDefinitionEventHandler
}

// AddSchemaDefinitionEnterEventHandler adds an event handler to be called when entering a SchemaDefinition node.
func (w *Walker) AddSchemaDefinitionEnterEventHandler(handler SchemaDefinitionEventHandler) {
	w.schemaDefinitionEventHandlers.enter = append(w.schemaDefinitionEventHandlers.enter, handler)
}

// AddSchemaDefinitionLeaveEventHandler adds an event handler to be called when leaving a SchemaDefinition node.
func (w *Walker) AddSchemaDefinitionLeaveEventHandler(handler SchemaDefinitionEventHandler) {
	w.schemaDefinitionEventHandlers.leave = append(w.schemaDefinitionEventHandlers.leave, handler)
}

// OnSchemaDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSchemaDefinitionEnter(sd *SchemaDefinition) {
	for _, handler := range w.schemaDefinitionEventHandlers.enter {
		handler(sd)
	}
}

// OnSchemaDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSchemaDefinitionLeave(sd *SchemaDefinition) {
	for _, handler := range w.schemaDefinitionEventHandlers.leave {
		handler(sd)
	}
}

// SchemaExtensionEventHandler function can handle enter/leave events for SchemaExtension.
type SchemaExtensionEventHandler func(*SchemaExtension)

// SchemaExtensionEventHandlers stores the enter and leave events handlers.
type SchemaExtensionEventHandlers struct {
	enter []SchemaExtensionEventHandler
	leave []SchemaExtensionEventHandler
}

// AddSchemaExtensionEnterEventHandler adds an event handler to be called when entering a SchemaExtension node.
func (w *Walker) AddSchemaExtensionEnterEventHandler(handler SchemaExtensionEventHandler) {
	w.schemaExtensionEventHandlers.enter = append(w.schemaExtensionEventHandlers.enter, handler)
}

// AddSchemaExtensionLeaveEventHandler adds an event handler to be called when leaving a SchemaExtension node.
func (w *Walker) AddSchemaExtensionLeaveEventHandler(handler SchemaExtensionEventHandler) {
	w.schemaExtensionEventHandlers.leave = append(w.schemaExtensionEventHandlers.leave, handler)
}

// OnSchemaExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSchemaExtensionEnter(se *SchemaExtension) {
	for _, handler := range w.schemaExtensionEventHandlers.enter {
		handler(se)
	}
}

// OnSchemaExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSchemaExtensionLeave(se *SchemaExtension) {
	for _, handler := range w.schemaExtensionEventHandlers.leave {
		handler(se)
	}
}

// SelectionEventHandler function can handle enter/leave events for Selection.
type SelectionEventHandler func(Selection)

// SelectionEventHandlers stores the enter and leave events handlers.
type SelectionEventHandlers struct {
	enter []SelectionEventHandler
	leave []SelectionEventHandler
}

// AddSelectionEnterEventHandler adds an event handler to be called when entering a Selection node.
func (w *Walker) AddSelectionEnterEventHandler(handler SelectionEventHandler) {
	w.selectionEventHandlers.enter = append(w.selectionEventHandlers.enter, handler)
}

// AddSelectionLeaveEventHandler adds an event handler to be called when leaving a Selection node.
func (w *Walker) AddSelectionLeaveEventHandler(handler SelectionEventHandler) {
	w.selectionEventHandlers.leave = append(w.selectionEventHandlers.leave, handler)
}

// OnSelectionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSelectionEnter(s Selection) {
	for _, handler := range w.selectionEventHandlers.enter {
		handler(s)
	}
}

// OnSelectionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSelectionLeave(s Selection) {
	for _, handler := range w.selectionEventHandlers.leave {
		handler(s)
	}
}

// SelectionsEventHandler function can handle enter/leave events for Selections.
type SelectionsEventHandler func(*Selections)

// SelectionsEventHandlers stores the enter and leave events handlers.
type SelectionsEventHandlers struct {
	enter []SelectionsEventHandler
	leave []SelectionsEventHandler
}

// AddSelectionsEnterEventHandler adds an event handler to be called when entering a Selections node.
func (w *Walker) AddSelectionsEnterEventHandler(handler SelectionsEventHandler) {
	w.selectionsEventHandlers.enter = append(w.selectionsEventHandlers.enter, handler)
}

// AddSelectionsLeaveEventHandler adds an event handler to be called when leaving a Selections node.
func (w *Walker) AddSelectionsLeaveEventHandler(handler SelectionsEventHandler) {
	w.selectionsEventHandlers.leave = append(w.selectionsEventHandlers.leave, handler)
}

// OnSelectionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSelectionsEnter(s *Selections) {
	for _, handler := range w.selectionsEventHandlers.enter {
		handler(s)
	}
}

// OnSelectionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSelectionsLeave(s *Selections) {
	for _, handler := range w.selectionsEventHandlers.leave {
		handler(s)
	}
}

// TypeEventHandler function can handle enter/leave events for Type.
type TypeEventHandler func(Type)

// TypeEventHandlers stores the enter and leave events handlers.
type TypeEventHandlers struct {
	enter []TypeEventHandler
	leave []TypeEventHandler
}

// AddTypeEnterEventHandler adds an event handler to be called when entering a Type node.
func (w *Walker) AddTypeEnterEventHandler(handler TypeEventHandler) {
	w.typeEventHandlers.enter = append(w.typeEventHandlers.enter, handler)
}

// AddTypeLeaveEventHandler adds an event handler to be called when leaving a Type node.
func (w *Walker) AddTypeLeaveEventHandler(handler TypeEventHandler) {
	w.typeEventHandlers.leave = append(w.typeEventHandlers.leave, handler)
}

// OnTypeEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeEnter(t Type) {
	for _, handler := range w.typeEventHandlers.enter {
		handler(t)
	}
}

// OnTypeLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeLeave(t Type) {
	for _, handler := range w.typeEventHandlers.leave {
		handler(t)
	}
}

// TypeDefinitionEventHandler function can handle enter/leave events for TypeDefinition.
type TypeDefinitionEventHandler func(*TypeDefinition)

// TypeDefinitionEventHandlers stores the enter and leave events handlers.
type TypeDefinitionEventHandlers struct {
	enter []TypeDefinitionEventHandler
	leave []TypeDefinitionEventHandler
}

// AddTypeDefinitionEnterEventHandler adds an event handler to be called when entering a TypeDefinition node.
func (w *Walker) AddTypeDefinitionEnterEventHandler(handler TypeDefinitionEventHandler) {
	w.typeDefinitionEventHandlers.enter = append(w.typeDefinitionEventHandlers.enter, handler)
}

// AddTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving a TypeDefinition node.
func (w *Walker) AddTypeDefinitionLeaveEventHandler(handler TypeDefinitionEventHandler) {
	w.typeDefinitionEventHandlers.leave = append(w.typeDefinitionEventHandlers.leave, handler)
}

// OnTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.typeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.typeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// TypeDefinitionEnumEventHandler function can handle enter/leave events for TypeDefinitionEnum.
type TypeDefinitionEnumEventHandler func(*TypeDefinition)

// TypeDefinitionEnumEventHandlers stores the enter and leave events handlers.
type TypeDefinitionEnumEventHandlers struct {
	enter []TypeDefinitionEnumEventHandler
	leave []TypeDefinitionEnumEventHandler
}

// AddTypeDefinitionEnumEnterEventHandler adds an event handler to be called when entering a TypeDefinitionEnum node.
func (w *Walker) AddTypeDefinitionEnumEnterEventHandler(handler TypeDefinitionEnumEventHandler) {
	w.typeDefinitionEnumEventHandlers.enter = append(w.typeDefinitionEnumEventHandlers.enter, handler)
}

// AddTypeDefinitionEnumLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionEnum node.
func (w *Walker) AddTypeDefinitionEnumLeaveEventHandler(handler TypeDefinitionEnumEventHandler) {
	w.typeDefinitionEnumEventHandlers.leave = append(w.typeDefinitionEnumEventHandlers.leave, handler)
}

// OnTypeDefinitionEnumEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionEnumEnter(tde *TypeDefinition) {
	for _, handler := range w.typeDefinitionEnumEventHandlers.enter {
		handler(tde)
	}
}

// OnTypeDefinitionEnumLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionEnumLeave(tde *TypeDefinition) {
	for _, handler := range w.typeDefinitionEnumEventHandlers.leave {
		handler(tde)
	}
}

// TypeDefinitionInputObjectEventHandler function can handle enter/leave events for TypeDefinitionInputObject.
type TypeDefinitionInputObjectEventHandler func(*TypeDefinition)

// TypeDefinitionInputObjectEventHandlers stores the enter and leave events handlers.
type TypeDefinitionInputObjectEventHandlers struct {
	enter []TypeDefinitionInputObjectEventHandler
	leave []TypeDefinitionInputObjectEventHandler
}

// AddTypeDefinitionInputObjectEnterEventHandler adds an event handler to be called when entering a TypeDefinitionInputObject node.
func (w *Walker) AddTypeDefinitionInputObjectEnterEventHandler(handler TypeDefinitionInputObjectEventHandler) {
	w.typeDefinitionInputObjectEventHandlers.enter = append(w.typeDefinitionInputObjectEventHandlers.enter, handler)
}

// AddTypeDefinitionInputObjectLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionInputObject node.
func (w *Walker) AddTypeDefinitionInputObjectLeaveEventHandler(handler TypeDefinitionInputObjectEventHandler) {
	w.typeDefinitionInputObjectEventHandlers.leave = append(w.typeDefinitionInputObjectEventHandlers.leave, handler)
}

// OnTypeDefinitionInputObjectEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionInputObjectEnter(tdio *TypeDefinition) {
	for _, handler := range w.typeDefinitionInputObjectEventHandlers.enter {
		handler(tdio)
	}
}

// OnTypeDefinitionInputObjectLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionInputObjectLeave(tdio *TypeDefinition) {
	for _, handler := range w.typeDefinitionInputObjectEventHandlers.leave {
		handler(tdio)
	}
}

// TypeDefinitionInterfaceEventHandler function can handle enter/leave events for TypeDefinitionInterface.
type TypeDefinitionInterfaceEventHandler func(*TypeDefinition)

// TypeDefinitionInterfaceEventHandlers stores the enter and leave events handlers.
type TypeDefinitionInterfaceEventHandlers struct {
	enter []TypeDefinitionInterfaceEventHandler
	leave []TypeDefinitionInterfaceEventHandler
}

// AddTypeDefinitionInterfaceEnterEventHandler adds an event handler to be called when entering a TypeDefinitionInterface node.
func (w *Walker) AddTypeDefinitionInterfaceEnterEventHandler(handler TypeDefinitionInterfaceEventHandler) {
	w.typeDefinitionInterfaceEventHandlers.enter = append(w.typeDefinitionInterfaceEventHandlers.enter, handler)
}

// AddTypeDefinitionInterfaceLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionInterface node.
func (w *Walker) AddTypeDefinitionInterfaceLeaveEventHandler(handler TypeDefinitionInterfaceEventHandler) {
	w.typeDefinitionInterfaceEventHandlers.leave = append(w.typeDefinitionInterfaceEventHandlers.leave, handler)
}

// OnTypeDefinitionInterfaceEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionInterfaceEnter(tdi *TypeDefinition) {
	for _, handler := range w.typeDefinitionInterfaceEventHandlers.enter {
		handler(tdi)
	}
}

// OnTypeDefinitionInterfaceLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionInterfaceLeave(tdi *TypeDefinition) {
	for _, handler := range w.typeDefinitionInterfaceEventHandlers.leave {
		handler(tdi)
	}
}

// TypeDefinitionObjectEventHandler function can handle enter/leave events for TypeDefinitionObject.
type TypeDefinitionObjectEventHandler func(*TypeDefinition)

// TypeDefinitionObjectEventHandlers stores the enter and leave events handlers.
type TypeDefinitionObjectEventHandlers struct {
	enter []TypeDefinitionObjectEventHandler
	leave []TypeDefinitionObjectEventHandler
}

// AddTypeDefinitionObjectEnterEventHandler adds an event handler to be called when entering a TypeDefinitionObject node.
func (w *Walker) AddTypeDefinitionObjectEnterEventHandler(handler TypeDefinitionObjectEventHandler) {
	w.typeDefinitionObjectEventHandlers.enter = append(w.typeDefinitionObjectEventHandlers.enter, handler)
}

// AddTypeDefinitionObjectLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionObject node.
func (w *Walker) AddTypeDefinitionObjectLeaveEventHandler(handler TypeDefinitionObjectEventHandler) {
	w.typeDefinitionObjectEventHandlers.leave = append(w.typeDefinitionObjectEventHandlers.leave, handler)
}

// OnTypeDefinitionObjectEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionObjectEnter(tdo *TypeDefinition) {
	for _, handler := range w.typeDefinitionObjectEventHandlers.enter {
		handler(tdo)
	}
}

// OnTypeDefinitionObjectLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionObjectLeave(tdo *TypeDefinition) {
	for _, handler := range w.typeDefinitionObjectEventHandlers.leave {
		handler(tdo)
	}
}

// TypeDefinitionScalarEventHandler function can handle enter/leave events for TypeDefinitionScalar.
type TypeDefinitionScalarEventHandler func(*TypeDefinition)

// TypeDefinitionScalarEventHandlers stores the enter and leave events handlers.
type TypeDefinitionScalarEventHandlers struct {
	enter []TypeDefinitionScalarEventHandler
	leave []TypeDefinitionScalarEventHandler
}

// AddTypeDefinitionScalarEnterEventHandler adds an event handler to be called when entering a TypeDefinitionScalar node.
func (w *Walker) AddTypeDefinitionScalarEnterEventHandler(handler TypeDefinitionScalarEventHandler) {
	w.typeDefinitionScalarEventHandlers.enter = append(w.typeDefinitionScalarEventHandlers.enter, handler)
}

// AddTypeDefinitionScalarLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionScalar node.
func (w *Walker) AddTypeDefinitionScalarLeaveEventHandler(handler TypeDefinitionScalarEventHandler) {
	w.typeDefinitionScalarEventHandlers.leave = append(w.typeDefinitionScalarEventHandlers.leave, handler)
}

// OnTypeDefinitionScalarEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionScalarEnter(tds *TypeDefinition) {
	for _, handler := range w.typeDefinitionScalarEventHandlers.enter {
		handler(tds)
	}
}

// OnTypeDefinitionScalarLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionScalarLeave(tds *TypeDefinition) {
	for _, handler := range w.typeDefinitionScalarEventHandlers.leave {
		handler(tds)
	}
}

// TypeDefinitionUnionEventHandler function can handle enter/leave events for TypeDefinitionUnion.
type TypeDefinitionUnionEventHandler func(*TypeDefinition)

// TypeDefinitionUnionEventHandlers stores the enter and leave events handlers.
type TypeDefinitionUnionEventHandlers struct {
	enter []TypeDefinitionUnionEventHandler
	leave []TypeDefinitionUnionEventHandler
}

// AddTypeDefinitionUnionEnterEventHandler adds an event handler to be called when entering a TypeDefinitionUnion node.
func (w *Walker) AddTypeDefinitionUnionEnterEventHandler(handler TypeDefinitionUnionEventHandler) {
	w.typeDefinitionUnionEventHandlers.enter = append(w.typeDefinitionUnionEventHandlers.enter, handler)
}

// AddTypeDefinitionUnionLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionUnion node.
func (w *Walker) AddTypeDefinitionUnionLeaveEventHandler(handler TypeDefinitionUnionEventHandler) {
	w.typeDefinitionUnionEventHandlers.leave = append(w.typeDefinitionUnionEventHandlers.leave, handler)
}

// OnTypeDefinitionUnionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionUnionEnter(tdu *TypeDefinition) {
	for _, handler := range w.typeDefinitionUnionEventHandlers.enter {
		handler(tdu)
	}
}

// OnTypeDefinitionUnionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionUnionLeave(tdu *TypeDefinition) {
	for _, handler := range w.typeDefinitionUnionEventHandlers.leave {
		handler(tdu)
	}
}

// TypeExtensionEventHandler function can handle enter/leave events for TypeExtension.
type TypeExtensionEventHandler func(*TypeExtension)

// TypeExtensionEventHandlers stores the enter and leave events handlers.
type TypeExtensionEventHandlers struct {
	enter []TypeExtensionEventHandler
	leave []TypeExtensionEventHandler
}

// AddTypeExtensionEnterEventHandler adds an event handler to be called when entering a TypeExtension node.
func (w *Walker) AddTypeExtensionEnterEventHandler(handler TypeExtensionEventHandler) {
	w.typeExtensionEventHandlers.enter = append(w.typeExtensionEventHandlers.enter, handler)
}

// AddTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a TypeExtension node.
func (w *Walker) AddTypeExtensionLeaveEventHandler(handler TypeExtensionEventHandler) {
	w.typeExtensionEventHandlers.leave = append(w.typeExtensionEventHandlers.leave, handler)
}

// OnTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.typeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.typeExtensionEventHandlers.leave {
		handler(te)
	}
}

// TypeSystemDefinitionEventHandler function can handle enter/leave events for TypeSystemDefinition.
type TypeSystemDefinitionEventHandler func(*TypeSystemDefinition)

// TypeSystemDefinitionEventHandlers stores the enter and leave events handlers.
type TypeSystemDefinitionEventHandlers struct {
	enter []TypeSystemDefinitionEventHandler
	leave []TypeSystemDefinitionEventHandler
}

// AddTypeSystemDefinitionEnterEventHandler adds an event handler to be called when entering a TypeSystemDefinition node.
func (w *Walker) AddTypeSystemDefinitionEnterEventHandler(handler TypeSystemDefinitionEventHandler) {
	w.typeSystemDefinitionEventHandlers.enter = append(w.typeSystemDefinitionEventHandlers.enter, handler)
}

// AddTypeSystemDefinitionLeaveEventHandler adds an event handler to be called when leaving a TypeSystemDefinition node.
func (w *Walker) AddTypeSystemDefinitionLeaveEventHandler(handler TypeSystemDefinitionEventHandler) {
	w.typeSystemDefinitionEventHandlers.leave = append(w.typeSystemDefinitionEventHandlers.leave, handler)
}

// OnTypeSystemDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeSystemDefinitionEnter(tsd *TypeSystemDefinition) {
	for _, handler := range w.typeSystemDefinitionEventHandlers.enter {
		handler(tsd)
	}
}

// OnTypeSystemDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeSystemDefinitionLeave(tsd *TypeSystemDefinition) {
	for _, handler := range w.typeSystemDefinitionEventHandlers.leave {
		handler(tsd)
	}
}

// TypeSystemExtensionEventHandler function can handle enter/leave events for TypeSystemExtension.
type TypeSystemExtensionEventHandler func(*TypeSystemExtension)

// TypeSystemExtensionEventHandlers stores the enter and leave events handlers.
type TypeSystemExtensionEventHandlers struct {
	enter []TypeSystemExtensionEventHandler
	leave []TypeSystemExtensionEventHandler
}

// AddTypeSystemExtensionEnterEventHandler adds an event handler to be called when entering a TypeSystemExtension node.
func (w *Walker) AddTypeSystemExtensionEnterEventHandler(handler TypeSystemExtensionEventHandler) {
	w.typeSystemExtensionEventHandlers.enter = append(w.typeSystemExtensionEventHandlers.enter, handler)
}

// AddTypeSystemExtensionLeaveEventHandler adds an event handler to be called when leaving a TypeSystemExtension node.
func (w *Walker) AddTypeSystemExtensionLeaveEventHandler(handler TypeSystemExtensionEventHandler) {
	w.typeSystemExtensionEventHandlers.leave = append(w.typeSystemExtensionEventHandlers.leave, handler)
}

// OnTypeSystemExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeSystemExtensionEnter(tse *TypeSystemExtension) {
	for _, handler := range w.typeSystemExtensionEventHandlers.enter {
		handler(tse)
	}
}

// OnTypeSystemExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeSystemExtensionLeave(tse *TypeSystemExtension) {
	for _, handler := range w.typeSystemExtensionEventHandlers.leave {
		handler(tse)
	}
}

// UnionMemberTypesEventHandler function can handle enter/leave events for UnionMemberTypes.
type UnionMemberTypesEventHandler func(*Types)

// UnionMemberTypesEventHandlers stores the enter and leave events handlers.
type UnionMemberTypesEventHandlers struct {
	enter []UnionMemberTypesEventHandler
	leave []UnionMemberTypesEventHandler
}

// AddUnionMemberTypesEnterEventHandler adds an event handler to be called when entering a UnionMemberTypes node.
func (w *Walker) AddUnionMemberTypesEnterEventHandler(handler UnionMemberTypesEventHandler) {
	w.unionMemberTypesEventHandlers.enter = append(w.unionMemberTypesEventHandlers.enter, handler)
}

// AddUnionMemberTypesLeaveEventHandler adds an event handler to be called when leaving a UnionMemberTypes node.
func (w *Walker) AddUnionMemberTypesLeaveEventHandler(handler UnionMemberTypesEventHandler) {
	w.unionMemberTypesEventHandlers.leave = append(w.unionMemberTypesEventHandlers.leave, handler)
}

// OnUnionMemberTypesEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnUnionMemberTypesEnter(umt *Types) {
	for _, handler := range w.unionMemberTypesEventHandlers.enter {
		handler(umt)
	}
}

// OnUnionMemberTypesLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnUnionMemberTypesLeave(umt *Types) {
	for _, handler := range w.unionMemberTypesEventHandlers.leave {
		handler(umt)
	}
}

// UnionTypeExtensionEventHandler function can handle enter/leave events for UnionTypeExtension.
type UnionTypeExtensionEventHandler func(*TypeExtension)

// UnionTypeExtensionEventHandlers stores the enter and leave events handlers.
type UnionTypeExtensionEventHandlers struct {
	enter []UnionTypeExtensionEventHandler
	leave []UnionTypeExtensionEventHandler
}

// AddUnionTypeExtensionEnterEventHandler adds an event handler to be called when entering a UnionTypeExtension node.
func (w *Walker) AddUnionTypeExtensionEnterEventHandler(handler UnionTypeExtensionEventHandler) {
	w.unionTypeExtensionEventHandlers.enter = append(w.unionTypeExtensionEventHandlers.enter, handler)
}

// AddUnionTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a UnionTypeExtension node.
func (w *Walker) AddUnionTypeExtensionLeaveEventHandler(handler UnionTypeExtensionEventHandler) {
	w.unionTypeExtensionEventHandlers.leave = append(w.unionTypeExtensionEventHandlers.leave, handler)
}

// OnUnionTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnUnionTypeExtensionEnter(ute *TypeExtension) {
	for _, handler := range w.unionTypeExtensionEventHandlers.enter {
		handler(ute)
	}
}

// OnUnionTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnUnionTypeExtensionLeave(ute *TypeExtension) {
	for _, handler := range w.unionTypeExtensionEventHandlers.leave {
		handler(ute)
	}
}

// ValueEventHandler function can handle enter/leave events for Value.
type ValueEventHandler func(Value)

// ValueEventHandlers stores the enter and leave events handlers.
type ValueEventHandlers struct {
	enter []ValueEventHandler
	leave []ValueEventHandler
}

// AddValueEnterEventHandler adds an event handler to be called when entering a Value node.
func (w *Walker) AddValueEnterEventHandler(handler ValueEventHandler) {
	w.valueEventHandlers.enter = append(w.valueEventHandlers.enter, handler)
}

// AddValueLeaveEventHandler adds an event handler to be called when leaving a Value node.
func (w *Walker) AddValueLeaveEventHandler(handler ValueEventHandler) {
	w.valueEventHandlers.leave = append(w.valueEventHandlers.leave, handler)
}

// OnValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnValueEnter(v Value) {
	for _, handler := range w.valueEventHandlers.enter {
		handler(v)
	}
}

// OnValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnValueLeave(v Value) {
	for _, handler := range w.valueEventHandlers.leave {
		handler(v)
	}
}

// VariableDefinitionEventHandler function can handle enter/leave events for VariableDefinition.
type VariableDefinitionEventHandler func(VariableDefinition)

// VariableDefinitionEventHandlers stores the enter and leave events handlers.
type VariableDefinitionEventHandlers struct {
	enter []VariableDefinitionEventHandler
	leave []VariableDefinitionEventHandler
}

// AddVariableDefinitionEnterEventHandler adds an event handler to be called when entering a VariableDefinition node.
func (w *Walker) AddVariableDefinitionEnterEventHandler(handler VariableDefinitionEventHandler) {
	w.variableDefinitionEventHandlers.enter = append(w.variableDefinitionEventHandlers.enter, handler)
}

// AddVariableDefinitionLeaveEventHandler adds an event handler to be called when leaving a VariableDefinition node.
func (w *Walker) AddVariableDefinitionLeaveEventHandler(handler VariableDefinitionEventHandler) {
	w.variableDefinitionEventHandlers.leave = append(w.variableDefinitionEventHandlers.leave, handler)
}

// OnVariableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionEnter(vd VariableDefinition) {
	for _, handler := range w.variableDefinitionEventHandlers.enter {
		handler(vd)
	}
}

// OnVariableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionLeave(vd VariableDefinition) {
	for _, handler := range w.variableDefinitionEventHandlers.leave {
		handler(vd)
	}
}

// VariableDefinitionsEventHandler function can handle enter/leave events for VariableDefinitions.
type VariableDefinitionsEventHandler func(*VariableDefinitions)

// VariableDefinitionsEventHandlers stores the enter and leave events handlers.
type VariableDefinitionsEventHandlers struct {
	enter []VariableDefinitionsEventHandler
	leave []VariableDefinitionsEventHandler
}

// AddVariableDefinitionsEnterEventHandler adds an event handler to be called when entering a VariableDefinitions node.
func (w *Walker) AddVariableDefinitionsEnterEventHandler(handler VariableDefinitionsEventHandler) {
	w.variableDefinitionsEventHandlers.enter = append(w.variableDefinitionsEventHandlers.enter, handler)
}

// AddVariableDefinitionsLeaveEventHandler adds an event handler to be called when leaving a VariableDefinitions node.
func (w *Walker) AddVariableDefinitionsLeaveEventHandler(handler VariableDefinitionsEventHandler) {
	w.variableDefinitionsEventHandlers.leave = append(w.variableDefinitionsEventHandlers.leave, handler)
}

// OnVariableDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionsEnter(vd *VariableDefinitions) {
	for _, handler := range w.variableDefinitionsEventHandlers.enter {
		handler(vd)
	}
}

// OnVariableDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionsLeave(vd *VariableDefinitions) {
	for _, handler := range w.variableDefinitionsEventHandlers.leave {
		handler(vd)
	}
}
