// Code generated by walkergen
// DO NOT EDIT!
package ast

// Walker holds event handlers for entering and leaving AST nodes.
type Walker struct {
	argumentEventHandlers                        ArgumentEventHandlers
	argumentsEventHandlers                       ArgumentsEventHandlers
	booleanValueEventHandlers                    BooleanValueEventHandlers
	definitionEventHandlers                      DefinitionEventHandlers
	definitionsEventHandlers                     DefinitionsEventHandlers
	directiveEventHandlers                       DirectiveEventHandlers
	directiveDefinitionEventHandlers             DirectiveDefinitionEventHandlers
	directivesEventHandlers                      DirectivesEventHandlers
	documentEventHandlers                        DocumentEventHandlers
	enumTypeDefinitionEventHandlers              EnumTypeDefinitionEventHandlers
	enumTypeExtensionEventHandlers               EnumTypeExtensionEventHandlers
	enumValueEventHandlers                       EnumValueEventHandlers
	enumValueDefinitionEventHandlers             EnumValueDefinitionEventHandlers
	enumValueDefinitionsEventHandlers            EnumValueDefinitionsEventHandlers
	executableDefinitionEventHandlers            ExecutableDefinitionEventHandlers
	fieldDefinitionEventHandlers                 FieldDefinitionEventHandlers
	fieldDefinitionsEventHandlers                FieldDefinitionsEventHandlers
	fieldSelectionEventHandlers                  FieldSelectionEventHandlers
	floatValueEventHandlers                      FloatValueEventHandlers
	fragmentDefinitionEventHandlers              FragmentDefinitionEventHandlers
	fragmentSpreadSelectionEventHandlers         FragmentSpreadSelectionEventHandlers
	inlineFragmentSelectionEventHandlers         InlineFragmentSelectionEventHandlers
	inputObjectTypeDefinitionEventHandlers       InputObjectTypeDefinitionEventHandlers
	inputObjectTypeExtensionEventHandlers        InputObjectTypeExtensionEventHandlers
	inputValueDefinitionEventHandlers            InputValueDefinitionEventHandlers
	inputValueDefinitionsEventHandlers           InputValueDefinitionsEventHandlers
	intValueEventHandlers                        IntValueEventHandlers
	interfaceTypeDefinitionEventHandlers         InterfaceTypeDefinitionEventHandlers
	interfaceTypeExtensionEventHandlers          InterfaceTypeExtensionEventHandlers
	listTypeEventHandlers                        ListTypeEventHandlers
	listValueEventHandlers                       ListValueEventHandlers
	mutationOperationDefinitionEventHandlers     MutationOperationDefinitionEventHandlers
	namedTypeEventHandlers                       NamedTypeEventHandlers
	nullValueEventHandlers                       NullValueEventHandlers
	objectFieldEventHandlers                     ObjectFieldEventHandlers
	objectTypeDefinitionEventHandlers            ObjectTypeDefinitionEventHandlers
	objectTypeExtensionEventHandlers             ObjectTypeExtensionEventHandlers
	objectValueEventHandlers                     ObjectValueEventHandlers
	operationDefinitionEventHandlers             OperationDefinitionEventHandlers
	operationTypeDefinitionEventHandlers         OperationTypeDefinitionEventHandlers
	operationTypeDefinitionsEventHandlers        OperationTypeDefinitionsEventHandlers
	queryOperationDefinitionEventHandlers        QueryOperationDefinitionEventHandlers
	rootOperationTypeDefinitionEventHandlers     RootOperationTypeDefinitionEventHandlers
	rootOperationTypeDefinitionsEventHandlers    RootOperationTypeDefinitionsEventHandlers
	scalarTypeDefinitionEventHandlers            ScalarTypeDefinitionEventHandlers
	scalarTypeExtensionEventHandlers             ScalarTypeExtensionEventHandlers
	schemaDefinitionEventHandlers                SchemaDefinitionEventHandlers
	schemaExtensionEventHandlers                 SchemaExtensionEventHandlers
	selectionEventHandlers                       SelectionEventHandlers
	selectionsEventHandlers                      SelectionsEventHandlers
	stringValueEventHandlers                     StringValueEventHandlers
	subscriptionOperationDefinitionEventHandlers SubscriptionOperationDefinitionEventHandlers
	typeEventHandlers                            TypeEventHandlers
	typeConditionEventHandlers                   TypeConditionEventHandlers
	typeDefinitionEventHandlers                  TypeDefinitionEventHandlers
	typeExtensionEventHandlers                   TypeExtensionEventHandlers
	typeSystemDefinitionEventHandlers            TypeSystemDefinitionEventHandlers
	typeSystemExtensionEventHandlers             TypeSystemExtensionEventHandlers
	typesEventHandlers                           TypesEventHandlers
	unionTypeDefinitionEventHandlers             UnionTypeDefinitionEventHandlers
	unionTypeExtensionEventHandlers              UnionTypeExtensionEventHandlers
	valueEventHandlers                           ValueEventHandlers
	variableDefinitionEventHandlers              VariableDefinitionEventHandlers
	variableDefinitionsEventHandlers             VariableDefinitionsEventHandlers
	variableValueEventHandlers                   VariableValueEventHandlers
}

// NewWalker returns a new Walker instance.
func NewWalker(visitFns []VisitFunc) *Walker {
	walker := &Walker{}
	for _, visitFn := range visitFns {
		visitFn(walker)
	}

	return walker
}

// Walk traverses an entire AST document for the purposes of validation.
func (w *Walker) Walk(doc Document) {
	w.walkDocument(doc)
}

// ArgumentEventHandler function can handle enter/leave events for Argument.
type ArgumentEventHandler func(Argument)

// ArgumentEventHandlers stores the enter and leave events handlers.
type ArgumentEventHandlers struct {
	enter []ArgumentEventHandler
	leave []ArgumentEventHandler
}

// AddArgumentEnterEventHandler adds an event handler to be called when entering Argument nodes.
func (w *Walker) AddArgumentEnterEventHandler(h ArgumentEventHandler) {
	w.argumentEventHandlers.enter = append(w.argumentEventHandlers.enter, h)
}

// AddArgumentLeaveEventHandler adds an event handler to be called when leaving Argument nodes.
func (w *Walker) AddArgumentLeaveEventHandler(h ArgumentEventHandler) {
	w.argumentEventHandlers.leave = append(w.argumentEventHandlers.leave, h)
}

// OnArgumentEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnArgumentEnter(a Argument) {
	for _, handler := range w.argumentEventHandlers.enter {
		handler(a)
	}
}

// OnArgumentLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnArgumentLeave(a Argument) {
	for _, handler := range w.argumentEventHandlers.leave {
		handler(a)
	}
}

// walkArgument is a function that walks Argument type's AST node.
func (w *Walker) walkArgument(a Argument) {
	w.OnArgumentEnter(a)

	w.walkValue(a.Value)

	w.OnArgumentLeave(a)
}

// ArgumentsEventHandler function can handle enter/leave events for Arguments.
type ArgumentsEventHandler func(*Arguments)

// ArgumentsEventHandlers stores the enter and leave events handlers.
type ArgumentsEventHandlers struct {
	enter []ArgumentsEventHandler
	leave []ArgumentsEventHandler
}

// AddArgumentsEnterEventHandler adds an event handler to be called when entering Arguments nodes.
func (w *Walker) AddArgumentsEnterEventHandler(h ArgumentsEventHandler) {
	w.argumentsEventHandlers.enter = append(w.argumentsEventHandlers.enter, h)
}

// AddArgumentsLeaveEventHandler adds an event handler to be called when leaving Arguments nodes.
func (w *Walker) AddArgumentsLeaveEventHandler(h ArgumentsEventHandler) {
	w.argumentsEventHandlers.leave = append(w.argumentsEventHandlers.leave, h)
}

// OnArgumentsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnArgumentsEnter(as *Arguments) {
	for _, handler := range w.argumentsEventHandlers.enter {
		handler(as)
	}
}

// OnArgumentsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnArgumentsLeave(as *Arguments) {
	for _, handler := range w.argumentsEventHandlers.leave {
		handler(as)
	}
}

// walkArguments is a function that walks Arguments type's AST node.
func (w *Walker) walkArguments(as *Arguments) {
	w.OnArgumentsEnter(as)

	as.ForEach(func(a Argument, i int) {
		w.walkArgument(a)
	})

	w.OnArgumentsLeave(as)
}

// BooleanValueEventHandler function can handle enter/leave events for BooleanValue.
type BooleanValueEventHandler func(Value)

// BooleanValueEventHandlers stores the enter and leave events handlers.
type BooleanValueEventHandlers struct {
	enter []BooleanValueEventHandler
	leave []BooleanValueEventHandler
}

// AddBooleanValueEnterEventHandler adds an event handler to be called when entering BooleanValue nodes.
func (w *Walker) AddBooleanValueEnterEventHandler(h BooleanValueEventHandler) {
	w.booleanValueEventHandlers.enter = append(w.booleanValueEventHandlers.enter, h)
}

// AddBooleanValueLeaveEventHandler adds an event handler to be called when leaving BooleanValue nodes.
func (w *Walker) AddBooleanValueLeaveEventHandler(h BooleanValueEventHandler) {
	w.booleanValueEventHandlers.leave = append(w.booleanValueEventHandlers.leave, h)
}

// OnBooleanValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnBooleanValueEnter(v Value) {
	for _, handler := range w.booleanValueEventHandlers.enter {
		handler(v)
	}
}

// OnBooleanValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnBooleanValueLeave(v Value) {
	for _, handler := range w.booleanValueEventHandlers.leave {
		handler(v)
	}
}

// walkBooleanValue is a function that walks BooleanValue type's AST node.
func (w *Walker) walkBooleanValue(v Value) {
	w.OnBooleanValueEnter(v)

	w.OnBooleanValueLeave(v)
}

// DefinitionEventHandler function can handle enter/leave events for Definition.
type DefinitionEventHandler func(Definition)

// DefinitionEventHandlers stores the enter and leave events handlers.
type DefinitionEventHandlers struct {
	enter []DefinitionEventHandler
	leave []DefinitionEventHandler
}

// AddDefinitionEnterEventHandler adds an event handler to be called when entering Definition nodes.
func (w *Walker) AddDefinitionEnterEventHandler(h DefinitionEventHandler) {
	w.definitionEventHandlers.enter = append(w.definitionEventHandlers.enter, h)
}

// AddDefinitionLeaveEventHandler adds an event handler to be called when leaving Definition nodes.
func (w *Walker) AddDefinitionLeaveEventHandler(h DefinitionEventHandler) {
	w.definitionEventHandlers.leave = append(w.definitionEventHandlers.leave, h)
}

// OnDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDefinitionEnter(d Definition) {
	for _, handler := range w.definitionEventHandlers.enter {
		handler(d)
	}
}

// OnDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDefinitionLeave(d Definition) {
	for _, handler := range w.definitionEventHandlers.leave {
		handler(d)
	}
}

// walkDefinition is a function that walks Definition type's AST node.
func (w *Walker) walkDefinition(d Definition) {
	w.OnDefinitionEnter(d)

	switch d.Kind {
	case DefinitionKindExecutable:
		w.walkExecutableDefinition(d.ExecutableDefinition)
	case DefinitionKindTypeSystem:
		w.walkTypeSystemDefinition(d.TypeSystemDefinition)
	case DefinitionKindTypeSystemExtension:
		w.walkTypeSystemExtension(d.TypeSystemExtension)
	}

	w.OnDefinitionLeave(d)
}

// DefinitionsEventHandler function can handle enter/leave events for Definitions.
type DefinitionsEventHandler func(*Definitions)

// DefinitionsEventHandlers stores the enter and leave events handlers.
type DefinitionsEventHandlers struct {
	enter []DefinitionsEventHandler
	leave []DefinitionsEventHandler
}

// AddDefinitionsEnterEventHandler adds an event handler to be called when entering Definitions nodes.
func (w *Walker) AddDefinitionsEnterEventHandler(h DefinitionsEventHandler) {
	w.definitionsEventHandlers.enter = append(w.definitionsEventHandlers.enter, h)
}

// AddDefinitionsLeaveEventHandler adds an event handler to be called when leaving Definitions nodes.
func (w *Walker) AddDefinitionsLeaveEventHandler(h DefinitionsEventHandler) {
	w.definitionsEventHandlers.leave = append(w.definitionsEventHandlers.leave, h)
}

// OnDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDefinitionsEnter(ds *Definitions) {
	for _, handler := range w.definitionsEventHandlers.enter {
		handler(ds)
	}
}

// OnDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDefinitionsLeave(ds *Definitions) {
	for _, handler := range w.definitionsEventHandlers.leave {
		handler(ds)
	}
}

// walkDefinitions is a function that walks Definitions type's AST node.
func (w *Walker) walkDefinitions(ds *Definitions) {
	w.OnDefinitionsEnter(ds)

	ds.ForEach(func(d Definition, i int) {
		w.walkDefinition(d)
	})

	w.OnDefinitionsLeave(ds)
}

// DirectiveEventHandler function can handle enter/leave events for Directive.
type DirectiveEventHandler func(Directive)

// DirectiveEventHandlers stores the enter and leave events handlers.
type DirectiveEventHandlers struct {
	enter []DirectiveEventHandler
	leave []DirectiveEventHandler
}

// AddDirectiveEnterEventHandler adds an event handler to be called when entering Directive nodes.
func (w *Walker) AddDirectiveEnterEventHandler(h DirectiveEventHandler) {
	w.directiveEventHandlers.enter = append(w.directiveEventHandlers.enter, h)
}

// AddDirectiveLeaveEventHandler adds an event handler to be called when leaving Directive nodes.
func (w *Walker) AddDirectiveLeaveEventHandler(h DirectiveEventHandler) {
	w.directiveEventHandlers.leave = append(w.directiveEventHandlers.leave, h)
}

// OnDirectiveEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectiveEnter(d Directive) {
	for _, handler := range w.directiveEventHandlers.enter {
		handler(d)
	}
}

// OnDirectiveLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectiveLeave(d Directive) {
	for _, handler := range w.directiveEventHandlers.leave {
		handler(d)
	}
}

// walkDirective is a function that walks Directive type's AST node.
func (w *Walker) walkDirective(d Directive) {
	w.OnDirectiveEnter(d)

	if d.Arguments != nil {
		w.walkArguments(d.Arguments)
	}

	w.OnDirectiveLeave(d)
}

// DirectiveDefinitionEventHandler function can handle enter/leave events for DirectiveDefinition.
type DirectiveDefinitionEventHandler func(*DirectiveDefinition)

// DirectiveDefinitionEventHandlers stores the enter and leave events handlers.
type DirectiveDefinitionEventHandlers struct {
	enter []DirectiveDefinitionEventHandler
	leave []DirectiveDefinitionEventHandler
}

// AddDirectiveDefinitionEnterEventHandler adds an event handler to be called when entering DirectiveDefinition nodes.
func (w *Walker) AddDirectiveDefinitionEnterEventHandler(h DirectiveDefinitionEventHandler) {
	w.directiveDefinitionEventHandlers.enter = append(w.directiveDefinitionEventHandlers.enter, h)
}

// AddDirectiveDefinitionLeaveEventHandler adds an event handler to be called when leaving DirectiveDefinition nodes.
func (w *Walker) AddDirectiveDefinitionLeaveEventHandler(h DirectiveDefinitionEventHandler) {
	w.directiveDefinitionEventHandlers.leave = append(w.directiveDefinitionEventHandlers.leave, h)
}

// OnDirectiveDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectiveDefinitionEnter(dd *DirectiveDefinition) {
	for _, handler := range w.directiveDefinitionEventHandlers.enter {
		handler(dd)
	}
}

// OnDirectiveDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectiveDefinitionLeave(dd *DirectiveDefinition) {
	for _, handler := range w.directiveDefinitionEventHandlers.leave {
		handler(dd)
	}
}

// walkDirectiveDefinition is a function that walks DirectiveDefinition type's AST node.
func (w *Walker) walkDirectiveDefinition(dd *DirectiveDefinition) {
	w.OnDirectiveDefinitionEnter(dd)

	if dd.ArgumentsDefinition != nil {
		w.walkInputValueDefinitions(dd.ArgumentsDefinition)
	}

	w.OnDirectiveDefinitionLeave(dd)
}

// DirectivesEventHandler function can handle enter/leave events for Directives.
type DirectivesEventHandler func(*Directives)

// DirectivesEventHandlers stores the enter and leave events handlers.
type DirectivesEventHandlers struct {
	enter []DirectivesEventHandler
	leave []DirectivesEventHandler
}

// AddDirectivesEnterEventHandler adds an event handler to be called when entering Directives nodes.
func (w *Walker) AddDirectivesEnterEventHandler(h DirectivesEventHandler) {
	w.directivesEventHandlers.enter = append(w.directivesEventHandlers.enter, h)
}

// AddDirectivesLeaveEventHandler adds an event handler to be called when leaving Directives nodes.
func (w *Walker) AddDirectivesLeaveEventHandler(h DirectivesEventHandler) {
	w.directivesEventHandlers.leave = append(w.directivesEventHandlers.leave, h)
}

// OnDirectivesEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectivesEnter(ds *Directives) {
	for _, handler := range w.directivesEventHandlers.enter {
		handler(ds)
	}
}

// OnDirectivesLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectivesLeave(ds *Directives) {
	for _, handler := range w.directivesEventHandlers.leave {
		handler(ds)
	}
}

// walkDirectives is a function that walks Directives type's AST node.
func (w *Walker) walkDirectives(ds *Directives) {
	w.OnDirectivesEnter(ds)

	ds.ForEach(func(d Directive, i int) {
		w.walkDirective(d)
	})

	w.OnDirectivesLeave(ds)
}

// DocumentEventHandler function can handle enter/leave events for Document.
type DocumentEventHandler func(Document)

// DocumentEventHandlers stores the enter and leave events handlers.
type DocumentEventHandlers struct {
	enter []DocumentEventHandler
	leave []DocumentEventHandler
}

// AddDocumentEnterEventHandler adds an event handler to be called when entering Document nodes.
func (w *Walker) AddDocumentEnterEventHandler(h DocumentEventHandler) {
	w.documentEventHandlers.enter = append(w.documentEventHandlers.enter, h)
}

// AddDocumentLeaveEventHandler adds an event handler to be called when leaving Document nodes.
func (w *Walker) AddDocumentLeaveEventHandler(h DocumentEventHandler) {
	w.documentEventHandlers.leave = append(w.documentEventHandlers.leave, h)
}

// OnDocumentEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDocumentEnter(d Document) {
	for _, handler := range w.documentEventHandlers.enter {
		handler(d)
	}
}

// OnDocumentLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDocumentLeave(d Document) {
	for _, handler := range w.documentEventHandlers.leave {
		handler(d)
	}
}

// walkDocument is a function that walks Document type's AST node.
func (w *Walker) walkDocument(d Document) {
	w.OnDocumentEnter(d)

	if d.Definitions != nil {
		w.walkDefinitions(d.Definitions)
	}

	w.OnDocumentLeave(d)
}

// EnumTypeDefinitionEventHandler function can handle enter/leave events for EnumTypeDefinition.
type EnumTypeDefinitionEventHandler func(*TypeDefinition)

// EnumTypeDefinitionEventHandlers stores the enter and leave events handlers.
type EnumTypeDefinitionEventHandlers struct {
	enter []EnumTypeDefinitionEventHandler
	leave []EnumTypeDefinitionEventHandler
}

// AddEnumTypeDefinitionEnterEventHandler adds an event handler to be called when entering EnumTypeDefinition nodes.
func (w *Walker) AddEnumTypeDefinitionEnterEventHandler(h EnumTypeDefinitionEventHandler) {
	w.enumTypeDefinitionEventHandlers.enter = append(w.enumTypeDefinitionEventHandlers.enter, h)
}

// AddEnumTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving EnumTypeDefinition nodes.
func (w *Walker) AddEnumTypeDefinitionLeaveEventHandler(h EnumTypeDefinitionEventHandler) {
	w.enumTypeDefinitionEventHandlers.leave = append(w.enumTypeDefinitionEventHandlers.leave, h)
}

// OnEnumTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.enumTypeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnEnumTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.enumTypeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// walkEnumTypeDefinition is a function that walks EnumTypeDefinition type's AST node.
func (w *Walker) walkEnumTypeDefinition(td *TypeDefinition) {
	w.OnEnumTypeDefinitionEnter(td)

	if td.Directives != nil {
		w.walkDirectives(td.Directives)
	}

	if td.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(td.EnumValuesDefinition)
	}

	if td.FieldsDefinition != nil {
		w.walkFieldDefinitions(td.FieldsDefinition)
	}

	if td.ImplementsInterface != nil {
		w.walkTypes(td.ImplementsInterface)
	}

	if td.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(td.InputFieldsDefinition)
	}

	if td.UnionMemberTypes != nil {
		w.walkTypes(td.UnionMemberTypes)
	}

	w.OnEnumTypeDefinitionLeave(td)
}

// EnumTypeExtensionEventHandler function can handle enter/leave events for EnumTypeExtension.
type EnumTypeExtensionEventHandler func(*TypeExtension)

// EnumTypeExtensionEventHandlers stores the enter and leave events handlers.
type EnumTypeExtensionEventHandlers struct {
	enter []EnumTypeExtensionEventHandler
	leave []EnumTypeExtensionEventHandler
}

// AddEnumTypeExtensionEnterEventHandler adds an event handler to be called when entering EnumTypeExtension nodes.
func (w *Walker) AddEnumTypeExtensionEnterEventHandler(h EnumTypeExtensionEventHandler) {
	w.enumTypeExtensionEventHandlers.enter = append(w.enumTypeExtensionEventHandlers.enter, h)
}

// AddEnumTypeExtensionLeaveEventHandler adds an event handler to be called when leaving EnumTypeExtension nodes.
func (w *Walker) AddEnumTypeExtensionLeaveEventHandler(h EnumTypeExtensionEventHandler) {
	w.enumTypeExtensionEventHandlers.leave = append(w.enumTypeExtensionEventHandlers.leave, h)
}

// OnEnumTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.enumTypeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnEnumTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.enumTypeExtensionEventHandlers.leave {
		handler(te)
	}
}

// walkEnumTypeExtension is a function that walks EnumTypeExtension type's AST node.
func (w *Walker) walkEnumTypeExtension(te *TypeExtension) {
	w.OnEnumTypeExtensionEnter(te)

	if te.Directives != nil {
		w.walkDirectives(te.Directives)
	}

	if te.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(te.EnumValuesDefinition)
	}

	if te.FieldsDefinition != nil {
		w.walkFieldDefinitions(te.FieldsDefinition)
	}

	if te.ImplementsInterface != nil {
		w.walkTypes(te.ImplementsInterface)
	}

	if te.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(te.InputFieldsDefinition)
	}

	if te.UnionMemberTypes != nil {
		w.walkTypes(te.UnionMemberTypes)
	}

	w.OnEnumTypeExtensionLeave(te)
}

// EnumValueEventHandler function can handle enter/leave events for EnumValue.
type EnumValueEventHandler func(Value)

// EnumValueEventHandlers stores the enter and leave events handlers.
type EnumValueEventHandlers struct {
	enter []EnumValueEventHandler
	leave []EnumValueEventHandler
}

// AddEnumValueEnterEventHandler adds an event handler to be called when entering EnumValue nodes.
func (w *Walker) AddEnumValueEnterEventHandler(h EnumValueEventHandler) {
	w.enumValueEventHandlers.enter = append(w.enumValueEventHandlers.enter, h)
}

// AddEnumValueLeaveEventHandler adds an event handler to be called when leaving EnumValue nodes.
func (w *Walker) AddEnumValueLeaveEventHandler(h EnumValueEventHandler) {
	w.enumValueEventHandlers.leave = append(w.enumValueEventHandlers.leave, h)
}

// OnEnumValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumValueEnter(v Value) {
	for _, handler := range w.enumValueEventHandlers.enter {
		handler(v)
	}
}

// OnEnumValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumValueLeave(v Value) {
	for _, handler := range w.enumValueEventHandlers.leave {
		handler(v)
	}
}

// walkEnumValue is a function that walks EnumValue type's AST node.
func (w *Walker) walkEnumValue(v Value) {
	w.OnEnumValueEnter(v)

	w.OnEnumValueLeave(v)
}

// EnumValueDefinitionEventHandler function can handle enter/leave events for EnumValueDefinition.
type EnumValueDefinitionEventHandler func(EnumValueDefinition)

// EnumValueDefinitionEventHandlers stores the enter and leave events handlers.
type EnumValueDefinitionEventHandlers struct {
	enter []EnumValueDefinitionEventHandler
	leave []EnumValueDefinitionEventHandler
}

// AddEnumValueDefinitionEnterEventHandler adds an event handler to be called when entering EnumValueDefinition nodes.
func (w *Walker) AddEnumValueDefinitionEnterEventHandler(h EnumValueDefinitionEventHandler) {
	w.enumValueDefinitionEventHandlers.enter = append(w.enumValueDefinitionEventHandlers.enter, h)
}

// AddEnumValueDefinitionLeaveEventHandler adds an event handler to be called when leaving EnumValueDefinition nodes.
func (w *Walker) AddEnumValueDefinitionLeaveEventHandler(h EnumValueDefinitionEventHandler) {
	w.enumValueDefinitionEventHandlers.leave = append(w.enumValueDefinitionEventHandlers.leave, h)
}

// OnEnumValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionEnter(evd EnumValueDefinition) {
	for _, handler := range w.enumValueDefinitionEventHandlers.enter {
		handler(evd)
	}
}

// OnEnumValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionLeave(evd EnumValueDefinition) {
	for _, handler := range w.enumValueDefinitionEventHandlers.leave {
		handler(evd)
	}
}

// walkEnumValueDefinition is a function that walks EnumValueDefinition type's AST node.
func (w *Walker) walkEnumValueDefinition(evd EnumValueDefinition) {
	w.OnEnumValueDefinitionEnter(evd)

	if evd.Directives != nil {
		w.walkDirectives(evd.Directives)
	}

	w.OnEnumValueDefinitionLeave(evd)
}

// EnumValueDefinitionsEventHandler function can handle enter/leave events for EnumValueDefinitions.
type EnumValueDefinitionsEventHandler func(*EnumValueDefinitions)

// EnumValueDefinitionsEventHandlers stores the enter and leave events handlers.
type EnumValueDefinitionsEventHandlers struct {
	enter []EnumValueDefinitionsEventHandler
	leave []EnumValueDefinitionsEventHandler
}

// AddEnumValueDefinitionsEnterEventHandler adds an event handler to be called when entering EnumValueDefinitions nodes.
func (w *Walker) AddEnumValueDefinitionsEnterEventHandler(h EnumValueDefinitionsEventHandler) {
	w.enumValueDefinitionsEventHandlers.enter = append(w.enumValueDefinitionsEventHandlers.enter, h)
}

// AddEnumValueDefinitionsLeaveEventHandler adds an event handler to be called when leaving EnumValueDefinitions nodes.
func (w *Walker) AddEnumValueDefinitionsLeaveEventHandler(h EnumValueDefinitionsEventHandler) {
	w.enumValueDefinitionsEventHandlers.leave = append(w.enumValueDefinitionsEventHandlers.leave, h)
}

// OnEnumValueDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionsEnter(evds *EnumValueDefinitions) {
	for _, handler := range w.enumValueDefinitionsEventHandlers.enter {
		handler(evds)
	}
}

// OnEnumValueDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionsLeave(evds *EnumValueDefinitions) {
	for _, handler := range w.enumValueDefinitionsEventHandlers.leave {
		handler(evds)
	}
}

// walkEnumValueDefinitions is a function that walks EnumValueDefinitions type's AST node.
func (w *Walker) walkEnumValueDefinitions(evds *EnumValueDefinitions) {
	w.OnEnumValueDefinitionsEnter(evds)

	evds.ForEach(func(evd EnumValueDefinition, i int) {
		w.walkEnumValueDefinition(evd)
	})

	w.OnEnumValueDefinitionsLeave(evds)
}

// ExecutableDefinitionEventHandler function can handle enter/leave events for ExecutableDefinition.
type ExecutableDefinitionEventHandler func(*ExecutableDefinition)

// ExecutableDefinitionEventHandlers stores the enter and leave events handlers.
type ExecutableDefinitionEventHandlers struct {
	enter []ExecutableDefinitionEventHandler
	leave []ExecutableDefinitionEventHandler
}

// AddExecutableDefinitionEnterEventHandler adds an event handler to be called when entering ExecutableDefinition nodes.
func (w *Walker) AddExecutableDefinitionEnterEventHandler(h ExecutableDefinitionEventHandler) {
	w.executableDefinitionEventHandlers.enter = append(w.executableDefinitionEventHandlers.enter, h)
}

// AddExecutableDefinitionLeaveEventHandler adds an event handler to be called when leaving ExecutableDefinition nodes.
func (w *Walker) AddExecutableDefinitionLeaveEventHandler(h ExecutableDefinitionEventHandler) {
	w.executableDefinitionEventHandlers.leave = append(w.executableDefinitionEventHandlers.leave, h)
}

// OnExecutableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnExecutableDefinitionEnter(ed *ExecutableDefinition) {
	for _, handler := range w.executableDefinitionEventHandlers.enter {
		handler(ed)
	}
}

// OnExecutableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnExecutableDefinitionLeave(ed *ExecutableDefinition) {
	for _, handler := range w.executableDefinitionEventHandlers.leave {
		handler(ed)
	}
}

// walkExecutableDefinition is a function that walks ExecutableDefinition type's AST node.
func (w *Walker) walkExecutableDefinition(ed *ExecutableDefinition) {
	w.OnExecutableDefinitionEnter(ed)

	switch ed.Kind {
	case ExecutableDefinitionKindFragment:
		w.walkFragmentDefinition(ed.FragmentDefinition)
	case ExecutableDefinitionKindOperation:
		w.walkOperationDefinition(ed.OperationDefinition)
	}

	w.OnExecutableDefinitionLeave(ed)
}

// FieldDefinitionEventHandler function can handle enter/leave events for FieldDefinition.
type FieldDefinitionEventHandler func(FieldDefinition)

// FieldDefinitionEventHandlers stores the enter and leave events handlers.
type FieldDefinitionEventHandlers struct {
	enter []FieldDefinitionEventHandler
	leave []FieldDefinitionEventHandler
}

// AddFieldDefinitionEnterEventHandler adds an event handler to be called when entering FieldDefinition nodes.
func (w *Walker) AddFieldDefinitionEnterEventHandler(h FieldDefinitionEventHandler) {
	w.fieldDefinitionEventHandlers.enter = append(w.fieldDefinitionEventHandlers.enter, h)
}

// AddFieldDefinitionLeaveEventHandler adds an event handler to be called when leaving FieldDefinition nodes.
func (w *Walker) AddFieldDefinitionLeaveEventHandler(h FieldDefinitionEventHandler) {
	w.fieldDefinitionEventHandlers.leave = append(w.fieldDefinitionEventHandlers.leave, h)
}

// OnFieldDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionEnter(fd FieldDefinition) {
	for _, handler := range w.fieldDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFieldDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionLeave(fd FieldDefinition) {
	for _, handler := range w.fieldDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// walkFieldDefinition is a function that walks FieldDefinition type's AST node.
func (w *Walker) walkFieldDefinition(fd FieldDefinition) {
	w.OnFieldDefinitionEnter(fd)

	if fd.ArgumentsDefinition != nil {
		w.walkInputValueDefinitions(fd.ArgumentsDefinition)
	}

	if fd.Directives != nil {
		w.walkDirectives(fd.Directives)
	}

	w.walkType(fd.Type)

	w.OnFieldDefinitionLeave(fd)
}

// FieldDefinitionsEventHandler function can handle enter/leave events for FieldDefinitions.
type FieldDefinitionsEventHandler func(*FieldDefinitions)

// FieldDefinitionsEventHandlers stores the enter and leave events handlers.
type FieldDefinitionsEventHandlers struct {
	enter []FieldDefinitionsEventHandler
	leave []FieldDefinitionsEventHandler
}

// AddFieldDefinitionsEnterEventHandler adds an event handler to be called when entering FieldDefinitions nodes.
func (w *Walker) AddFieldDefinitionsEnterEventHandler(h FieldDefinitionsEventHandler) {
	w.fieldDefinitionsEventHandlers.enter = append(w.fieldDefinitionsEventHandlers.enter, h)
}

// AddFieldDefinitionsLeaveEventHandler adds an event handler to be called when leaving FieldDefinitions nodes.
func (w *Walker) AddFieldDefinitionsLeaveEventHandler(h FieldDefinitionsEventHandler) {
	w.fieldDefinitionsEventHandlers.leave = append(w.fieldDefinitionsEventHandlers.leave, h)
}

// OnFieldDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionsEnter(fds *FieldDefinitions) {
	for _, handler := range w.fieldDefinitionsEventHandlers.enter {
		handler(fds)
	}
}

// OnFieldDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionsLeave(fds *FieldDefinitions) {
	for _, handler := range w.fieldDefinitionsEventHandlers.leave {
		handler(fds)
	}
}

// walkFieldDefinitions is a function that walks FieldDefinitions type's AST node.
func (w *Walker) walkFieldDefinitions(fds *FieldDefinitions) {
	w.OnFieldDefinitionsEnter(fds)

	fds.ForEach(func(fd FieldDefinition, i int) {
		w.walkFieldDefinition(fd)
	})

	w.OnFieldDefinitionsLeave(fds)
}

// FieldSelectionEventHandler function can handle enter/leave events for FieldSelection.
type FieldSelectionEventHandler func(Selection)

// FieldSelectionEventHandlers stores the enter and leave events handlers.
type FieldSelectionEventHandlers struct {
	enter []FieldSelectionEventHandler
	leave []FieldSelectionEventHandler
}

// AddFieldSelectionEnterEventHandler adds an event handler to be called when entering FieldSelection nodes.
func (w *Walker) AddFieldSelectionEnterEventHandler(h FieldSelectionEventHandler) {
	w.fieldSelectionEventHandlers.enter = append(w.fieldSelectionEventHandlers.enter, h)
}

// AddFieldSelectionLeaveEventHandler adds an event handler to be called when leaving FieldSelection nodes.
func (w *Walker) AddFieldSelectionLeaveEventHandler(h FieldSelectionEventHandler) {
	w.fieldSelectionEventHandlers.leave = append(w.fieldSelectionEventHandlers.leave, h)
}

// OnFieldSelectionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldSelectionEnter(s Selection) {
	for _, handler := range w.fieldSelectionEventHandlers.enter {
		handler(s)
	}
}

// OnFieldSelectionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldSelectionLeave(s Selection) {
	for _, handler := range w.fieldSelectionEventHandlers.leave {
		handler(s)
	}
}

// walkFieldSelection is a function that walks FieldSelection type's AST node.
func (w *Walker) walkFieldSelection(s Selection) {
	w.OnFieldSelectionEnter(s)

	if s.Arguments != nil {
		w.walkArguments(s.Arguments)
	}

	if s.Directives != nil {
		w.walkDirectives(s.Directives)
	}

	if s.SelectionSet != nil {
		w.walkSelections(s.SelectionSet)
	}

	w.OnFieldSelectionLeave(s)
}

// FloatValueEventHandler function can handle enter/leave events for FloatValue.
type FloatValueEventHandler func(Value)

// FloatValueEventHandlers stores the enter and leave events handlers.
type FloatValueEventHandlers struct {
	enter []FloatValueEventHandler
	leave []FloatValueEventHandler
}

// AddFloatValueEnterEventHandler adds an event handler to be called when entering FloatValue nodes.
func (w *Walker) AddFloatValueEnterEventHandler(h FloatValueEventHandler) {
	w.floatValueEventHandlers.enter = append(w.floatValueEventHandlers.enter, h)
}

// AddFloatValueLeaveEventHandler adds an event handler to be called when leaving FloatValue nodes.
func (w *Walker) AddFloatValueLeaveEventHandler(h FloatValueEventHandler) {
	w.floatValueEventHandlers.leave = append(w.floatValueEventHandlers.leave, h)
}

// OnFloatValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFloatValueEnter(v Value) {
	for _, handler := range w.floatValueEventHandlers.enter {
		handler(v)
	}
}

// OnFloatValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFloatValueLeave(v Value) {
	for _, handler := range w.floatValueEventHandlers.leave {
		handler(v)
	}
}

// walkFloatValue is a function that walks FloatValue type's AST node.
func (w *Walker) walkFloatValue(v Value) {
	w.OnFloatValueEnter(v)

	w.OnFloatValueLeave(v)
}

// FragmentDefinitionEventHandler function can handle enter/leave events for FragmentDefinition.
type FragmentDefinitionEventHandler func(*FragmentDefinition)

// FragmentDefinitionEventHandlers stores the enter and leave events handlers.
type FragmentDefinitionEventHandlers struct {
	enter []FragmentDefinitionEventHandler
	leave []FragmentDefinitionEventHandler
}

// AddFragmentDefinitionEnterEventHandler adds an event handler to be called when entering FragmentDefinition nodes.
func (w *Walker) AddFragmentDefinitionEnterEventHandler(h FragmentDefinitionEventHandler) {
	w.fragmentDefinitionEventHandlers.enter = append(w.fragmentDefinitionEventHandlers.enter, h)
}

// AddFragmentDefinitionLeaveEventHandler adds an event handler to be called when leaving FragmentDefinition nodes.
func (w *Walker) AddFragmentDefinitionLeaveEventHandler(h FragmentDefinitionEventHandler) {
	w.fragmentDefinitionEventHandlers.leave = append(w.fragmentDefinitionEventHandlers.leave, h)
}

// OnFragmentDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFragmentDefinitionEnter(fd *FragmentDefinition) {
	for _, handler := range w.fragmentDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFragmentDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFragmentDefinitionLeave(fd *FragmentDefinition) {
	for _, handler := range w.fragmentDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// walkFragmentDefinition is a function that walks FragmentDefinition type's AST node.
func (w *Walker) walkFragmentDefinition(fd *FragmentDefinition) {
	w.OnFragmentDefinitionEnter(fd)

	if fd.Directives != nil {
		w.walkDirectives(fd.Directives)
	}

	if fd.SelectionSet != nil {
		w.walkSelections(fd.SelectionSet)
	}

	if fd.TypeCondition != nil {
		w.walkTypeCondition(fd.TypeCondition)
	}

	w.OnFragmentDefinitionLeave(fd)
}

// FragmentSpreadSelectionEventHandler function can handle enter/leave events for FragmentSpreadSelection.
type FragmentSpreadSelectionEventHandler func(Selection)

// FragmentSpreadSelectionEventHandlers stores the enter and leave events handlers.
type FragmentSpreadSelectionEventHandlers struct {
	enter []FragmentSpreadSelectionEventHandler
	leave []FragmentSpreadSelectionEventHandler
}

// AddFragmentSpreadSelectionEnterEventHandler adds an event handler to be called when entering FragmentSpreadSelection nodes.
func (w *Walker) AddFragmentSpreadSelectionEnterEventHandler(h FragmentSpreadSelectionEventHandler) {
	w.fragmentSpreadSelectionEventHandlers.enter = append(w.fragmentSpreadSelectionEventHandlers.enter, h)
}

// AddFragmentSpreadSelectionLeaveEventHandler adds an event handler to be called when leaving FragmentSpreadSelection nodes.
func (w *Walker) AddFragmentSpreadSelectionLeaveEventHandler(h FragmentSpreadSelectionEventHandler) {
	w.fragmentSpreadSelectionEventHandlers.leave = append(w.fragmentSpreadSelectionEventHandlers.leave, h)
}

// OnFragmentSpreadSelectionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFragmentSpreadSelectionEnter(s Selection) {
	for _, handler := range w.fragmentSpreadSelectionEventHandlers.enter {
		handler(s)
	}
}

// OnFragmentSpreadSelectionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFragmentSpreadSelectionLeave(s Selection) {
	for _, handler := range w.fragmentSpreadSelectionEventHandlers.leave {
		handler(s)
	}
}

// walkFragmentSpreadSelection is a function that walks FragmentSpreadSelection type's AST node.
func (w *Walker) walkFragmentSpreadSelection(s Selection) {
	w.OnFragmentSpreadSelectionEnter(s)

	if s.Arguments != nil {
		w.walkArguments(s.Arguments)
	}

	if s.Directives != nil {
		w.walkDirectives(s.Directives)
	}

	if s.SelectionSet != nil {
		w.walkSelections(s.SelectionSet)
	}

	if s.TypeCondition != nil {
		w.walkTypeCondition(s.TypeCondition)
	}

	w.OnFragmentSpreadSelectionLeave(s)
}

// InlineFragmentSelectionEventHandler function can handle enter/leave events for InlineFragmentSelection.
type InlineFragmentSelectionEventHandler func(Selection)

// InlineFragmentSelectionEventHandlers stores the enter and leave events handlers.
type InlineFragmentSelectionEventHandlers struct {
	enter []InlineFragmentSelectionEventHandler
	leave []InlineFragmentSelectionEventHandler
}

// AddInlineFragmentSelectionEnterEventHandler adds an event handler to be called when entering InlineFragmentSelection nodes.
func (w *Walker) AddInlineFragmentSelectionEnterEventHandler(h InlineFragmentSelectionEventHandler) {
	w.inlineFragmentSelectionEventHandlers.enter = append(w.inlineFragmentSelectionEventHandlers.enter, h)
}

// AddInlineFragmentSelectionLeaveEventHandler adds an event handler to be called when leaving InlineFragmentSelection nodes.
func (w *Walker) AddInlineFragmentSelectionLeaveEventHandler(h InlineFragmentSelectionEventHandler) {
	w.inlineFragmentSelectionEventHandlers.leave = append(w.inlineFragmentSelectionEventHandlers.leave, h)
}

// OnInlineFragmentSelectionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInlineFragmentSelectionEnter(s Selection) {
	for _, handler := range w.inlineFragmentSelectionEventHandlers.enter {
		handler(s)
	}
}

// OnInlineFragmentSelectionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInlineFragmentSelectionLeave(s Selection) {
	for _, handler := range w.inlineFragmentSelectionEventHandlers.leave {
		handler(s)
	}
}

// walkInlineFragmentSelection is a function that walks InlineFragmentSelection type's AST node.
func (w *Walker) walkInlineFragmentSelection(s Selection) {
	w.OnInlineFragmentSelectionEnter(s)

	if s.Arguments != nil {
		w.walkArguments(s.Arguments)
	}

	if s.Directives != nil {
		w.walkDirectives(s.Directives)
	}

	if s.SelectionSet != nil {
		w.walkSelections(s.SelectionSet)
	}

	w.OnInlineFragmentSelectionLeave(s)
}

// InputObjectTypeDefinitionEventHandler function can handle enter/leave events for InputObjectTypeDefinition.
type InputObjectTypeDefinitionEventHandler func(*TypeDefinition)

// InputObjectTypeDefinitionEventHandlers stores the enter and leave events handlers.
type InputObjectTypeDefinitionEventHandlers struct {
	enter []InputObjectTypeDefinitionEventHandler
	leave []InputObjectTypeDefinitionEventHandler
}

// AddInputObjectTypeDefinitionEnterEventHandler adds an event handler to be called when entering InputObjectTypeDefinition nodes.
func (w *Walker) AddInputObjectTypeDefinitionEnterEventHandler(h InputObjectTypeDefinitionEventHandler) {
	w.inputObjectTypeDefinitionEventHandlers.enter = append(w.inputObjectTypeDefinitionEventHandlers.enter, h)
}

// AddInputObjectTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving InputObjectTypeDefinition nodes.
func (w *Walker) AddInputObjectTypeDefinitionLeaveEventHandler(h InputObjectTypeDefinitionEventHandler) {
	w.inputObjectTypeDefinitionEventHandlers.leave = append(w.inputObjectTypeDefinitionEventHandlers.leave, h)
}

// OnInputObjectTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputObjectTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.inputObjectTypeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnInputObjectTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputObjectTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.inputObjectTypeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// walkInputObjectTypeDefinition is a function that walks InputObjectTypeDefinition type's AST node.
func (w *Walker) walkInputObjectTypeDefinition(td *TypeDefinition) {
	w.OnInputObjectTypeDefinitionEnter(td)

	if td.Directives != nil {
		w.walkDirectives(td.Directives)
	}

	if td.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(td.EnumValuesDefinition)
	}

	if td.FieldsDefinition != nil {
		w.walkFieldDefinitions(td.FieldsDefinition)
	}

	if td.ImplementsInterface != nil {
		w.walkTypes(td.ImplementsInterface)
	}

	if td.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(td.InputFieldsDefinition)
	}

	if td.UnionMemberTypes != nil {
		w.walkTypes(td.UnionMemberTypes)
	}

	w.OnInputObjectTypeDefinitionLeave(td)
}

// InputObjectTypeExtensionEventHandler function can handle enter/leave events for InputObjectTypeExtension.
type InputObjectTypeExtensionEventHandler func(*TypeExtension)

// InputObjectTypeExtensionEventHandlers stores the enter and leave events handlers.
type InputObjectTypeExtensionEventHandlers struct {
	enter []InputObjectTypeExtensionEventHandler
	leave []InputObjectTypeExtensionEventHandler
}

// AddInputObjectTypeExtensionEnterEventHandler adds an event handler to be called when entering InputObjectTypeExtension nodes.
func (w *Walker) AddInputObjectTypeExtensionEnterEventHandler(h InputObjectTypeExtensionEventHandler) {
	w.inputObjectTypeExtensionEventHandlers.enter = append(w.inputObjectTypeExtensionEventHandlers.enter, h)
}

// AddInputObjectTypeExtensionLeaveEventHandler adds an event handler to be called when leaving InputObjectTypeExtension nodes.
func (w *Walker) AddInputObjectTypeExtensionLeaveEventHandler(h InputObjectTypeExtensionEventHandler) {
	w.inputObjectTypeExtensionEventHandlers.leave = append(w.inputObjectTypeExtensionEventHandlers.leave, h)
}

// OnInputObjectTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputObjectTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.inputObjectTypeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnInputObjectTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputObjectTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.inputObjectTypeExtensionEventHandlers.leave {
		handler(te)
	}
}

// walkInputObjectTypeExtension is a function that walks InputObjectTypeExtension type's AST node.
func (w *Walker) walkInputObjectTypeExtension(te *TypeExtension) {
	w.OnInputObjectTypeExtensionEnter(te)

	if te.Directives != nil {
		w.walkDirectives(te.Directives)
	}

	if te.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(te.EnumValuesDefinition)
	}

	if te.FieldsDefinition != nil {
		w.walkFieldDefinitions(te.FieldsDefinition)
	}

	if te.ImplementsInterface != nil {
		w.walkTypes(te.ImplementsInterface)
	}

	if te.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(te.InputFieldsDefinition)
	}

	if te.UnionMemberTypes != nil {
		w.walkTypes(te.UnionMemberTypes)
	}

	w.OnInputObjectTypeExtensionLeave(te)
}

// InputValueDefinitionEventHandler function can handle enter/leave events for InputValueDefinition.
type InputValueDefinitionEventHandler func(InputValueDefinition)

// InputValueDefinitionEventHandlers stores the enter and leave events handlers.
type InputValueDefinitionEventHandlers struct {
	enter []InputValueDefinitionEventHandler
	leave []InputValueDefinitionEventHandler
}

// AddInputValueDefinitionEnterEventHandler adds an event handler to be called when entering InputValueDefinition nodes.
func (w *Walker) AddInputValueDefinitionEnterEventHandler(h InputValueDefinitionEventHandler) {
	w.inputValueDefinitionEventHandlers.enter = append(w.inputValueDefinitionEventHandlers.enter, h)
}

// AddInputValueDefinitionLeaveEventHandler adds an event handler to be called when leaving InputValueDefinition nodes.
func (w *Walker) AddInputValueDefinitionLeaveEventHandler(h InputValueDefinitionEventHandler) {
	w.inputValueDefinitionEventHandlers.leave = append(w.inputValueDefinitionEventHandlers.leave, h)
}

// OnInputValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionEnter(ivd InputValueDefinition) {
	for _, handler := range w.inputValueDefinitionEventHandlers.enter {
		handler(ivd)
	}
}

// OnInputValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionLeave(ivd InputValueDefinition) {
	for _, handler := range w.inputValueDefinitionEventHandlers.leave {
		handler(ivd)
	}
}

// walkInputValueDefinition is a function that walks InputValueDefinition type's AST node.
func (w *Walker) walkInputValueDefinition(ivd InputValueDefinition) {
	w.OnInputValueDefinitionEnter(ivd)

	if ivd.DefaultValue != nil {
		w.walkValue(*ivd.DefaultValue)
	}

	if ivd.Directives != nil {
		w.walkDirectives(ivd.Directives)
	}

	w.walkType(ivd.Type)

	w.OnInputValueDefinitionLeave(ivd)
}

// InputValueDefinitionsEventHandler function can handle enter/leave events for InputValueDefinitions.
type InputValueDefinitionsEventHandler func(*InputValueDefinitions)

// InputValueDefinitionsEventHandlers stores the enter and leave events handlers.
type InputValueDefinitionsEventHandlers struct {
	enter []InputValueDefinitionsEventHandler
	leave []InputValueDefinitionsEventHandler
}

// AddInputValueDefinitionsEnterEventHandler adds an event handler to be called when entering InputValueDefinitions nodes.
func (w *Walker) AddInputValueDefinitionsEnterEventHandler(h InputValueDefinitionsEventHandler) {
	w.inputValueDefinitionsEventHandlers.enter = append(w.inputValueDefinitionsEventHandlers.enter, h)
}

// AddInputValueDefinitionsLeaveEventHandler adds an event handler to be called when leaving InputValueDefinitions nodes.
func (w *Walker) AddInputValueDefinitionsLeaveEventHandler(h InputValueDefinitionsEventHandler) {
	w.inputValueDefinitionsEventHandlers.leave = append(w.inputValueDefinitionsEventHandlers.leave, h)
}

// OnInputValueDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionsEnter(ivds *InputValueDefinitions) {
	for _, handler := range w.inputValueDefinitionsEventHandlers.enter {
		handler(ivds)
	}
}

// OnInputValueDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionsLeave(ivds *InputValueDefinitions) {
	for _, handler := range w.inputValueDefinitionsEventHandlers.leave {
		handler(ivds)
	}
}

// walkInputValueDefinitions is a function that walks InputValueDefinitions type's AST node.
func (w *Walker) walkInputValueDefinitions(ivds *InputValueDefinitions) {
	w.OnInputValueDefinitionsEnter(ivds)

	ivds.ForEach(func(ivd InputValueDefinition, i int) {
		w.walkInputValueDefinition(ivd)
	})

	w.OnInputValueDefinitionsLeave(ivds)
}

// IntValueEventHandler function can handle enter/leave events for IntValue.
type IntValueEventHandler func(Value)

// IntValueEventHandlers stores the enter and leave events handlers.
type IntValueEventHandlers struct {
	enter []IntValueEventHandler
	leave []IntValueEventHandler
}

// AddIntValueEnterEventHandler adds an event handler to be called when entering IntValue nodes.
func (w *Walker) AddIntValueEnterEventHandler(h IntValueEventHandler) {
	w.intValueEventHandlers.enter = append(w.intValueEventHandlers.enter, h)
}

// AddIntValueLeaveEventHandler adds an event handler to be called when leaving IntValue nodes.
func (w *Walker) AddIntValueLeaveEventHandler(h IntValueEventHandler) {
	w.intValueEventHandlers.leave = append(w.intValueEventHandlers.leave, h)
}

// OnIntValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnIntValueEnter(v Value) {
	for _, handler := range w.intValueEventHandlers.enter {
		handler(v)
	}
}

// OnIntValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnIntValueLeave(v Value) {
	for _, handler := range w.intValueEventHandlers.leave {
		handler(v)
	}
}

// walkIntValue is a function that walks IntValue type's AST node.
func (w *Walker) walkIntValue(v Value) {
	w.OnIntValueEnter(v)

	w.OnIntValueLeave(v)
}

// InterfaceTypeDefinitionEventHandler function can handle enter/leave events for InterfaceTypeDefinition.
type InterfaceTypeDefinitionEventHandler func(*TypeDefinition)

// InterfaceTypeDefinitionEventHandlers stores the enter and leave events handlers.
type InterfaceTypeDefinitionEventHandlers struct {
	enter []InterfaceTypeDefinitionEventHandler
	leave []InterfaceTypeDefinitionEventHandler
}

// AddInterfaceTypeDefinitionEnterEventHandler adds an event handler to be called when entering InterfaceTypeDefinition nodes.
func (w *Walker) AddInterfaceTypeDefinitionEnterEventHandler(h InterfaceTypeDefinitionEventHandler) {
	w.interfaceTypeDefinitionEventHandlers.enter = append(w.interfaceTypeDefinitionEventHandlers.enter, h)
}

// AddInterfaceTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving InterfaceTypeDefinition nodes.
func (w *Walker) AddInterfaceTypeDefinitionLeaveEventHandler(h InterfaceTypeDefinitionEventHandler) {
	w.interfaceTypeDefinitionEventHandlers.leave = append(w.interfaceTypeDefinitionEventHandlers.leave, h)
}

// OnInterfaceTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInterfaceTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.interfaceTypeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnInterfaceTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInterfaceTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.interfaceTypeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// walkInterfaceTypeDefinition is a function that walks InterfaceTypeDefinition type's AST node.
func (w *Walker) walkInterfaceTypeDefinition(td *TypeDefinition) {
	w.OnInterfaceTypeDefinitionEnter(td)

	if td.Directives != nil {
		w.walkDirectives(td.Directives)
	}

	if td.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(td.EnumValuesDefinition)
	}

	if td.FieldsDefinition != nil {
		w.walkFieldDefinitions(td.FieldsDefinition)
	}

	if td.ImplementsInterface != nil {
		w.walkTypes(td.ImplementsInterface)
	}

	if td.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(td.InputFieldsDefinition)
	}

	if td.UnionMemberTypes != nil {
		w.walkTypes(td.UnionMemberTypes)
	}

	w.OnInterfaceTypeDefinitionLeave(td)
}

// InterfaceTypeExtensionEventHandler function can handle enter/leave events for InterfaceTypeExtension.
type InterfaceTypeExtensionEventHandler func(*TypeExtension)

// InterfaceTypeExtensionEventHandlers stores the enter and leave events handlers.
type InterfaceTypeExtensionEventHandlers struct {
	enter []InterfaceTypeExtensionEventHandler
	leave []InterfaceTypeExtensionEventHandler
}

// AddInterfaceTypeExtensionEnterEventHandler adds an event handler to be called when entering InterfaceTypeExtension nodes.
func (w *Walker) AddInterfaceTypeExtensionEnterEventHandler(h InterfaceTypeExtensionEventHandler) {
	w.interfaceTypeExtensionEventHandlers.enter = append(w.interfaceTypeExtensionEventHandlers.enter, h)
}

// AddInterfaceTypeExtensionLeaveEventHandler adds an event handler to be called when leaving InterfaceTypeExtension nodes.
func (w *Walker) AddInterfaceTypeExtensionLeaveEventHandler(h InterfaceTypeExtensionEventHandler) {
	w.interfaceTypeExtensionEventHandlers.leave = append(w.interfaceTypeExtensionEventHandlers.leave, h)
}

// OnInterfaceTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInterfaceTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.interfaceTypeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnInterfaceTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInterfaceTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.interfaceTypeExtensionEventHandlers.leave {
		handler(te)
	}
}

// walkInterfaceTypeExtension is a function that walks InterfaceTypeExtension type's AST node.
func (w *Walker) walkInterfaceTypeExtension(te *TypeExtension) {
	w.OnInterfaceTypeExtensionEnter(te)

	if te.Directives != nil {
		w.walkDirectives(te.Directives)
	}

	if te.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(te.EnumValuesDefinition)
	}

	if te.FieldsDefinition != nil {
		w.walkFieldDefinitions(te.FieldsDefinition)
	}

	if te.ImplementsInterface != nil {
		w.walkTypes(te.ImplementsInterface)
	}

	if te.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(te.InputFieldsDefinition)
	}

	if te.UnionMemberTypes != nil {
		w.walkTypes(te.UnionMemberTypes)
	}

	w.OnInterfaceTypeExtensionLeave(te)
}

// ListTypeEventHandler function can handle enter/leave events for ListType.
type ListTypeEventHandler func(Type)

// ListTypeEventHandlers stores the enter and leave events handlers.
type ListTypeEventHandlers struct {
	enter []ListTypeEventHandler
	leave []ListTypeEventHandler
}

// AddListTypeEnterEventHandler adds an event handler to be called when entering ListType nodes.
func (w *Walker) AddListTypeEnterEventHandler(h ListTypeEventHandler) {
	w.listTypeEventHandlers.enter = append(w.listTypeEventHandlers.enter, h)
}

// AddListTypeLeaveEventHandler adds an event handler to be called when leaving ListType nodes.
func (w *Walker) AddListTypeLeaveEventHandler(h ListTypeEventHandler) {
	w.listTypeEventHandlers.leave = append(w.listTypeEventHandlers.leave, h)
}

// OnListTypeEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnListTypeEnter(t Type) {
	for _, handler := range w.listTypeEventHandlers.enter {
		handler(t)
	}
}

// OnListTypeLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnListTypeLeave(t Type) {
	for _, handler := range w.listTypeEventHandlers.leave {
		handler(t)
	}
}

// walkListType is a function that walks ListType type's AST node.
func (w *Walker) walkListType(t Type) {
	w.OnListTypeEnter(t)

	if t.ListType != nil {
		w.walkType(*t.ListType)
	}

	w.OnListTypeLeave(t)
}

// ListValueEventHandler function can handle enter/leave events for ListValue.
type ListValueEventHandler func(Value)

// ListValueEventHandlers stores the enter and leave events handlers.
type ListValueEventHandlers struct {
	enter []ListValueEventHandler
	leave []ListValueEventHandler
}

// AddListValueEnterEventHandler adds an event handler to be called when entering ListValue nodes.
func (w *Walker) AddListValueEnterEventHandler(h ListValueEventHandler) {
	w.listValueEventHandlers.enter = append(w.listValueEventHandlers.enter, h)
}

// AddListValueLeaveEventHandler adds an event handler to be called when leaving ListValue nodes.
func (w *Walker) AddListValueLeaveEventHandler(h ListValueEventHandler) {
	w.listValueEventHandlers.leave = append(w.listValueEventHandlers.leave, h)
}

// OnListValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnListValueEnter(v Value) {
	for _, handler := range w.listValueEventHandlers.enter {
		handler(v)
	}
}

// OnListValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnListValueLeave(v Value) {
	for _, handler := range w.listValueEventHandlers.leave {
		handler(v)
	}
}

// walkListValue is a function that walks ListValue type's AST node.
func (w *Walker) walkListValue(v Value) {
	w.OnListValueEnter(v)

	for i := range v.ObjectValue {
		w.walkObjectField(v.ObjectValue[i])
	}

	w.OnListValueLeave(v)
}

// MutationOperationDefinitionEventHandler function can handle enter/leave events for MutationOperationDefinition.
type MutationOperationDefinitionEventHandler func(*OperationDefinition)

// MutationOperationDefinitionEventHandlers stores the enter and leave events handlers.
type MutationOperationDefinitionEventHandlers struct {
	enter []MutationOperationDefinitionEventHandler
	leave []MutationOperationDefinitionEventHandler
}

// AddMutationOperationDefinitionEnterEventHandler adds an event handler to be called when entering MutationOperationDefinition nodes.
func (w *Walker) AddMutationOperationDefinitionEnterEventHandler(h MutationOperationDefinitionEventHandler) {
	w.mutationOperationDefinitionEventHandlers.enter = append(w.mutationOperationDefinitionEventHandlers.enter, h)
}

// AddMutationOperationDefinitionLeaveEventHandler adds an event handler to be called when leaving MutationOperationDefinition nodes.
func (w *Walker) AddMutationOperationDefinitionLeaveEventHandler(h MutationOperationDefinitionEventHandler) {
	w.mutationOperationDefinitionEventHandlers.leave = append(w.mutationOperationDefinitionEventHandlers.leave, h)
}

// OnMutationOperationDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnMutationOperationDefinitionEnter(od *OperationDefinition) {
	for _, handler := range w.mutationOperationDefinitionEventHandlers.enter {
		handler(od)
	}
}

// OnMutationOperationDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnMutationOperationDefinitionLeave(od *OperationDefinition) {
	for _, handler := range w.mutationOperationDefinitionEventHandlers.leave {
		handler(od)
	}
}

// walkMutationOperationDefinition is a function that walks MutationOperationDefinition type's AST node.
func (w *Walker) walkMutationOperationDefinition(od *OperationDefinition) {
	w.OnMutationOperationDefinitionEnter(od)

	if od.Directives != nil {
		w.walkDirectives(od.Directives)
	}

	if od.SelectionSet != nil {
		w.walkSelections(od.SelectionSet)
	}

	if od.VariableDefinitions != nil {
		w.walkVariableDefinitions(od.VariableDefinitions)
	}

	w.OnMutationOperationDefinitionLeave(od)
}

// NamedTypeEventHandler function can handle enter/leave events for NamedType.
type NamedTypeEventHandler func(Type)

// NamedTypeEventHandlers stores the enter and leave events handlers.
type NamedTypeEventHandlers struct {
	enter []NamedTypeEventHandler
	leave []NamedTypeEventHandler
}

// AddNamedTypeEnterEventHandler adds an event handler to be called when entering NamedType nodes.
func (w *Walker) AddNamedTypeEnterEventHandler(h NamedTypeEventHandler) {
	w.namedTypeEventHandlers.enter = append(w.namedTypeEventHandlers.enter, h)
}

// AddNamedTypeLeaveEventHandler adds an event handler to be called when leaving NamedType nodes.
func (w *Walker) AddNamedTypeLeaveEventHandler(h NamedTypeEventHandler) {
	w.namedTypeEventHandlers.leave = append(w.namedTypeEventHandlers.leave, h)
}

// OnNamedTypeEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnNamedTypeEnter(t Type) {
	for _, handler := range w.namedTypeEventHandlers.enter {
		handler(t)
	}
}

// OnNamedTypeLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnNamedTypeLeave(t Type) {
	for _, handler := range w.namedTypeEventHandlers.leave {
		handler(t)
	}
}

// walkNamedType is a function that walks NamedType type's AST node.
func (w *Walker) walkNamedType(t Type) {
	w.OnNamedTypeEnter(t)

	if t.ListType != nil {
		w.walkType(*t.ListType)
	}

	w.OnNamedTypeLeave(t)
}

// NullValueEventHandler function can handle enter/leave events for NullValue.
type NullValueEventHandler func(Value)

// NullValueEventHandlers stores the enter and leave events handlers.
type NullValueEventHandlers struct {
	enter []NullValueEventHandler
	leave []NullValueEventHandler
}

// AddNullValueEnterEventHandler adds an event handler to be called when entering NullValue nodes.
func (w *Walker) AddNullValueEnterEventHandler(h NullValueEventHandler) {
	w.nullValueEventHandlers.enter = append(w.nullValueEventHandlers.enter, h)
}

// AddNullValueLeaveEventHandler adds an event handler to be called when leaving NullValue nodes.
func (w *Walker) AddNullValueLeaveEventHandler(h NullValueEventHandler) {
	w.nullValueEventHandlers.leave = append(w.nullValueEventHandlers.leave, h)
}

// OnNullValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnNullValueEnter(v Value) {
	for _, handler := range w.nullValueEventHandlers.enter {
		handler(v)
	}
}

// OnNullValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnNullValueLeave(v Value) {
	for _, handler := range w.nullValueEventHandlers.leave {
		handler(v)
	}
}

// walkNullValue is a function that walks NullValue type's AST node.
func (w *Walker) walkNullValue(v Value) {
	w.OnNullValueEnter(v)

	w.OnNullValueLeave(v)
}

// ObjectFieldEventHandler function can handle enter/leave events for ObjectField.
type ObjectFieldEventHandler func(ObjectField)

// ObjectFieldEventHandlers stores the enter and leave events handlers.
type ObjectFieldEventHandlers struct {
	enter []ObjectFieldEventHandler
	leave []ObjectFieldEventHandler
}

// AddObjectFieldEnterEventHandler adds an event handler to be called when entering ObjectField nodes.
func (w *Walker) AddObjectFieldEnterEventHandler(h ObjectFieldEventHandler) {
	w.objectFieldEventHandlers.enter = append(w.objectFieldEventHandlers.enter, h)
}

// AddObjectFieldLeaveEventHandler adds an event handler to be called when leaving ObjectField nodes.
func (w *Walker) AddObjectFieldLeaveEventHandler(h ObjectFieldEventHandler) {
	w.objectFieldEventHandlers.leave = append(w.objectFieldEventHandlers.leave, h)
}

// OnObjectFieldEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnObjectFieldEnter(of ObjectField) {
	for _, handler := range w.objectFieldEventHandlers.enter {
		handler(of)
	}
}

// OnObjectFieldLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnObjectFieldLeave(of ObjectField) {
	for _, handler := range w.objectFieldEventHandlers.leave {
		handler(of)
	}
}

// walkObjectField is a function that walks ObjectField type's AST node.
func (w *Walker) walkObjectField(of ObjectField) {
	w.OnObjectFieldEnter(of)

	w.walkValue(of.Value)

	w.OnObjectFieldLeave(of)
}

// ObjectTypeDefinitionEventHandler function can handle enter/leave events for ObjectTypeDefinition.
type ObjectTypeDefinitionEventHandler func(*TypeDefinition)

// ObjectTypeDefinitionEventHandlers stores the enter and leave events handlers.
type ObjectTypeDefinitionEventHandlers struct {
	enter []ObjectTypeDefinitionEventHandler
	leave []ObjectTypeDefinitionEventHandler
}

// AddObjectTypeDefinitionEnterEventHandler adds an event handler to be called when entering ObjectTypeDefinition nodes.
func (w *Walker) AddObjectTypeDefinitionEnterEventHandler(h ObjectTypeDefinitionEventHandler) {
	w.objectTypeDefinitionEventHandlers.enter = append(w.objectTypeDefinitionEventHandlers.enter, h)
}

// AddObjectTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving ObjectTypeDefinition nodes.
func (w *Walker) AddObjectTypeDefinitionLeaveEventHandler(h ObjectTypeDefinitionEventHandler) {
	w.objectTypeDefinitionEventHandlers.leave = append(w.objectTypeDefinitionEventHandlers.leave, h)
}

// OnObjectTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnObjectTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.objectTypeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnObjectTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnObjectTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.objectTypeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// walkObjectTypeDefinition is a function that walks ObjectTypeDefinition type's AST node.
func (w *Walker) walkObjectTypeDefinition(td *TypeDefinition) {
	w.OnObjectTypeDefinitionEnter(td)

	if td.Directives != nil {
		w.walkDirectives(td.Directives)
	}

	if td.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(td.EnumValuesDefinition)
	}

	if td.FieldsDefinition != nil {
		w.walkFieldDefinitions(td.FieldsDefinition)
	}

	if td.ImplementsInterface != nil {
		w.walkTypes(td.ImplementsInterface)
	}

	if td.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(td.InputFieldsDefinition)
	}

	if td.UnionMemberTypes != nil {
		w.walkTypes(td.UnionMemberTypes)
	}

	w.OnObjectTypeDefinitionLeave(td)
}

// ObjectTypeExtensionEventHandler function can handle enter/leave events for ObjectTypeExtension.
type ObjectTypeExtensionEventHandler func(*TypeExtension)

// ObjectTypeExtensionEventHandlers stores the enter and leave events handlers.
type ObjectTypeExtensionEventHandlers struct {
	enter []ObjectTypeExtensionEventHandler
	leave []ObjectTypeExtensionEventHandler
}

// AddObjectTypeExtensionEnterEventHandler adds an event handler to be called when entering ObjectTypeExtension nodes.
func (w *Walker) AddObjectTypeExtensionEnterEventHandler(h ObjectTypeExtensionEventHandler) {
	w.objectTypeExtensionEventHandlers.enter = append(w.objectTypeExtensionEventHandlers.enter, h)
}

// AddObjectTypeExtensionLeaveEventHandler adds an event handler to be called when leaving ObjectTypeExtension nodes.
func (w *Walker) AddObjectTypeExtensionLeaveEventHandler(h ObjectTypeExtensionEventHandler) {
	w.objectTypeExtensionEventHandlers.leave = append(w.objectTypeExtensionEventHandlers.leave, h)
}

// OnObjectTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnObjectTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.objectTypeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnObjectTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnObjectTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.objectTypeExtensionEventHandlers.leave {
		handler(te)
	}
}

// walkObjectTypeExtension is a function that walks ObjectTypeExtension type's AST node.
func (w *Walker) walkObjectTypeExtension(te *TypeExtension) {
	w.OnObjectTypeExtensionEnter(te)

	if te.Directives != nil {
		w.walkDirectives(te.Directives)
	}

	if te.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(te.EnumValuesDefinition)
	}

	if te.FieldsDefinition != nil {
		w.walkFieldDefinitions(te.FieldsDefinition)
	}

	if te.ImplementsInterface != nil {
		w.walkTypes(te.ImplementsInterface)
	}

	if te.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(te.InputFieldsDefinition)
	}

	if te.UnionMemberTypes != nil {
		w.walkTypes(te.UnionMemberTypes)
	}

	w.OnObjectTypeExtensionLeave(te)
}

// ObjectValueEventHandler function can handle enter/leave events for ObjectValue.
type ObjectValueEventHandler func(Value)

// ObjectValueEventHandlers stores the enter and leave events handlers.
type ObjectValueEventHandlers struct {
	enter []ObjectValueEventHandler
	leave []ObjectValueEventHandler
}

// AddObjectValueEnterEventHandler adds an event handler to be called when entering ObjectValue nodes.
func (w *Walker) AddObjectValueEnterEventHandler(h ObjectValueEventHandler) {
	w.objectValueEventHandlers.enter = append(w.objectValueEventHandlers.enter, h)
}

// AddObjectValueLeaveEventHandler adds an event handler to be called when leaving ObjectValue nodes.
func (w *Walker) AddObjectValueLeaveEventHandler(h ObjectValueEventHandler) {
	w.objectValueEventHandlers.leave = append(w.objectValueEventHandlers.leave, h)
}

// OnObjectValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnObjectValueEnter(v Value) {
	for _, handler := range w.objectValueEventHandlers.enter {
		handler(v)
	}
}

// OnObjectValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnObjectValueLeave(v Value) {
	for _, handler := range w.objectValueEventHandlers.leave {
		handler(v)
	}
}

// walkObjectValue is a function that walks ObjectValue type's AST node.
func (w *Walker) walkObjectValue(v Value) {
	w.OnObjectValueEnter(v)

	for i := range v.ObjectValue {
		w.walkObjectField(v.ObjectValue[i])
	}

	w.OnObjectValueLeave(v)
}

// OperationDefinitionEventHandler function can handle enter/leave events for OperationDefinition.
type OperationDefinitionEventHandler func(*OperationDefinition)

// OperationDefinitionEventHandlers stores the enter and leave events handlers.
type OperationDefinitionEventHandlers struct {
	enter []OperationDefinitionEventHandler
	leave []OperationDefinitionEventHandler
}

// AddOperationDefinitionEnterEventHandler adds an event handler to be called when entering OperationDefinition nodes.
func (w *Walker) AddOperationDefinitionEnterEventHandler(h OperationDefinitionEventHandler) {
	w.operationDefinitionEventHandlers.enter = append(w.operationDefinitionEventHandlers.enter, h)
}

// AddOperationDefinitionLeaveEventHandler adds an event handler to be called when leaving OperationDefinition nodes.
func (w *Walker) AddOperationDefinitionLeaveEventHandler(h OperationDefinitionEventHandler) {
	w.operationDefinitionEventHandlers.leave = append(w.operationDefinitionEventHandlers.leave, h)
}

// OnOperationDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationDefinitionEnter(od *OperationDefinition) {
	for _, handler := range w.operationDefinitionEventHandlers.enter {
		handler(od)
	}
}

// OnOperationDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationDefinitionLeave(od *OperationDefinition) {
	for _, handler := range w.operationDefinitionEventHandlers.leave {
		handler(od)
	}
}

// walkOperationDefinition is a function that walks OperationDefinition type's AST node.
func (w *Walker) walkOperationDefinition(od *OperationDefinition) {
	w.OnOperationDefinitionEnter(od)

	switch od.Kind {
	case OperationDefinitionKindMutation:
		w.walkMutationOperationDefinition(od)
	case OperationDefinitionKindQuery:
		w.walkQueryOperationDefinition(od)
	case OperationDefinitionKindSubscription:
		w.walkSubscriptionOperationDefinition(od)
	}

	w.OnOperationDefinitionLeave(od)
}

// OperationTypeDefinitionEventHandler function can handle enter/leave events for OperationTypeDefinition.
type OperationTypeDefinitionEventHandler func(OperationTypeDefinition)

// OperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type OperationTypeDefinitionEventHandlers struct {
	enter []OperationTypeDefinitionEventHandler
	leave []OperationTypeDefinitionEventHandler
}

// AddOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering OperationTypeDefinition nodes.
func (w *Walker) AddOperationTypeDefinitionEnterEventHandler(h OperationTypeDefinitionEventHandler) {
	w.operationTypeDefinitionEventHandlers.enter = append(w.operationTypeDefinitionEventHandlers.enter, h)
}

// AddOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving OperationTypeDefinition nodes.
func (w *Walker) AddOperationTypeDefinitionLeaveEventHandler(h OperationTypeDefinitionEventHandler) {
	w.operationTypeDefinitionEventHandlers.leave = append(w.operationTypeDefinitionEventHandlers.leave, h)
}

// OnOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionEnter(otd OperationTypeDefinition) {
	for _, handler := range w.operationTypeDefinitionEventHandlers.enter {
		handler(otd)
	}
}

// OnOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionLeave(otd OperationTypeDefinition) {
	for _, handler := range w.operationTypeDefinitionEventHandlers.leave {
		handler(otd)
	}
}

// walkOperationTypeDefinition is a function that walks OperationTypeDefinition type's AST node.
func (w *Walker) walkOperationTypeDefinition(otd OperationTypeDefinition) {
	w.OnOperationTypeDefinitionEnter(otd)

	w.walkType(otd.NamedType)

	w.OnOperationTypeDefinitionLeave(otd)
}

// OperationTypeDefinitionsEventHandler function can handle enter/leave events for OperationTypeDefinitions.
type OperationTypeDefinitionsEventHandler func(*OperationTypeDefinitions)

// OperationTypeDefinitionsEventHandlers stores the enter and leave events handlers.
type OperationTypeDefinitionsEventHandlers struct {
	enter []OperationTypeDefinitionsEventHandler
	leave []OperationTypeDefinitionsEventHandler
}

// AddOperationTypeDefinitionsEnterEventHandler adds an event handler to be called when entering OperationTypeDefinitions nodes.
func (w *Walker) AddOperationTypeDefinitionsEnterEventHandler(h OperationTypeDefinitionsEventHandler) {
	w.operationTypeDefinitionsEventHandlers.enter = append(w.operationTypeDefinitionsEventHandlers.enter, h)
}

// AddOperationTypeDefinitionsLeaveEventHandler adds an event handler to be called when leaving OperationTypeDefinitions nodes.
func (w *Walker) AddOperationTypeDefinitionsLeaveEventHandler(h OperationTypeDefinitionsEventHandler) {
	w.operationTypeDefinitionsEventHandlers.leave = append(w.operationTypeDefinitionsEventHandlers.leave, h)
}

// OnOperationTypeDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionsEnter(otds *OperationTypeDefinitions) {
	for _, handler := range w.operationTypeDefinitionsEventHandlers.enter {
		handler(otds)
	}
}

// OnOperationTypeDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionsLeave(otds *OperationTypeDefinitions) {
	for _, handler := range w.operationTypeDefinitionsEventHandlers.leave {
		handler(otds)
	}
}

// walkOperationTypeDefinitions is a function that walks OperationTypeDefinitions type's AST node.
func (w *Walker) walkOperationTypeDefinitions(otds *OperationTypeDefinitions) {
	w.OnOperationTypeDefinitionsEnter(otds)

	otds.ForEach(func(otd OperationTypeDefinition, i int) {
		w.walkOperationTypeDefinition(otd)
	})

	w.OnOperationTypeDefinitionsLeave(otds)
}

// QueryOperationDefinitionEventHandler function can handle enter/leave events for QueryOperationDefinition.
type QueryOperationDefinitionEventHandler func(*OperationDefinition)

// QueryOperationDefinitionEventHandlers stores the enter and leave events handlers.
type QueryOperationDefinitionEventHandlers struct {
	enter []QueryOperationDefinitionEventHandler
	leave []QueryOperationDefinitionEventHandler
}

// AddQueryOperationDefinitionEnterEventHandler adds an event handler to be called when entering QueryOperationDefinition nodes.
func (w *Walker) AddQueryOperationDefinitionEnterEventHandler(h QueryOperationDefinitionEventHandler) {
	w.queryOperationDefinitionEventHandlers.enter = append(w.queryOperationDefinitionEventHandlers.enter, h)
}

// AddQueryOperationDefinitionLeaveEventHandler adds an event handler to be called when leaving QueryOperationDefinition nodes.
func (w *Walker) AddQueryOperationDefinitionLeaveEventHandler(h QueryOperationDefinitionEventHandler) {
	w.queryOperationDefinitionEventHandlers.leave = append(w.queryOperationDefinitionEventHandlers.leave, h)
}

// OnQueryOperationDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnQueryOperationDefinitionEnter(od *OperationDefinition) {
	for _, handler := range w.queryOperationDefinitionEventHandlers.enter {
		handler(od)
	}
}

// OnQueryOperationDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnQueryOperationDefinitionLeave(od *OperationDefinition) {
	for _, handler := range w.queryOperationDefinitionEventHandlers.leave {
		handler(od)
	}
}

// walkQueryOperationDefinition is a function that walks QueryOperationDefinition type's AST node.
func (w *Walker) walkQueryOperationDefinition(od *OperationDefinition) {
	w.OnQueryOperationDefinitionEnter(od)

	if od.Directives != nil {
		w.walkDirectives(od.Directives)
	}

	if od.SelectionSet != nil {
		w.walkSelections(od.SelectionSet)
	}

	if od.VariableDefinitions != nil {
		w.walkVariableDefinitions(od.VariableDefinitions)
	}

	w.OnQueryOperationDefinitionLeave(od)
}

// RootOperationTypeDefinitionEventHandler function can handle enter/leave events for RootOperationTypeDefinition.
type RootOperationTypeDefinitionEventHandler func(RootOperationTypeDefinition)

// RootOperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type RootOperationTypeDefinitionEventHandlers struct {
	enter []RootOperationTypeDefinitionEventHandler
	leave []RootOperationTypeDefinitionEventHandler
}

// AddRootOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering RootOperationTypeDefinition nodes.
func (w *Walker) AddRootOperationTypeDefinitionEnterEventHandler(h RootOperationTypeDefinitionEventHandler) {
	w.rootOperationTypeDefinitionEventHandlers.enter = append(w.rootOperationTypeDefinitionEventHandlers.enter, h)
}

// AddRootOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving RootOperationTypeDefinition nodes.
func (w *Walker) AddRootOperationTypeDefinitionLeaveEventHandler(h RootOperationTypeDefinitionEventHandler) {
	w.rootOperationTypeDefinitionEventHandlers.leave = append(w.rootOperationTypeDefinitionEventHandlers.leave, h)
}

// OnRootOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionEnter(rotd RootOperationTypeDefinition) {
	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.enter {
		handler(rotd)
	}
}

// OnRootOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionLeave(rotd RootOperationTypeDefinition) {
	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.leave {
		handler(rotd)
	}
}

// walkRootOperationTypeDefinition is a function that walks RootOperationTypeDefinition type's AST node.
func (w *Walker) walkRootOperationTypeDefinition(rotd RootOperationTypeDefinition) {
	w.OnRootOperationTypeDefinitionEnter(rotd)

	w.walkType(rotd.NamedType)

	w.OnRootOperationTypeDefinitionLeave(rotd)
}

// RootOperationTypeDefinitionsEventHandler function can handle enter/leave events for RootOperationTypeDefinitions.
type RootOperationTypeDefinitionsEventHandler func(*RootOperationTypeDefinitions)

// RootOperationTypeDefinitionsEventHandlers stores the enter and leave events handlers.
type RootOperationTypeDefinitionsEventHandlers struct {
	enter []RootOperationTypeDefinitionsEventHandler
	leave []RootOperationTypeDefinitionsEventHandler
}

// AddRootOperationTypeDefinitionsEnterEventHandler adds an event handler to be called when entering RootOperationTypeDefinitions nodes.
func (w *Walker) AddRootOperationTypeDefinitionsEnterEventHandler(h RootOperationTypeDefinitionsEventHandler) {
	w.rootOperationTypeDefinitionsEventHandlers.enter = append(w.rootOperationTypeDefinitionsEventHandlers.enter, h)
}

// AddRootOperationTypeDefinitionsLeaveEventHandler adds an event handler to be called when leaving RootOperationTypeDefinitions nodes.
func (w *Walker) AddRootOperationTypeDefinitionsLeaveEventHandler(h RootOperationTypeDefinitionsEventHandler) {
	w.rootOperationTypeDefinitionsEventHandlers.leave = append(w.rootOperationTypeDefinitionsEventHandlers.leave, h)
}

// OnRootOperationTypeDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionsEnter(rotds *RootOperationTypeDefinitions) {
	for _, handler := range w.rootOperationTypeDefinitionsEventHandlers.enter {
		handler(rotds)
	}
}

// OnRootOperationTypeDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionsLeave(rotds *RootOperationTypeDefinitions) {
	for _, handler := range w.rootOperationTypeDefinitionsEventHandlers.leave {
		handler(rotds)
	}
}

// walkRootOperationTypeDefinitions is a function that walks RootOperationTypeDefinitions type's AST node.
func (w *Walker) walkRootOperationTypeDefinitions(rotds *RootOperationTypeDefinitions) {
	w.OnRootOperationTypeDefinitionsEnter(rotds)

	rotds.ForEach(func(rotd RootOperationTypeDefinition, i int) {
		w.walkRootOperationTypeDefinition(rotd)
	})

	w.OnRootOperationTypeDefinitionsLeave(rotds)
}

// ScalarTypeDefinitionEventHandler function can handle enter/leave events for ScalarTypeDefinition.
type ScalarTypeDefinitionEventHandler func(*TypeDefinition)

// ScalarTypeDefinitionEventHandlers stores the enter and leave events handlers.
type ScalarTypeDefinitionEventHandlers struct {
	enter []ScalarTypeDefinitionEventHandler
	leave []ScalarTypeDefinitionEventHandler
}

// AddScalarTypeDefinitionEnterEventHandler adds an event handler to be called when entering ScalarTypeDefinition nodes.
func (w *Walker) AddScalarTypeDefinitionEnterEventHandler(h ScalarTypeDefinitionEventHandler) {
	w.scalarTypeDefinitionEventHandlers.enter = append(w.scalarTypeDefinitionEventHandlers.enter, h)
}

// AddScalarTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving ScalarTypeDefinition nodes.
func (w *Walker) AddScalarTypeDefinitionLeaveEventHandler(h ScalarTypeDefinitionEventHandler) {
	w.scalarTypeDefinitionEventHandlers.leave = append(w.scalarTypeDefinitionEventHandlers.leave, h)
}

// OnScalarTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnScalarTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.scalarTypeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnScalarTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnScalarTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.scalarTypeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// walkScalarTypeDefinition is a function that walks ScalarTypeDefinition type's AST node.
func (w *Walker) walkScalarTypeDefinition(td *TypeDefinition) {
	w.OnScalarTypeDefinitionEnter(td)

	if td.Directives != nil {
		w.walkDirectives(td.Directives)
	}

	if td.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(td.EnumValuesDefinition)
	}

	if td.FieldsDefinition != nil {
		w.walkFieldDefinitions(td.FieldsDefinition)
	}

	if td.ImplementsInterface != nil {
		w.walkTypes(td.ImplementsInterface)
	}

	if td.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(td.InputFieldsDefinition)
	}

	if td.UnionMemberTypes != nil {
		w.walkTypes(td.UnionMemberTypes)
	}

	w.OnScalarTypeDefinitionLeave(td)
}

// ScalarTypeExtensionEventHandler function can handle enter/leave events for ScalarTypeExtension.
type ScalarTypeExtensionEventHandler func(*TypeExtension)

// ScalarTypeExtensionEventHandlers stores the enter and leave events handlers.
type ScalarTypeExtensionEventHandlers struct {
	enter []ScalarTypeExtensionEventHandler
	leave []ScalarTypeExtensionEventHandler
}

// AddScalarTypeExtensionEnterEventHandler adds an event handler to be called when entering ScalarTypeExtension nodes.
func (w *Walker) AddScalarTypeExtensionEnterEventHandler(h ScalarTypeExtensionEventHandler) {
	w.scalarTypeExtensionEventHandlers.enter = append(w.scalarTypeExtensionEventHandlers.enter, h)
}

// AddScalarTypeExtensionLeaveEventHandler adds an event handler to be called when leaving ScalarTypeExtension nodes.
func (w *Walker) AddScalarTypeExtensionLeaveEventHandler(h ScalarTypeExtensionEventHandler) {
	w.scalarTypeExtensionEventHandlers.leave = append(w.scalarTypeExtensionEventHandlers.leave, h)
}

// OnScalarTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnScalarTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.scalarTypeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnScalarTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnScalarTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.scalarTypeExtensionEventHandlers.leave {
		handler(te)
	}
}

// walkScalarTypeExtension is a function that walks ScalarTypeExtension type's AST node.
func (w *Walker) walkScalarTypeExtension(te *TypeExtension) {
	w.OnScalarTypeExtensionEnter(te)

	if te.Directives != nil {
		w.walkDirectives(te.Directives)
	}

	if te.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(te.EnumValuesDefinition)
	}

	if te.FieldsDefinition != nil {
		w.walkFieldDefinitions(te.FieldsDefinition)
	}

	if te.ImplementsInterface != nil {
		w.walkTypes(te.ImplementsInterface)
	}

	if te.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(te.InputFieldsDefinition)
	}

	if te.UnionMemberTypes != nil {
		w.walkTypes(te.UnionMemberTypes)
	}

	w.OnScalarTypeExtensionLeave(te)
}

// SchemaDefinitionEventHandler function can handle enter/leave events for SchemaDefinition.
type SchemaDefinitionEventHandler func(*SchemaDefinition)

// SchemaDefinitionEventHandlers stores the enter and leave events handlers.
type SchemaDefinitionEventHandlers struct {
	enter []SchemaDefinitionEventHandler
	leave []SchemaDefinitionEventHandler
}

// AddSchemaDefinitionEnterEventHandler adds an event handler to be called when entering SchemaDefinition nodes.
func (w *Walker) AddSchemaDefinitionEnterEventHandler(h SchemaDefinitionEventHandler) {
	w.schemaDefinitionEventHandlers.enter = append(w.schemaDefinitionEventHandlers.enter, h)
}

// AddSchemaDefinitionLeaveEventHandler adds an event handler to be called when leaving SchemaDefinition nodes.
func (w *Walker) AddSchemaDefinitionLeaveEventHandler(h SchemaDefinitionEventHandler) {
	w.schemaDefinitionEventHandlers.leave = append(w.schemaDefinitionEventHandlers.leave, h)
}

// OnSchemaDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSchemaDefinitionEnter(sd *SchemaDefinition) {
	for _, handler := range w.schemaDefinitionEventHandlers.enter {
		handler(sd)
	}
}

// OnSchemaDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSchemaDefinitionLeave(sd *SchemaDefinition) {
	for _, handler := range w.schemaDefinitionEventHandlers.leave {
		handler(sd)
	}
}

// walkSchemaDefinition is a function that walks SchemaDefinition type's AST node.
func (w *Walker) walkSchemaDefinition(sd *SchemaDefinition) {
	w.OnSchemaDefinitionEnter(sd)

	if sd.Directives != nil {
		w.walkDirectives(sd.Directives)
	}

	if sd.RootOperationTypeDefinitions != nil {
		w.walkRootOperationTypeDefinitions(sd.RootOperationTypeDefinitions)
	}

	w.OnSchemaDefinitionLeave(sd)
}

// SchemaExtensionEventHandler function can handle enter/leave events for SchemaExtension.
type SchemaExtensionEventHandler func(*SchemaExtension)

// SchemaExtensionEventHandlers stores the enter and leave events handlers.
type SchemaExtensionEventHandlers struct {
	enter []SchemaExtensionEventHandler
	leave []SchemaExtensionEventHandler
}

// AddSchemaExtensionEnterEventHandler adds an event handler to be called when entering SchemaExtension nodes.
func (w *Walker) AddSchemaExtensionEnterEventHandler(h SchemaExtensionEventHandler) {
	w.schemaExtensionEventHandlers.enter = append(w.schemaExtensionEventHandlers.enter, h)
}

// AddSchemaExtensionLeaveEventHandler adds an event handler to be called when leaving SchemaExtension nodes.
func (w *Walker) AddSchemaExtensionLeaveEventHandler(h SchemaExtensionEventHandler) {
	w.schemaExtensionEventHandlers.leave = append(w.schemaExtensionEventHandlers.leave, h)
}

// OnSchemaExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSchemaExtensionEnter(se *SchemaExtension) {
	for _, handler := range w.schemaExtensionEventHandlers.enter {
		handler(se)
	}
}

// OnSchemaExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSchemaExtensionLeave(se *SchemaExtension) {
	for _, handler := range w.schemaExtensionEventHandlers.leave {
		handler(se)
	}
}

// walkSchemaExtension is a function that walks SchemaExtension type's AST node.
func (w *Walker) walkSchemaExtension(se *SchemaExtension) {
	w.OnSchemaExtensionEnter(se)

	if se.Directives != nil {
		w.walkDirectives(se.Directives)
	}

	if se.OperationTypeDefinitions != nil {
		w.walkOperationTypeDefinitions(se.OperationTypeDefinitions)
	}

	w.OnSchemaExtensionLeave(se)
}

// SelectionEventHandler function can handle enter/leave events for Selection.
type SelectionEventHandler func(Selection)

// SelectionEventHandlers stores the enter and leave events handlers.
type SelectionEventHandlers struct {
	enter []SelectionEventHandler
	leave []SelectionEventHandler
}

// AddSelectionEnterEventHandler adds an event handler to be called when entering Selection nodes.
func (w *Walker) AddSelectionEnterEventHandler(h SelectionEventHandler) {
	w.selectionEventHandlers.enter = append(w.selectionEventHandlers.enter, h)
}

// AddSelectionLeaveEventHandler adds an event handler to be called when leaving Selection nodes.
func (w *Walker) AddSelectionLeaveEventHandler(h SelectionEventHandler) {
	w.selectionEventHandlers.leave = append(w.selectionEventHandlers.leave, h)
}

// OnSelectionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSelectionEnter(s Selection) {
	for _, handler := range w.selectionEventHandlers.enter {
		handler(s)
	}
}

// OnSelectionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSelectionLeave(s Selection) {
	for _, handler := range w.selectionEventHandlers.leave {
		handler(s)
	}
}

// walkSelection is a function that walks Selection type's AST node.
func (w *Walker) walkSelection(s Selection) {
	w.OnSelectionEnter(s)

	switch s.Kind {
	case SelectionKindField:
		w.walkFieldSelection(s)
	case SelectionKindFragmentSpread:
		w.walkFragmentSpreadSelection(s)
	case SelectionKindInlineFragment:
		w.walkInlineFragmentSelection(s)
	}

	w.OnSelectionLeave(s)
}

// SelectionsEventHandler function can handle enter/leave events for Selections.
type SelectionsEventHandler func(*Selections)

// SelectionsEventHandlers stores the enter and leave events handlers.
type SelectionsEventHandlers struct {
	enter []SelectionsEventHandler
	leave []SelectionsEventHandler
}

// AddSelectionsEnterEventHandler adds an event handler to be called when entering Selections nodes.
func (w *Walker) AddSelectionsEnterEventHandler(h SelectionsEventHandler) {
	w.selectionsEventHandlers.enter = append(w.selectionsEventHandlers.enter, h)
}

// AddSelectionsLeaveEventHandler adds an event handler to be called when leaving Selections nodes.
func (w *Walker) AddSelectionsLeaveEventHandler(h SelectionsEventHandler) {
	w.selectionsEventHandlers.leave = append(w.selectionsEventHandlers.leave, h)
}

// OnSelectionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSelectionsEnter(ss *Selections) {
	for _, handler := range w.selectionsEventHandlers.enter {
		handler(ss)
	}
}

// OnSelectionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSelectionsLeave(ss *Selections) {
	for _, handler := range w.selectionsEventHandlers.leave {
		handler(ss)
	}
}

// walkSelections is a function that walks Selections type's AST node.
func (w *Walker) walkSelections(ss *Selections) {
	w.OnSelectionsEnter(ss)

	ss.ForEach(func(s Selection, i int) {
		w.walkSelection(s)
	})

	w.OnSelectionsLeave(ss)
}

// StringValueEventHandler function can handle enter/leave events for StringValue.
type StringValueEventHandler func(Value)

// StringValueEventHandlers stores the enter and leave events handlers.
type StringValueEventHandlers struct {
	enter []StringValueEventHandler
	leave []StringValueEventHandler
}

// AddStringValueEnterEventHandler adds an event handler to be called when entering StringValue nodes.
func (w *Walker) AddStringValueEnterEventHandler(h StringValueEventHandler) {
	w.stringValueEventHandlers.enter = append(w.stringValueEventHandlers.enter, h)
}

// AddStringValueLeaveEventHandler adds an event handler to be called when leaving StringValue nodes.
func (w *Walker) AddStringValueLeaveEventHandler(h StringValueEventHandler) {
	w.stringValueEventHandlers.leave = append(w.stringValueEventHandlers.leave, h)
}

// OnStringValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnStringValueEnter(v Value) {
	for _, handler := range w.stringValueEventHandlers.enter {
		handler(v)
	}
}

// OnStringValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnStringValueLeave(v Value) {
	for _, handler := range w.stringValueEventHandlers.leave {
		handler(v)
	}
}

// walkStringValue is a function that walks StringValue type's AST node.
func (w *Walker) walkStringValue(v Value) {
	w.OnStringValueEnter(v)

	w.OnStringValueLeave(v)
}

// SubscriptionOperationDefinitionEventHandler function can handle enter/leave events for SubscriptionOperationDefinition.
type SubscriptionOperationDefinitionEventHandler func(*OperationDefinition)

// SubscriptionOperationDefinitionEventHandlers stores the enter and leave events handlers.
type SubscriptionOperationDefinitionEventHandlers struct {
	enter []SubscriptionOperationDefinitionEventHandler
	leave []SubscriptionOperationDefinitionEventHandler
}

// AddSubscriptionOperationDefinitionEnterEventHandler adds an event handler to be called when entering SubscriptionOperationDefinition nodes.
func (w *Walker) AddSubscriptionOperationDefinitionEnterEventHandler(h SubscriptionOperationDefinitionEventHandler) {
	w.subscriptionOperationDefinitionEventHandlers.enter = append(w.subscriptionOperationDefinitionEventHandlers.enter, h)
}

// AddSubscriptionOperationDefinitionLeaveEventHandler adds an event handler to be called when leaving SubscriptionOperationDefinition nodes.
func (w *Walker) AddSubscriptionOperationDefinitionLeaveEventHandler(h SubscriptionOperationDefinitionEventHandler) {
	w.subscriptionOperationDefinitionEventHandlers.leave = append(w.subscriptionOperationDefinitionEventHandlers.leave, h)
}

// OnSubscriptionOperationDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSubscriptionOperationDefinitionEnter(od *OperationDefinition) {
	for _, handler := range w.subscriptionOperationDefinitionEventHandlers.enter {
		handler(od)
	}
}

// OnSubscriptionOperationDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSubscriptionOperationDefinitionLeave(od *OperationDefinition) {
	for _, handler := range w.subscriptionOperationDefinitionEventHandlers.leave {
		handler(od)
	}
}

// walkSubscriptionOperationDefinition is a function that walks SubscriptionOperationDefinition type's AST node.
func (w *Walker) walkSubscriptionOperationDefinition(od *OperationDefinition) {
	w.OnSubscriptionOperationDefinitionEnter(od)

	if od.Directives != nil {
		w.walkDirectives(od.Directives)
	}

	if od.SelectionSet != nil {
		w.walkSelections(od.SelectionSet)
	}

	if od.VariableDefinitions != nil {
		w.walkVariableDefinitions(od.VariableDefinitions)
	}

	w.OnSubscriptionOperationDefinitionLeave(od)
}

// TypeEventHandler function can handle enter/leave events for Type.
type TypeEventHandler func(Type)

// TypeEventHandlers stores the enter and leave events handlers.
type TypeEventHandlers struct {
	enter []TypeEventHandler
	leave []TypeEventHandler
}

// AddTypeEnterEventHandler adds an event handler to be called when entering Type nodes.
func (w *Walker) AddTypeEnterEventHandler(h TypeEventHandler) {
	w.typeEventHandlers.enter = append(w.typeEventHandlers.enter, h)
}

// AddTypeLeaveEventHandler adds an event handler to be called when leaving Type nodes.
func (w *Walker) AddTypeLeaveEventHandler(h TypeEventHandler) {
	w.typeEventHandlers.leave = append(w.typeEventHandlers.leave, h)
}

// OnTypeEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeEnter(t Type) {
	for _, handler := range w.typeEventHandlers.enter {
		handler(t)
	}
}

// OnTypeLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeLeave(t Type) {
	for _, handler := range w.typeEventHandlers.leave {
		handler(t)
	}
}

// walkType is a function that walks Type type's AST node.
func (w *Walker) walkType(t Type) {
	w.OnTypeEnter(t)

	switch t.Kind {
	case TypeKindList:
		w.walkListType(t)
	case TypeKindNamed:
		w.walkNamedType(t)
	}

	w.OnTypeLeave(t)
}

// TypeConditionEventHandler function can handle enter/leave events for TypeCondition.
type TypeConditionEventHandler func(*TypeCondition)

// TypeConditionEventHandlers stores the enter and leave events handlers.
type TypeConditionEventHandlers struct {
	enter []TypeConditionEventHandler
	leave []TypeConditionEventHandler
}

// AddTypeConditionEnterEventHandler adds an event handler to be called when entering TypeCondition nodes.
func (w *Walker) AddTypeConditionEnterEventHandler(h TypeConditionEventHandler) {
	w.typeConditionEventHandlers.enter = append(w.typeConditionEventHandlers.enter, h)
}

// AddTypeConditionLeaveEventHandler adds an event handler to be called when leaving TypeCondition nodes.
func (w *Walker) AddTypeConditionLeaveEventHandler(h TypeConditionEventHandler) {
	w.typeConditionEventHandlers.leave = append(w.typeConditionEventHandlers.leave, h)
}

// OnTypeConditionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeConditionEnter(tc *TypeCondition) {
	for _, handler := range w.typeConditionEventHandlers.enter {
		handler(tc)
	}
}

// OnTypeConditionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeConditionLeave(tc *TypeCondition) {
	for _, handler := range w.typeConditionEventHandlers.leave {
		handler(tc)
	}
}

// walkTypeCondition is a function that walks TypeCondition type's AST node.
func (w *Walker) walkTypeCondition(tc *TypeCondition) {
	w.OnTypeConditionEnter(tc)

	w.walkType(tc.NamedType)

	w.OnTypeConditionLeave(tc)
}

// TypeDefinitionEventHandler function can handle enter/leave events for TypeDefinition.
type TypeDefinitionEventHandler func(*TypeDefinition)

// TypeDefinitionEventHandlers stores the enter and leave events handlers.
type TypeDefinitionEventHandlers struct {
	enter []TypeDefinitionEventHandler
	leave []TypeDefinitionEventHandler
}

// AddTypeDefinitionEnterEventHandler adds an event handler to be called when entering TypeDefinition nodes.
func (w *Walker) AddTypeDefinitionEnterEventHandler(h TypeDefinitionEventHandler) {
	w.typeDefinitionEventHandlers.enter = append(w.typeDefinitionEventHandlers.enter, h)
}

// AddTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving TypeDefinition nodes.
func (w *Walker) AddTypeDefinitionLeaveEventHandler(h TypeDefinitionEventHandler) {
	w.typeDefinitionEventHandlers.leave = append(w.typeDefinitionEventHandlers.leave, h)
}

// OnTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.typeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.typeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// walkTypeDefinition is a function that walks TypeDefinition type's AST node.
func (w *Walker) walkTypeDefinition(td *TypeDefinition) {
	w.OnTypeDefinitionEnter(td)

	switch td.Kind {
	case TypeDefinitionKindEnum:
		w.walkEnumTypeDefinition(td)
	case TypeDefinitionKindInputObject:
		w.walkInputObjectTypeDefinition(td)
	case TypeDefinitionKindInterface:
		w.walkInterfaceTypeDefinition(td)
	case TypeDefinitionKindObject:
		w.walkObjectTypeDefinition(td)
	case TypeDefinitionKindScalar:
		w.walkScalarTypeDefinition(td)
	case TypeDefinitionKindUnion:
		w.walkUnionTypeDefinition(td)
	}

	w.OnTypeDefinitionLeave(td)
}

// TypeExtensionEventHandler function can handle enter/leave events for TypeExtension.
type TypeExtensionEventHandler func(*TypeExtension)

// TypeExtensionEventHandlers stores the enter and leave events handlers.
type TypeExtensionEventHandlers struct {
	enter []TypeExtensionEventHandler
	leave []TypeExtensionEventHandler
}

// AddTypeExtensionEnterEventHandler adds an event handler to be called when entering TypeExtension nodes.
func (w *Walker) AddTypeExtensionEnterEventHandler(h TypeExtensionEventHandler) {
	w.typeExtensionEventHandlers.enter = append(w.typeExtensionEventHandlers.enter, h)
}

// AddTypeExtensionLeaveEventHandler adds an event handler to be called when leaving TypeExtension nodes.
func (w *Walker) AddTypeExtensionLeaveEventHandler(h TypeExtensionEventHandler) {
	w.typeExtensionEventHandlers.leave = append(w.typeExtensionEventHandlers.leave, h)
}

// OnTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.typeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.typeExtensionEventHandlers.leave {
		handler(te)
	}
}

// walkTypeExtension is a function that walks TypeExtension type's AST node.
func (w *Walker) walkTypeExtension(te *TypeExtension) {
	w.OnTypeExtensionEnter(te)

	switch te.Kind {
	case TypeExtensionKindEnum:
		w.walkEnumTypeExtension(te)
	case TypeExtensionKindInputObject:
		w.walkInputObjectTypeExtension(te)
	case TypeExtensionKindInterface:
		w.walkInterfaceTypeExtension(te)
	case TypeExtensionKindObject:
		w.walkObjectTypeExtension(te)
	case TypeExtensionKindScalar:
		w.walkScalarTypeExtension(te)
	case TypeExtensionKindUnion:
		w.walkUnionTypeExtension(te)
	}

	w.OnTypeExtensionLeave(te)
}

// TypeSystemDefinitionEventHandler function can handle enter/leave events for TypeSystemDefinition.
type TypeSystemDefinitionEventHandler func(*TypeSystemDefinition)

// TypeSystemDefinitionEventHandlers stores the enter and leave events handlers.
type TypeSystemDefinitionEventHandlers struct {
	enter []TypeSystemDefinitionEventHandler
	leave []TypeSystemDefinitionEventHandler
}

// AddTypeSystemDefinitionEnterEventHandler adds an event handler to be called when entering TypeSystemDefinition nodes.
func (w *Walker) AddTypeSystemDefinitionEnterEventHandler(h TypeSystemDefinitionEventHandler) {
	w.typeSystemDefinitionEventHandlers.enter = append(w.typeSystemDefinitionEventHandlers.enter, h)
}

// AddTypeSystemDefinitionLeaveEventHandler adds an event handler to be called when leaving TypeSystemDefinition nodes.
func (w *Walker) AddTypeSystemDefinitionLeaveEventHandler(h TypeSystemDefinitionEventHandler) {
	w.typeSystemDefinitionEventHandlers.leave = append(w.typeSystemDefinitionEventHandlers.leave, h)
}

// OnTypeSystemDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeSystemDefinitionEnter(tsd *TypeSystemDefinition) {
	for _, handler := range w.typeSystemDefinitionEventHandlers.enter {
		handler(tsd)
	}
}

// OnTypeSystemDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeSystemDefinitionLeave(tsd *TypeSystemDefinition) {
	for _, handler := range w.typeSystemDefinitionEventHandlers.leave {
		handler(tsd)
	}
}

// walkTypeSystemDefinition is a function that walks TypeSystemDefinition type's AST node.
func (w *Walker) walkTypeSystemDefinition(tsd *TypeSystemDefinition) {
	w.OnTypeSystemDefinitionEnter(tsd)

	switch tsd.Kind {
	case TypeSystemDefinitionKindDirective:
		w.walkDirectiveDefinition(tsd.DirectiveDefinition)
	case TypeSystemDefinitionKindSchema:
		w.walkSchemaDefinition(tsd.SchemaDefinition)
	case TypeSystemDefinitionKindType:
		w.walkTypeDefinition(tsd.TypeDefinition)
	}

	w.OnTypeSystemDefinitionLeave(tsd)
}

// TypeSystemExtensionEventHandler function can handle enter/leave events for TypeSystemExtension.
type TypeSystemExtensionEventHandler func(*TypeSystemExtension)

// TypeSystemExtensionEventHandlers stores the enter and leave events handlers.
type TypeSystemExtensionEventHandlers struct {
	enter []TypeSystemExtensionEventHandler
	leave []TypeSystemExtensionEventHandler
}

// AddTypeSystemExtensionEnterEventHandler adds an event handler to be called when entering TypeSystemExtension nodes.
func (w *Walker) AddTypeSystemExtensionEnterEventHandler(h TypeSystemExtensionEventHandler) {
	w.typeSystemExtensionEventHandlers.enter = append(w.typeSystemExtensionEventHandlers.enter, h)
}

// AddTypeSystemExtensionLeaveEventHandler adds an event handler to be called when leaving TypeSystemExtension nodes.
func (w *Walker) AddTypeSystemExtensionLeaveEventHandler(h TypeSystemExtensionEventHandler) {
	w.typeSystemExtensionEventHandlers.leave = append(w.typeSystemExtensionEventHandlers.leave, h)
}

// OnTypeSystemExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeSystemExtensionEnter(tse *TypeSystemExtension) {
	for _, handler := range w.typeSystemExtensionEventHandlers.enter {
		handler(tse)
	}
}

// OnTypeSystemExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeSystemExtensionLeave(tse *TypeSystemExtension) {
	for _, handler := range w.typeSystemExtensionEventHandlers.leave {
		handler(tse)
	}
}

// walkTypeSystemExtension is a function that walks TypeSystemExtension type's AST node.
func (w *Walker) walkTypeSystemExtension(tse *TypeSystemExtension) {
	w.OnTypeSystemExtensionEnter(tse)

	switch tse.Kind {
	case TypeSystemExtensionKindSchema:
		w.walkSchemaExtension(tse.SchemaExtension)
	case TypeSystemExtensionKindType:
		w.walkTypeExtension(tse.TypeExtension)
	}

	w.OnTypeSystemExtensionLeave(tse)
}

// TypesEventHandler function can handle enter/leave events for Types.
type TypesEventHandler func(*Types)

// TypesEventHandlers stores the enter and leave events handlers.
type TypesEventHandlers struct {
	enter []TypesEventHandler
	leave []TypesEventHandler
}

// AddTypesEnterEventHandler adds an event handler to be called when entering Types nodes.
func (w *Walker) AddTypesEnterEventHandler(h TypesEventHandler) {
	w.typesEventHandlers.enter = append(w.typesEventHandlers.enter, h)
}

// AddTypesLeaveEventHandler adds an event handler to be called when leaving Types nodes.
func (w *Walker) AddTypesLeaveEventHandler(h TypesEventHandler) {
	w.typesEventHandlers.leave = append(w.typesEventHandlers.leave, h)
}

// OnTypesEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypesEnter(ts *Types) {
	for _, handler := range w.typesEventHandlers.enter {
		handler(ts)
	}
}

// OnTypesLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypesLeave(ts *Types) {
	for _, handler := range w.typesEventHandlers.leave {
		handler(ts)
	}
}

// walkTypes is a function that walks Types type's AST node.
func (w *Walker) walkTypes(ts *Types) {
	w.OnTypesEnter(ts)

	ts.ForEach(func(t Type, i int) {
		w.walkType(t)
	})

	w.OnTypesLeave(ts)
}

// UnionTypeDefinitionEventHandler function can handle enter/leave events for UnionTypeDefinition.
type UnionTypeDefinitionEventHandler func(*TypeDefinition)

// UnionTypeDefinitionEventHandlers stores the enter and leave events handlers.
type UnionTypeDefinitionEventHandlers struct {
	enter []UnionTypeDefinitionEventHandler
	leave []UnionTypeDefinitionEventHandler
}

// AddUnionTypeDefinitionEnterEventHandler adds an event handler to be called when entering UnionTypeDefinition nodes.
func (w *Walker) AddUnionTypeDefinitionEnterEventHandler(h UnionTypeDefinitionEventHandler) {
	w.unionTypeDefinitionEventHandlers.enter = append(w.unionTypeDefinitionEventHandlers.enter, h)
}

// AddUnionTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving UnionTypeDefinition nodes.
func (w *Walker) AddUnionTypeDefinitionLeaveEventHandler(h UnionTypeDefinitionEventHandler) {
	w.unionTypeDefinitionEventHandlers.leave = append(w.unionTypeDefinitionEventHandlers.leave, h)
}

// OnUnionTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnUnionTypeDefinitionEnter(td *TypeDefinition) {
	for _, handler := range w.unionTypeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnUnionTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnUnionTypeDefinitionLeave(td *TypeDefinition) {
	for _, handler := range w.unionTypeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// walkUnionTypeDefinition is a function that walks UnionTypeDefinition type's AST node.
func (w *Walker) walkUnionTypeDefinition(td *TypeDefinition) {
	w.OnUnionTypeDefinitionEnter(td)

	if td.Directives != nil {
		w.walkDirectives(td.Directives)
	}

	if td.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(td.EnumValuesDefinition)
	}

	if td.FieldsDefinition != nil {
		w.walkFieldDefinitions(td.FieldsDefinition)
	}

	if td.ImplementsInterface != nil {
		w.walkTypes(td.ImplementsInterface)
	}

	if td.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(td.InputFieldsDefinition)
	}

	if td.UnionMemberTypes != nil {
		w.walkTypes(td.UnionMemberTypes)
	}

	w.OnUnionTypeDefinitionLeave(td)
}

// UnionTypeExtensionEventHandler function can handle enter/leave events for UnionTypeExtension.
type UnionTypeExtensionEventHandler func(*TypeExtension)

// UnionTypeExtensionEventHandlers stores the enter and leave events handlers.
type UnionTypeExtensionEventHandlers struct {
	enter []UnionTypeExtensionEventHandler
	leave []UnionTypeExtensionEventHandler
}

// AddUnionTypeExtensionEnterEventHandler adds an event handler to be called when entering UnionTypeExtension nodes.
func (w *Walker) AddUnionTypeExtensionEnterEventHandler(h UnionTypeExtensionEventHandler) {
	w.unionTypeExtensionEventHandlers.enter = append(w.unionTypeExtensionEventHandlers.enter, h)
}

// AddUnionTypeExtensionLeaveEventHandler adds an event handler to be called when leaving UnionTypeExtension nodes.
func (w *Walker) AddUnionTypeExtensionLeaveEventHandler(h UnionTypeExtensionEventHandler) {
	w.unionTypeExtensionEventHandlers.leave = append(w.unionTypeExtensionEventHandlers.leave, h)
}

// OnUnionTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnUnionTypeExtensionEnter(te *TypeExtension) {
	for _, handler := range w.unionTypeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnUnionTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnUnionTypeExtensionLeave(te *TypeExtension) {
	for _, handler := range w.unionTypeExtensionEventHandlers.leave {
		handler(te)
	}
}

// walkUnionTypeExtension is a function that walks UnionTypeExtension type's AST node.
func (w *Walker) walkUnionTypeExtension(te *TypeExtension) {
	w.OnUnionTypeExtensionEnter(te)

	if te.Directives != nil {
		w.walkDirectives(te.Directives)
	}

	if te.EnumValuesDefinition != nil {
		w.walkEnumValueDefinitions(te.EnumValuesDefinition)
	}

	if te.FieldsDefinition != nil {
		w.walkFieldDefinitions(te.FieldsDefinition)
	}

	if te.ImplementsInterface != nil {
		w.walkTypes(te.ImplementsInterface)
	}

	if te.InputFieldsDefinition != nil {
		w.walkInputValueDefinitions(te.InputFieldsDefinition)
	}

	if te.UnionMemberTypes != nil {
		w.walkTypes(te.UnionMemberTypes)
	}

	w.OnUnionTypeExtensionLeave(te)
}

// ValueEventHandler function can handle enter/leave events for Value.
type ValueEventHandler func(Value)

// ValueEventHandlers stores the enter and leave events handlers.
type ValueEventHandlers struct {
	enter []ValueEventHandler
	leave []ValueEventHandler
}

// AddValueEnterEventHandler adds an event handler to be called when entering Value nodes.
func (w *Walker) AddValueEnterEventHandler(h ValueEventHandler) {
	w.valueEventHandlers.enter = append(w.valueEventHandlers.enter, h)
}

// AddValueLeaveEventHandler adds an event handler to be called when leaving Value nodes.
func (w *Walker) AddValueLeaveEventHandler(h ValueEventHandler) {
	w.valueEventHandlers.leave = append(w.valueEventHandlers.leave, h)
}

// OnValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnValueEnter(v Value) {
	for _, handler := range w.valueEventHandlers.enter {
		handler(v)
	}
}

// OnValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnValueLeave(v Value) {
	for _, handler := range w.valueEventHandlers.leave {
		handler(v)
	}
}

// walkValue is a function that walks Value type's AST node.
func (w *Walker) walkValue(v Value) {
	w.OnValueEnter(v)

	switch v.Kind {
	case ValueKindBoolean:
		w.walkBooleanValue(v)
	case ValueKindEnum:
		w.walkEnumValue(v)
	case ValueKindFloat:
		w.walkFloatValue(v)
	case ValueKindInt:
		w.walkIntValue(v)
	case ValueKindList:
		w.walkListValue(v)
	case ValueKindNull:
		w.walkNullValue(v)
	case ValueKindObject:
		w.walkObjectValue(v)
	case ValueKindString:
		w.walkStringValue(v)
	case ValueKindVariable:
		w.walkVariableValue(v)
	}

	w.OnValueLeave(v)
}

// VariableDefinitionEventHandler function can handle enter/leave events for VariableDefinition.
type VariableDefinitionEventHandler func(VariableDefinition)

// VariableDefinitionEventHandlers stores the enter and leave events handlers.
type VariableDefinitionEventHandlers struct {
	enter []VariableDefinitionEventHandler
	leave []VariableDefinitionEventHandler
}

// AddVariableDefinitionEnterEventHandler adds an event handler to be called when entering VariableDefinition nodes.
func (w *Walker) AddVariableDefinitionEnterEventHandler(h VariableDefinitionEventHandler) {
	w.variableDefinitionEventHandlers.enter = append(w.variableDefinitionEventHandlers.enter, h)
}

// AddVariableDefinitionLeaveEventHandler adds an event handler to be called when leaving VariableDefinition nodes.
func (w *Walker) AddVariableDefinitionLeaveEventHandler(h VariableDefinitionEventHandler) {
	w.variableDefinitionEventHandlers.leave = append(w.variableDefinitionEventHandlers.leave, h)
}

// OnVariableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionEnter(vd VariableDefinition) {
	for _, handler := range w.variableDefinitionEventHandlers.enter {
		handler(vd)
	}
}

// OnVariableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionLeave(vd VariableDefinition) {
	for _, handler := range w.variableDefinitionEventHandlers.leave {
		handler(vd)
	}
}

// walkVariableDefinition is a function that walks VariableDefinition type's AST node.
func (w *Walker) walkVariableDefinition(vd VariableDefinition) {
	w.OnVariableDefinitionEnter(vd)

	if vd.DefaultValue != nil {
		w.walkValue(*vd.DefaultValue)
	}

	w.walkType(vd.Type)

	w.OnVariableDefinitionLeave(vd)
}

// VariableDefinitionsEventHandler function can handle enter/leave events for VariableDefinitions.
type VariableDefinitionsEventHandler func(*VariableDefinitions)

// VariableDefinitionsEventHandlers stores the enter and leave events handlers.
type VariableDefinitionsEventHandlers struct {
	enter []VariableDefinitionsEventHandler
	leave []VariableDefinitionsEventHandler
}

// AddVariableDefinitionsEnterEventHandler adds an event handler to be called when entering VariableDefinitions nodes.
func (w *Walker) AddVariableDefinitionsEnterEventHandler(h VariableDefinitionsEventHandler) {
	w.variableDefinitionsEventHandlers.enter = append(w.variableDefinitionsEventHandlers.enter, h)
}

// AddVariableDefinitionsLeaveEventHandler adds an event handler to be called when leaving VariableDefinitions nodes.
func (w *Walker) AddVariableDefinitionsLeaveEventHandler(h VariableDefinitionsEventHandler) {
	w.variableDefinitionsEventHandlers.leave = append(w.variableDefinitionsEventHandlers.leave, h)
}

// OnVariableDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionsEnter(vds *VariableDefinitions) {
	for _, handler := range w.variableDefinitionsEventHandlers.enter {
		handler(vds)
	}
}

// OnVariableDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionsLeave(vds *VariableDefinitions) {
	for _, handler := range w.variableDefinitionsEventHandlers.leave {
		handler(vds)
	}
}

// walkVariableDefinitions is a function that walks VariableDefinitions type's AST node.
func (w *Walker) walkVariableDefinitions(vds *VariableDefinitions) {
	w.OnVariableDefinitionsEnter(vds)

	vds.ForEach(func(vd VariableDefinition, i int) {
		w.walkVariableDefinition(vd)
	})

	w.OnVariableDefinitionsLeave(vds)
}

// VariableValueEventHandler function can handle enter/leave events for VariableValue.
type VariableValueEventHandler func(Value)

// VariableValueEventHandlers stores the enter and leave events handlers.
type VariableValueEventHandlers struct {
	enter []VariableValueEventHandler
	leave []VariableValueEventHandler
}

// AddVariableValueEnterEventHandler adds an event handler to be called when entering VariableValue nodes.
func (w *Walker) AddVariableValueEnterEventHandler(h VariableValueEventHandler) {
	w.variableValueEventHandlers.enter = append(w.variableValueEventHandlers.enter, h)
}

// AddVariableValueLeaveEventHandler adds an event handler to be called when leaving VariableValue nodes.
func (w *Walker) AddVariableValueLeaveEventHandler(h VariableValueEventHandler) {
	w.variableValueEventHandlers.leave = append(w.variableValueEventHandlers.leave, h)
}

// OnVariableValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnVariableValueEnter(v Value) {
	for _, handler := range w.variableValueEventHandlers.enter {
		handler(v)
	}
}

// OnVariableValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnVariableValueLeave(v Value) {
	for _, handler := range w.variableValueEventHandlers.leave {
		handler(v)
	}
}

// walkVariableValue is a function that walks VariableValue type's AST node.
func (w *Walker) walkVariableValue(v Value) {
	w.OnVariableValueEnter(v)

	w.OnVariableValueLeave(v)
}
