// Code generated by lab/walkergen
// DO NOT EDIT!
package ast

// Strider holds event handlers for entering and leaving AST nodes.
type Strider struct {
	argumentEventHandlers                    *ArgumentEventHandlers
	argumentsEventHandlers                   *ArgumentsEventHandlers
	argumentsDefinitionEventHandlers         *ArgumentsDefinitionEventHandlers
	definitionEventHandlers                  *DefinitionEventHandlers
	definitionsEventHandlers                 *DefinitionsEventHandlers
	descriptionEventHandlers                 *DescriptionEventHandlers
	directiveEventHandlers                   *DirectiveEventHandlers
	directiveDefinitionEventHandlers         *DirectiveDefinitionEventHandlers
	directiveLocationsEventHandlers          *DirectiveLocationsEventHandlers
	directivesEventHandlers                  *DirectivesEventHandlers
	documentEventHandlers                    *DocumentEventHandlers
	enumTypeExtensionEventHandlers           *EnumTypeExtensionEventHandlers
	enumValueDefinitionEventHandlers         *EnumValueDefinitionEventHandlers
	enumValuesDefinitionEventHandlers        *EnumValuesDefinitionEventHandlers
	executableDefinitionEventHandlers        *ExecutableDefinitionEventHandlers
	fieldDefinitionEventHandlers             *FieldDefinitionEventHandlers
	fieldSelectionEventHandlers              *FieldSelectionEventHandlers
	fieldsDefinitionEventHandlers            *FieldsDefinitionEventHandlers
	fragmentDefinitionEventHandlers          *FragmentDefinitionEventHandlers
	fragmentSpreadEventHandlers              *FragmentSpreadEventHandlers
	implementsInterfacesEventHandlers        *ImplementsInterfacesEventHandlers
	inlineFragmentEventHandlers              *InlineFragmentEventHandlers
	inputFieldsDefinitionEventHandlers       *InputFieldsDefinitionEventHandlers
	inputObjectTypeExtensionEventHandlers    *InputObjectTypeExtensionEventHandlers
	inputValueDefinitionEventHandlers        *InputValueDefinitionEventHandlers
	interfaceTypeExtensionEventHandlers      *InterfaceTypeExtensionEventHandlers
	objectTypeExtensionEventHandlers         *ObjectTypeExtensionEventHandlers
	operationDefinitionEventHandlers         *OperationDefinitionEventHandlers
	operationTypeDefinitionEventHandlers     *OperationTypeDefinitionEventHandlers
	rootOperationTypeDefinitionEventHandlers *RootOperationTypeDefinitionEventHandlers
	scalarTypeExtensionEventHandlers         *ScalarTypeExtensionEventHandlers
	schemaDefinitionEventHandlers            *SchemaDefinitionEventHandlers
	schemaExtensionEventHandlers             *SchemaExtensionEventHandlers
	selectionEventHandlers                   *SelectionEventHandlers
	selectionsEventHandlers                  *SelectionsEventHandlers
	typeEventHandlers                        *TypeEventHandlers
	typeDefinitionEventHandlers              *TypeDefinitionEventHandlers
	typeDefinitionEnumEventHandlers          *TypeDefinitionEnumEventHandlers
	typeDefinitionInputObjectEventHandlers   *TypeDefinitionInputObjectEventHandlers
	typeDefinitionInterfaceEventHandlers     *TypeDefinitionInterfaceEventHandlers
	typeDefinitionObjectEventHandlers        *TypeDefinitionObjectEventHandlers
	typeDefinitionScalarEventHandlers        *TypeDefinitionScalarEventHandlers
	typeDefinitionUnionEventHandlers         *TypeDefinitionUnionEventHandlers
	typeExtensionEventHandlers               *TypeExtensionEventHandlers
	typeSystemDefinitionEventHandlers        *TypeSystemDefinitionEventHandlers
	typeSystemExtensionEventHandlers         *TypeSystemExtensionEventHandlers
	unionMemberTypesEventHandlers            *UnionMemberTypesEventHandlers
	unionTypeExtensionEventHandlers          *UnionTypeExtensionEventHandlers
	valueEventHandlers                       *ValueEventHandlers
	variableDefinitionEventHandlers          *VariableDefinitionEventHandlers
	variableDefinitionsEventHandlers         *VariableDefinitionsEventHandlers
}

// NewStrider returns a *Strider.
func NewStrider() *Strider {
	return &Strider{}
}

// ArgumentEventHandler function can handle enter/leave events for Argument.
type ArgumentEventHandler func(Argument)

// ArgumentEventHandlers stores the enter and leave events handlers.
type ArgumentEventHandlers struct {
	enter []ArgumentEventHandler
	leave []ArgumentEventHandler
}

// AddArgumentEnterEventHandler adds an event handler to be called when entering a Argument node.
func (w *Strider) AddArgumentEnterEventHandler(handler ArgumentEventHandler) {
	if w.argumentEventHandlers == nil {
		w.argumentEventHandlers = &ArgumentEventHandlers{}
	}
	w.argumentEventHandlers.enter = append(w.argumentEventHandlers.enter, handler)
}

// AddArgumentLeaveEventHandler adds an event handler to be called when leaving a Argument node.
func (w *Strider) AddArgumentLeaveEventHandler(handler ArgumentEventHandler) {
	if w.argumentEventHandlers == nil {
		w.argumentEventHandlers = &ArgumentEventHandlers{}
	}
	w.argumentEventHandlers.leave = append(w.argumentEventHandlers.leave, handler)
}

// OnArgumentEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnArgumentEnter(a Argument) {
	if w.argumentEventHandlers == nil {
		return
	}

	for _, handler := range w.argumentEventHandlers.enter {
		handler(a)
	}
}

// OnArgumentLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnArgumentLeave(a Argument) {
	if w.argumentEventHandlers == nil {
		return
	}

	for _, handler := range w.argumentEventHandlers.leave {
		handler(a)
	}
}

// ArgumentsEventHandler function can handle enter/leave events for Arguments.
type ArgumentsEventHandler func(*Arguments)

// ArgumentsEventHandlers stores the enter and leave events handlers.
type ArgumentsEventHandlers struct {
	enter []ArgumentsEventHandler
	leave []ArgumentsEventHandler
}

// AddArgumentsEnterEventHandler adds an event handler to be called when entering a Arguments node.
func (w *Strider) AddArgumentsEnterEventHandler(handler ArgumentsEventHandler) {
	if w.argumentsEventHandlers == nil {
		w.argumentsEventHandlers = &ArgumentsEventHandlers{}
	}
	w.argumentsEventHandlers.enter = append(w.argumentsEventHandlers.enter, handler)
}

// AddArgumentsLeaveEventHandler adds an event handler to be called when leaving a Arguments node.
func (w *Strider) AddArgumentsLeaveEventHandler(handler ArgumentsEventHandler) {
	if w.argumentsEventHandlers == nil {
		w.argumentsEventHandlers = &ArgumentsEventHandlers{}
	}
	w.argumentsEventHandlers.leave = append(w.argumentsEventHandlers.leave, handler)
}

// OnArgumentsEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnArgumentsEnter(a *Arguments) {
	if w.argumentsEventHandlers == nil {
		return
	}

	for _, handler := range w.argumentsEventHandlers.enter {
		handler(a)
	}
}

// OnArgumentsLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnArgumentsLeave(a *Arguments) {
	if w.argumentsEventHandlers == nil {
		return
	}

	for _, handler := range w.argumentsEventHandlers.leave {
		handler(a)
	}
}

// ArgumentsDefinitionEventHandler function can handle enter/leave events for ArgumentsDefinition.
type ArgumentsDefinitionEventHandler func(*InputValueDefinitions)

// ArgumentsDefinitionEventHandlers stores the enter and leave events handlers.
type ArgumentsDefinitionEventHandlers struct {
	enter []ArgumentsDefinitionEventHandler
	leave []ArgumentsDefinitionEventHandler
}

// AddArgumentsDefinitionEnterEventHandler adds an event handler to be called when entering a ArgumentsDefinition node.
func (w *Strider) AddArgumentsDefinitionEnterEventHandler(handler ArgumentsDefinitionEventHandler) {
	if w.argumentsDefinitionEventHandlers == nil {
		w.argumentsDefinitionEventHandlers = &ArgumentsDefinitionEventHandlers{}
	}
	w.argumentsDefinitionEventHandlers.enter = append(w.argumentsDefinitionEventHandlers.enter, handler)
}

// AddArgumentsDefinitionLeaveEventHandler adds an event handler to be called when leaving a ArgumentsDefinition node.
func (w *Strider) AddArgumentsDefinitionLeaveEventHandler(handler ArgumentsDefinitionEventHandler) {
	if w.argumentsDefinitionEventHandlers == nil {
		w.argumentsDefinitionEventHandlers = &ArgumentsDefinitionEventHandlers{}
	}
	w.argumentsDefinitionEventHandlers.leave = append(w.argumentsDefinitionEventHandlers.leave, handler)
}

// OnArgumentsDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnArgumentsDefinitionEnter(ad *InputValueDefinitions) {
	if w.argumentsDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.argumentsDefinitionEventHandlers.enter {
		handler(ad)
	}
}

// OnArgumentsDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnArgumentsDefinitionLeave(ad *InputValueDefinitions) {
	if w.argumentsDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.argumentsDefinitionEventHandlers.leave {
		handler(ad)
	}
}

// DefinitionEventHandler function can handle enter/leave events for Definition.
type DefinitionEventHandler func(Definition)

// DefinitionEventHandlers stores the enter and leave events handlers.
type DefinitionEventHandlers struct {
	enter []DefinitionEventHandler
	leave []DefinitionEventHandler
}

// AddDefinitionEnterEventHandler adds an event handler to be called when entering a Definition node.
func (w *Strider) AddDefinitionEnterEventHandler(handler DefinitionEventHandler) {
	if w.definitionEventHandlers == nil {
		w.definitionEventHandlers = &DefinitionEventHandlers{}
	}
	w.definitionEventHandlers.enter = append(w.definitionEventHandlers.enter, handler)
}

// AddDefinitionLeaveEventHandler adds an event handler to be called when leaving a Definition node.
func (w *Strider) AddDefinitionLeaveEventHandler(handler DefinitionEventHandler) {
	if w.definitionEventHandlers == nil {
		w.definitionEventHandlers = &DefinitionEventHandlers{}
	}
	w.definitionEventHandlers.leave = append(w.definitionEventHandlers.leave, handler)
}

// OnDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDefinitionEnter(d Definition) {
	if w.definitionEventHandlers == nil {
		return
	}

	for _, handler := range w.definitionEventHandlers.enter {
		handler(d)
	}
}

// OnDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDefinitionLeave(d Definition) {
	if w.definitionEventHandlers == nil {
		return
	}

	for _, handler := range w.definitionEventHandlers.leave {
		handler(d)
	}
}

// DefinitionsEventHandler function can handle enter/leave events for Definitions.
type DefinitionsEventHandler func(*Definitions)

// DefinitionsEventHandlers stores the enter and leave events handlers.
type DefinitionsEventHandlers struct {
	enter []DefinitionsEventHandler
	leave []DefinitionsEventHandler
}

// AddDefinitionsEnterEventHandler adds an event handler to be called when entering a Definitions node.
func (w *Strider) AddDefinitionsEnterEventHandler(handler DefinitionsEventHandler) {
	if w.definitionsEventHandlers == nil {
		w.definitionsEventHandlers = &DefinitionsEventHandlers{}
	}
	w.definitionsEventHandlers.enter = append(w.definitionsEventHandlers.enter, handler)
}

// AddDefinitionsLeaveEventHandler adds an event handler to be called when leaving a Definitions node.
func (w *Strider) AddDefinitionsLeaveEventHandler(handler DefinitionsEventHandler) {
	if w.definitionsEventHandlers == nil {
		w.definitionsEventHandlers = &DefinitionsEventHandlers{}
	}
	w.definitionsEventHandlers.leave = append(w.definitionsEventHandlers.leave, handler)
}

// OnDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDefinitionsEnter(d *Definitions) {
	if w.definitionsEventHandlers == nil {
		return
	}

	for _, handler := range w.definitionsEventHandlers.enter {
		handler(d)
	}
}

// OnDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDefinitionsLeave(d *Definitions) {
	if w.definitionsEventHandlers == nil {
		return
	}

	for _, handler := range w.definitionsEventHandlers.leave {
		handler(d)
	}
}

// DescriptionEventHandler function can handle enter/leave events for Description.
type DescriptionEventHandler func(string)

// DescriptionEventHandlers stores the enter and leave events handlers.
type DescriptionEventHandlers struct {
	enter []DescriptionEventHandler
	leave []DescriptionEventHandler
}

// AddDescriptionEnterEventHandler adds an event handler to be called when entering a Description node.
func (w *Strider) AddDescriptionEnterEventHandler(handler DescriptionEventHandler) {
	if w.descriptionEventHandlers == nil {
		w.descriptionEventHandlers = &DescriptionEventHandlers{}
	}
	w.descriptionEventHandlers.enter = append(w.descriptionEventHandlers.enter, handler)
}

// AddDescriptionLeaveEventHandler adds an event handler to be called when leaving a Description node.
func (w *Strider) AddDescriptionLeaveEventHandler(handler DescriptionEventHandler) {
	if w.descriptionEventHandlers == nil {
		w.descriptionEventHandlers = &DescriptionEventHandlers{}
	}
	w.descriptionEventHandlers.leave = append(w.descriptionEventHandlers.leave, handler)
}

// OnDescriptionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDescriptionEnter(d string) {
	if w.descriptionEventHandlers == nil {
		return
	}

	for _, handler := range w.descriptionEventHandlers.enter {
		handler(d)
	}
}

// OnDescriptionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDescriptionLeave(d string) {
	if w.descriptionEventHandlers == nil {
		return
	}

	for _, handler := range w.descriptionEventHandlers.leave {
		handler(d)
	}
}

// DirectiveEventHandler function can handle enter/leave events for Directive.
type DirectiveEventHandler func(Directive)

// DirectiveEventHandlers stores the enter and leave events handlers.
type DirectiveEventHandlers struct {
	enter []DirectiveEventHandler
	leave []DirectiveEventHandler
}

// AddDirectiveEnterEventHandler adds an event handler to be called when entering a Directive node.
func (w *Strider) AddDirectiveEnterEventHandler(handler DirectiveEventHandler) {
	if w.directiveEventHandlers == nil {
		w.directiveEventHandlers = &DirectiveEventHandlers{}
	}
	w.directiveEventHandlers.enter = append(w.directiveEventHandlers.enter, handler)
}

// AddDirectiveLeaveEventHandler adds an event handler to be called when leaving a Directive node.
func (w *Strider) AddDirectiveLeaveEventHandler(handler DirectiveEventHandler) {
	if w.directiveEventHandlers == nil {
		w.directiveEventHandlers = &DirectiveEventHandlers{}
	}
	w.directiveEventHandlers.leave = append(w.directiveEventHandlers.leave, handler)
}

// OnDirectiveEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDirectiveEnter(d Directive) {
	if w.directiveEventHandlers == nil {
		return
	}

	for _, handler := range w.directiveEventHandlers.enter {
		handler(d)
	}
}

// OnDirectiveLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDirectiveLeave(d Directive) {
	if w.directiveEventHandlers == nil {
		return
	}

	for _, handler := range w.directiveEventHandlers.leave {
		handler(d)
	}
}

// DirectiveDefinitionEventHandler function can handle enter/leave events for DirectiveDefinition.
type DirectiveDefinitionEventHandler func(*DirectiveDefinition)

// DirectiveDefinitionEventHandlers stores the enter and leave events handlers.
type DirectiveDefinitionEventHandlers struct {
	enter []DirectiveDefinitionEventHandler
	leave []DirectiveDefinitionEventHandler
}

// AddDirectiveDefinitionEnterEventHandler adds an event handler to be called when entering a DirectiveDefinition node.
func (w *Strider) AddDirectiveDefinitionEnterEventHandler(handler DirectiveDefinitionEventHandler) {
	if w.directiveDefinitionEventHandlers == nil {
		w.directiveDefinitionEventHandlers = &DirectiveDefinitionEventHandlers{}
	}
	w.directiveDefinitionEventHandlers.enter = append(w.directiveDefinitionEventHandlers.enter, handler)
}

// AddDirectiveDefinitionLeaveEventHandler adds an event handler to be called when leaving a DirectiveDefinition node.
func (w *Strider) AddDirectiveDefinitionLeaveEventHandler(handler DirectiveDefinitionEventHandler) {
	if w.directiveDefinitionEventHandlers == nil {
		w.directiveDefinitionEventHandlers = &DirectiveDefinitionEventHandlers{}
	}
	w.directiveDefinitionEventHandlers.leave = append(w.directiveDefinitionEventHandlers.leave, handler)
}

// OnDirectiveDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDirectiveDefinitionEnter(dd *DirectiveDefinition) {
	if w.directiveDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.directiveDefinitionEventHandlers.enter {
		handler(dd)
	}
}

// OnDirectiveDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDirectiveDefinitionLeave(dd *DirectiveDefinition) {
	if w.directiveDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.directiveDefinitionEventHandlers.leave {
		handler(dd)
	}
}

// DirectiveLocationsEventHandler function can handle enter/leave events for DirectiveLocations.
type DirectiveLocationsEventHandler func(*DirectiveLocations)

// DirectiveLocationsEventHandlers stores the enter and leave events handlers.
type DirectiveLocationsEventHandlers struct {
	enter []DirectiveLocationsEventHandler
	leave []DirectiveLocationsEventHandler
}

// AddDirectiveLocationsEnterEventHandler adds an event handler to be called when entering a DirectiveLocations node.
func (w *Strider) AddDirectiveLocationsEnterEventHandler(handler DirectiveLocationsEventHandler) {
	if w.directiveLocationsEventHandlers == nil {
		w.directiveLocationsEventHandlers = &DirectiveLocationsEventHandlers{}
	}
	w.directiveLocationsEventHandlers.enter = append(w.directiveLocationsEventHandlers.enter, handler)
}

// AddDirectiveLocationsLeaveEventHandler adds an event handler to be called when leaving a DirectiveLocations node.
func (w *Strider) AddDirectiveLocationsLeaveEventHandler(handler DirectiveLocationsEventHandler) {
	if w.directiveLocationsEventHandlers == nil {
		w.directiveLocationsEventHandlers = &DirectiveLocationsEventHandlers{}
	}
	w.directiveLocationsEventHandlers.leave = append(w.directiveLocationsEventHandlers.leave, handler)
}

// OnDirectiveLocationsEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDirectiveLocationsEnter(dl *DirectiveLocations) {
	if w.directiveLocationsEventHandlers == nil {
		return
	}

	for _, handler := range w.directiveLocationsEventHandlers.enter {
		handler(dl)
	}
}

// OnDirectiveLocationsLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDirectiveLocationsLeave(dl *DirectiveLocations) {
	if w.directiveLocationsEventHandlers == nil {
		return
	}

	for _, handler := range w.directiveLocationsEventHandlers.leave {
		handler(dl)
	}
}

// DirectivesEventHandler function can handle enter/leave events for Directives.
type DirectivesEventHandler func(*Directives)

// DirectivesEventHandlers stores the enter and leave events handlers.
type DirectivesEventHandlers struct {
	enter []DirectivesEventHandler
	leave []DirectivesEventHandler
}

// AddDirectivesEnterEventHandler adds an event handler to be called when entering a Directives node.
func (w *Strider) AddDirectivesEnterEventHandler(handler DirectivesEventHandler) {
	if w.directivesEventHandlers == nil {
		w.directivesEventHandlers = &DirectivesEventHandlers{}
	}
	w.directivesEventHandlers.enter = append(w.directivesEventHandlers.enter, handler)
}

// AddDirectivesLeaveEventHandler adds an event handler to be called when leaving a Directives node.
func (w *Strider) AddDirectivesLeaveEventHandler(handler DirectivesEventHandler) {
	if w.directivesEventHandlers == nil {
		w.directivesEventHandlers = &DirectivesEventHandlers{}
	}
	w.directivesEventHandlers.leave = append(w.directivesEventHandlers.leave, handler)
}

// OnDirectivesEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDirectivesEnter(d *Directives) {
	if w.directivesEventHandlers == nil {
		return
	}

	for _, handler := range w.directivesEventHandlers.enter {
		handler(d)
	}
}

// OnDirectivesLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDirectivesLeave(d *Directives) {
	if w.directivesEventHandlers == nil {
		return
	}

	for _, handler := range w.directivesEventHandlers.leave {
		handler(d)
	}
}

// DocumentEventHandler function can handle enter/leave events for Document.
type DocumentEventHandler func(Document)

// DocumentEventHandlers stores the enter and leave events handlers.
type DocumentEventHandlers struct {
	enter []DocumentEventHandler
	leave []DocumentEventHandler
}

// AddDocumentEnterEventHandler adds an event handler to be called when entering a Document node.
func (w *Strider) AddDocumentEnterEventHandler(handler DocumentEventHandler) {
	if w.documentEventHandlers == nil {
		w.documentEventHandlers = &DocumentEventHandlers{}
	}
	w.documentEventHandlers.enter = append(w.documentEventHandlers.enter, handler)
}

// AddDocumentLeaveEventHandler adds an event handler to be called when leaving a Document node.
func (w *Strider) AddDocumentLeaveEventHandler(handler DocumentEventHandler) {
	if w.documentEventHandlers == nil {
		w.documentEventHandlers = &DocumentEventHandlers{}
	}
	w.documentEventHandlers.leave = append(w.documentEventHandlers.leave, handler)
}

// OnDocumentEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnDocumentEnter(d Document) {
	if w.documentEventHandlers == nil {
		return
	}

	for _, handler := range w.documentEventHandlers.enter {
		handler(d)
	}
}

// OnDocumentLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnDocumentLeave(d Document) {
	if w.documentEventHandlers == nil {
		return
	}

	for _, handler := range w.documentEventHandlers.leave {
		handler(d)
	}
}

// EnumTypeExtensionEventHandler function can handle enter/leave events for EnumTypeExtension.
type EnumTypeExtensionEventHandler func(*TypeExtension)

// EnumTypeExtensionEventHandlers stores the enter and leave events handlers.
type EnumTypeExtensionEventHandlers struct {
	enter []EnumTypeExtensionEventHandler
	leave []EnumTypeExtensionEventHandler
}

// AddEnumTypeExtensionEnterEventHandler adds an event handler to be called when entering a EnumTypeExtension node.
func (w *Strider) AddEnumTypeExtensionEnterEventHandler(handler EnumTypeExtensionEventHandler) {
	if w.enumTypeExtensionEventHandlers == nil {
		w.enumTypeExtensionEventHandlers = &EnumTypeExtensionEventHandlers{}
	}
	w.enumTypeExtensionEventHandlers.enter = append(w.enumTypeExtensionEventHandlers.enter, handler)
}

// AddEnumTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a EnumTypeExtension node.
func (w *Strider) AddEnumTypeExtensionLeaveEventHandler(handler EnumTypeExtensionEventHandler) {
	if w.enumTypeExtensionEventHandlers == nil {
		w.enumTypeExtensionEventHandlers = &EnumTypeExtensionEventHandlers{}
	}
	w.enumTypeExtensionEventHandlers.leave = append(w.enumTypeExtensionEventHandlers.leave, handler)
}

// OnEnumTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnEnumTypeExtensionEnter(ete *TypeExtension) {
	if w.enumTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.enumTypeExtensionEventHandlers.enter {
		handler(ete)
	}
}

// OnEnumTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnEnumTypeExtensionLeave(ete *TypeExtension) {
	if w.enumTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.enumTypeExtensionEventHandlers.leave {
		handler(ete)
	}
}

// EnumValueDefinitionEventHandler function can handle enter/leave events for EnumValueDefinition.
type EnumValueDefinitionEventHandler func(EnumValueDefinition)

// EnumValueDefinitionEventHandlers stores the enter and leave events handlers.
type EnumValueDefinitionEventHandlers struct {
	enter []EnumValueDefinitionEventHandler
	leave []EnumValueDefinitionEventHandler
}

// AddEnumValueDefinitionEnterEventHandler adds an event handler to be called when entering a EnumValueDefinition node.
func (w *Strider) AddEnumValueDefinitionEnterEventHandler(handler EnumValueDefinitionEventHandler) {
	if w.enumValueDefinitionEventHandlers == nil {
		w.enumValueDefinitionEventHandlers = &EnumValueDefinitionEventHandlers{}
	}
	w.enumValueDefinitionEventHandlers.enter = append(w.enumValueDefinitionEventHandlers.enter, handler)
}

// AddEnumValueDefinitionLeaveEventHandler adds an event handler to be called when leaving a EnumValueDefinition node.
func (w *Strider) AddEnumValueDefinitionLeaveEventHandler(handler EnumValueDefinitionEventHandler) {
	if w.enumValueDefinitionEventHandlers == nil {
		w.enumValueDefinitionEventHandlers = &EnumValueDefinitionEventHandlers{}
	}
	w.enumValueDefinitionEventHandlers.leave = append(w.enumValueDefinitionEventHandlers.leave, handler)
}

// OnEnumValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnEnumValueDefinitionEnter(evd EnumValueDefinition) {
	if w.enumValueDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.enumValueDefinitionEventHandlers.enter {
		handler(evd)
	}
}

// OnEnumValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnEnumValueDefinitionLeave(evd EnumValueDefinition) {
	if w.enumValueDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.enumValueDefinitionEventHandlers.leave {
		handler(evd)
	}
}

// EnumValuesDefinitionEventHandler function can handle enter/leave events for EnumValuesDefinition.
type EnumValuesDefinitionEventHandler func(*EnumValueDefinitions)

// EnumValuesDefinitionEventHandlers stores the enter and leave events handlers.
type EnumValuesDefinitionEventHandlers struct {
	enter []EnumValuesDefinitionEventHandler
	leave []EnumValuesDefinitionEventHandler
}

// AddEnumValuesDefinitionEnterEventHandler adds an event handler to be called when entering a EnumValuesDefinition node.
func (w *Strider) AddEnumValuesDefinitionEnterEventHandler(handler EnumValuesDefinitionEventHandler) {
	if w.enumValuesDefinitionEventHandlers == nil {
		w.enumValuesDefinitionEventHandlers = &EnumValuesDefinitionEventHandlers{}
	}
	w.enumValuesDefinitionEventHandlers.enter = append(w.enumValuesDefinitionEventHandlers.enter, handler)
}

// AddEnumValuesDefinitionLeaveEventHandler adds an event handler to be called when leaving a EnumValuesDefinition node.
func (w *Strider) AddEnumValuesDefinitionLeaveEventHandler(handler EnumValuesDefinitionEventHandler) {
	if w.enumValuesDefinitionEventHandlers == nil {
		w.enumValuesDefinitionEventHandlers = &EnumValuesDefinitionEventHandlers{}
	}
	w.enumValuesDefinitionEventHandlers.leave = append(w.enumValuesDefinitionEventHandlers.leave, handler)
}

// OnEnumValuesDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnEnumValuesDefinitionEnter(evd *EnumValueDefinitions) {
	if w.enumValuesDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.enumValuesDefinitionEventHandlers.enter {
		handler(evd)
	}
}

// OnEnumValuesDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnEnumValuesDefinitionLeave(evd *EnumValueDefinitions) {
	if w.enumValuesDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.enumValuesDefinitionEventHandlers.leave {
		handler(evd)
	}
}

// ExecutableDefinitionEventHandler function can handle enter/leave events for ExecutableDefinition.
type ExecutableDefinitionEventHandler func(*ExecutableDefinition)

// ExecutableDefinitionEventHandlers stores the enter and leave events handlers.
type ExecutableDefinitionEventHandlers struct {
	enter []ExecutableDefinitionEventHandler
	leave []ExecutableDefinitionEventHandler
}

// AddExecutableDefinitionEnterEventHandler adds an event handler to be called when entering a ExecutableDefinition node.
func (w *Strider) AddExecutableDefinitionEnterEventHandler(handler ExecutableDefinitionEventHandler) {
	if w.executableDefinitionEventHandlers == nil {
		w.executableDefinitionEventHandlers = &ExecutableDefinitionEventHandlers{}
	}
	w.executableDefinitionEventHandlers.enter = append(w.executableDefinitionEventHandlers.enter, handler)
}

// AddExecutableDefinitionLeaveEventHandler adds an event handler to be called when leaving a ExecutableDefinition node.
func (w *Strider) AddExecutableDefinitionLeaveEventHandler(handler ExecutableDefinitionEventHandler) {
	if w.executableDefinitionEventHandlers == nil {
		w.executableDefinitionEventHandlers = &ExecutableDefinitionEventHandlers{}
	}
	w.executableDefinitionEventHandlers.leave = append(w.executableDefinitionEventHandlers.leave, handler)
}

// OnExecutableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnExecutableDefinitionEnter(ed *ExecutableDefinition) {
	if w.executableDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.executableDefinitionEventHandlers.enter {
		handler(ed)
	}
}

// OnExecutableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnExecutableDefinitionLeave(ed *ExecutableDefinition) {
	if w.executableDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.executableDefinitionEventHandlers.leave {
		handler(ed)
	}
}

// FieldDefinitionEventHandler function can handle enter/leave events for FieldDefinition.
type FieldDefinitionEventHandler func(FieldDefinition)

// FieldDefinitionEventHandlers stores the enter and leave events handlers.
type FieldDefinitionEventHandlers struct {
	enter []FieldDefinitionEventHandler
	leave []FieldDefinitionEventHandler
}

// AddFieldDefinitionEnterEventHandler adds an event handler to be called when entering a FieldDefinition node.
func (w *Strider) AddFieldDefinitionEnterEventHandler(handler FieldDefinitionEventHandler) {
	if w.fieldDefinitionEventHandlers == nil {
		w.fieldDefinitionEventHandlers = &FieldDefinitionEventHandlers{}
	}
	w.fieldDefinitionEventHandlers.enter = append(w.fieldDefinitionEventHandlers.enter, handler)
}

// AddFieldDefinitionLeaveEventHandler adds an event handler to be called when leaving a FieldDefinition node.
func (w *Strider) AddFieldDefinitionLeaveEventHandler(handler FieldDefinitionEventHandler) {
	if w.fieldDefinitionEventHandlers == nil {
		w.fieldDefinitionEventHandlers = &FieldDefinitionEventHandlers{}
	}
	w.fieldDefinitionEventHandlers.leave = append(w.fieldDefinitionEventHandlers.leave, handler)
}

// OnFieldDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnFieldDefinitionEnter(fd FieldDefinition) {
	if w.fieldDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.fieldDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFieldDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnFieldDefinitionLeave(fd FieldDefinition) {
	if w.fieldDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.fieldDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// FieldSelectionEventHandler function can handle enter/leave events for FieldSelection.
type FieldSelectionEventHandler func(Selection)

// FieldSelectionEventHandlers stores the enter and leave events handlers.
type FieldSelectionEventHandlers struct {
	enter []FieldSelectionEventHandler
	leave []FieldSelectionEventHandler
}

// AddFieldSelectionEnterEventHandler adds an event handler to be called when entering a FieldSelection node.
func (w *Strider) AddFieldSelectionEnterEventHandler(handler FieldSelectionEventHandler) {
	if w.fieldSelectionEventHandlers == nil {
		w.fieldSelectionEventHandlers = &FieldSelectionEventHandlers{}
	}
	w.fieldSelectionEventHandlers.enter = append(w.fieldSelectionEventHandlers.enter, handler)
}

// AddFieldSelectionLeaveEventHandler adds an event handler to be called when leaving a FieldSelection node.
func (w *Strider) AddFieldSelectionLeaveEventHandler(handler FieldSelectionEventHandler) {
	if w.fieldSelectionEventHandlers == nil {
		w.fieldSelectionEventHandlers = &FieldSelectionEventHandlers{}
	}
	w.fieldSelectionEventHandlers.leave = append(w.fieldSelectionEventHandlers.leave, handler)
}

// OnFieldSelectionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnFieldSelectionEnter(fs Selection) {
	if w.fieldSelectionEventHandlers == nil {
		return
	}

	for _, handler := range w.fieldSelectionEventHandlers.enter {
		handler(fs)
	}
}

// OnFieldSelectionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnFieldSelectionLeave(fs Selection) {
	if w.fieldSelectionEventHandlers == nil {
		return
	}

	for _, handler := range w.fieldSelectionEventHandlers.leave {
		handler(fs)
	}
}

// FieldsDefinitionEventHandler function can handle enter/leave events for FieldsDefinition.
type FieldsDefinitionEventHandler func(*FieldDefinitions)

// FieldsDefinitionEventHandlers stores the enter and leave events handlers.
type FieldsDefinitionEventHandlers struct {
	enter []FieldsDefinitionEventHandler
	leave []FieldsDefinitionEventHandler
}

// AddFieldsDefinitionEnterEventHandler adds an event handler to be called when entering a FieldsDefinition node.
func (w *Strider) AddFieldsDefinitionEnterEventHandler(handler FieldsDefinitionEventHandler) {
	if w.fieldsDefinitionEventHandlers == nil {
		w.fieldsDefinitionEventHandlers = &FieldsDefinitionEventHandlers{}
	}
	w.fieldsDefinitionEventHandlers.enter = append(w.fieldsDefinitionEventHandlers.enter, handler)
}

// AddFieldsDefinitionLeaveEventHandler adds an event handler to be called when leaving a FieldsDefinition node.
func (w *Strider) AddFieldsDefinitionLeaveEventHandler(handler FieldsDefinitionEventHandler) {
	if w.fieldsDefinitionEventHandlers == nil {
		w.fieldsDefinitionEventHandlers = &FieldsDefinitionEventHandlers{}
	}
	w.fieldsDefinitionEventHandlers.leave = append(w.fieldsDefinitionEventHandlers.leave, handler)
}

// OnFieldsDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnFieldsDefinitionEnter(fd *FieldDefinitions) {
	if w.fieldsDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.fieldsDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFieldsDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnFieldsDefinitionLeave(fd *FieldDefinitions) {
	if w.fieldsDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.fieldsDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// FragmentDefinitionEventHandler function can handle enter/leave events for FragmentDefinition.
type FragmentDefinitionEventHandler func(*ExecutableDefinition)

// FragmentDefinitionEventHandlers stores the enter and leave events handlers.
type FragmentDefinitionEventHandlers struct {
	enter []FragmentDefinitionEventHandler
	leave []FragmentDefinitionEventHandler
}

// AddFragmentDefinitionEnterEventHandler adds an event handler to be called when entering a FragmentDefinition node.
func (w *Strider) AddFragmentDefinitionEnterEventHandler(handler FragmentDefinitionEventHandler) {
	if w.fragmentDefinitionEventHandlers == nil {
		w.fragmentDefinitionEventHandlers = &FragmentDefinitionEventHandlers{}
	}
	w.fragmentDefinitionEventHandlers.enter = append(w.fragmentDefinitionEventHandlers.enter, handler)
}

// AddFragmentDefinitionLeaveEventHandler adds an event handler to be called when leaving a FragmentDefinition node.
func (w *Strider) AddFragmentDefinitionLeaveEventHandler(handler FragmentDefinitionEventHandler) {
	if w.fragmentDefinitionEventHandlers == nil {
		w.fragmentDefinitionEventHandlers = &FragmentDefinitionEventHandlers{}
	}
	w.fragmentDefinitionEventHandlers.leave = append(w.fragmentDefinitionEventHandlers.leave, handler)
}

// OnFragmentDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnFragmentDefinitionEnter(fd *ExecutableDefinition) {
	if w.fragmentDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.fragmentDefinitionEventHandlers.enter {
		handler(fd)
	}
}

// OnFragmentDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnFragmentDefinitionLeave(fd *ExecutableDefinition) {
	if w.fragmentDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.fragmentDefinitionEventHandlers.leave {
		handler(fd)
	}
}

// FragmentSpreadEventHandler function can handle enter/leave events for FragmentSpread.
type FragmentSpreadEventHandler func(Selection)

// FragmentSpreadEventHandlers stores the enter and leave events handlers.
type FragmentSpreadEventHandlers struct {
	enter []FragmentSpreadEventHandler
	leave []FragmentSpreadEventHandler
}

// AddFragmentSpreadEnterEventHandler adds an event handler to be called when entering a FragmentSpread node.
func (w *Strider) AddFragmentSpreadEnterEventHandler(handler FragmentSpreadEventHandler) {
	if w.fragmentSpreadEventHandlers == nil {
		w.fragmentSpreadEventHandlers = &FragmentSpreadEventHandlers{}
	}
	w.fragmentSpreadEventHandlers.enter = append(w.fragmentSpreadEventHandlers.enter, handler)
}

// AddFragmentSpreadLeaveEventHandler adds an event handler to be called when leaving a FragmentSpread node.
func (w *Strider) AddFragmentSpreadLeaveEventHandler(handler FragmentSpreadEventHandler) {
	if w.fragmentSpreadEventHandlers == nil {
		w.fragmentSpreadEventHandlers = &FragmentSpreadEventHandlers{}
	}
	w.fragmentSpreadEventHandlers.leave = append(w.fragmentSpreadEventHandlers.leave, handler)
}

// OnFragmentSpreadEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnFragmentSpreadEnter(fs Selection) {
	if w.fragmentSpreadEventHandlers == nil {
		return
	}

	for _, handler := range w.fragmentSpreadEventHandlers.enter {
		handler(fs)
	}
}

// OnFragmentSpreadLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnFragmentSpreadLeave(fs Selection) {
	if w.fragmentSpreadEventHandlers == nil {
		return
	}

	for _, handler := range w.fragmentSpreadEventHandlers.leave {
		handler(fs)
	}
}

// ImplementsInterfacesEventHandler function can handle enter/leave events for ImplementsInterfaces.
type ImplementsInterfacesEventHandler func(*Types)

// ImplementsInterfacesEventHandlers stores the enter and leave events handlers.
type ImplementsInterfacesEventHandlers struct {
	enter []ImplementsInterfacesEventHandler
	leave []ImplementsInterfacesEventHandler
}

// AddImplementsInterfacesEnterEventHandler adds an event handler to be called when entering a ImplementsInterfaces node.
func (w *Strider) AddImplementsInterfacesEnterEventHandler(handler ImplementsInterfacesEventHandler) {
	if w.implementsInterfacesEventHandlers == nil {
		w.implementsInterfacesEventHandlers = &ImplementsInterfacesEventHandlers{}
	}
	w.implementsInterfacesEventHandlers.enter = append(w.implementsInterfacesEventHandlers.enter, handler)
}

// AddImplementsInterfacesLeaveEventHandler adds an event handler to be called when leaving a ImplementsInterfaces node.
func (w *Strider) AddImplementsInterfacesLeaveEventHandler(handler ImplementsInterfacesEventHandler) {
	if w.implementsInterfacesEventHandlers == nil {
		w.implementsInterfacesEventHandlers = &ImplementsInterfacesEventHandlers{}
	}
	w.implementsInterfacesEventHandlers.leave = append(w.implementsInterfacesEventHandlers.leave, handler)
}

// OnImplementsInterfacesEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnImplementsInterfacesEnter(ii *Types) {
	if w.implementsInterfacesEventHandlers == nil {
		return
	}

	for _, handler := range w.implementsInterfacesEventHandlers.enter {
		handler(ii)
	}
}

// OnImplementsInterfacesLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnImplementsInterfacesLeave(ii *Types) {
	if w.implementsInterfacesEventHandlers == nil {
		return
	}

	for _, handler := range w.implementsInterfacesEventHandlers.leave {
		handler(ii)
	}
}

// InlineFragmentEventHandler function can handle enter/leave events for InlineFragment.
type InlineFragmentEventHandler func(Selection)

// InlineFragmentEventHandlers stores the enter and leave events handlers.
type InlineFragmentEventHandlers struct {
	enter []InlineFragmentEventHandler
	leave []InlineFragmentEventHandler
}

// AddInlineFragmentEnterEventHandler adds an event handler to be called when entering a InlineFragment node.
func (w *Strider) AddInlineFragmentEnterEventHandler(handler InlineFragmentEventHandler) {
	if w.inlineFragmentEventHandlers == nil {
		w.inlineFragmentEventHandlers = &InlineFragmentEventHandlers{}
	}
	w.inlineFragmentEventHandlers.enter = append(w.inlineFragmentEventHandlers.enter, handler)
}

// AddInlineFragmentLeaveEventHandler adds an event handler to be called when leaving a InlineFragment node.
func (w *Strider) AddInlineFragmentLeaveEventHandler(handler InlineFragmentEventHandler) {
	if w.inlineFragmentEventHandlers == nil {
		w.inlineFragmentEventHandlers = &InlineFragmentEventHandlers{}
	}
	w.inlineFragmentEventHandlers.leave = append(w.inlineFragmentEventHandlers.leave, handler)
}

// OnInlineFragmentEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnInlineFragmentEnter(ilf Selection) {
	if w.inlineFragmentEventHandlers == nil {
		return
	}

	for _, handler := range w.inlineFragmentEventHandlers.enter {
		handler(ilf)
	}
}

// OnInlineFragmentLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnInlineFragmentLeave(ilf Selection) {
	if w.inlineFragmentEventHandlers == nil {
		return
	}

	for _, handler := range w.inlineFragmentEventHandlers.leave {
		handler(ilf)
	}
}

// InputFieldsDefinitionEventHandler function can handle enter/leave events for InputFieldsDefinition.
type InputFieldsDefinitionEventHandler func(*InputValueDefinitions)

// InputFieldsDefinitionEventHandlers stores the enter and leave events handlers.
type InputFieldsDefinitionEventHandlers struct {
	enter []InputFieldsDefinitionEventHandler
	leave []InputFieldsDefinitionEventHandler
}

// AddInputFieldsDefinitionEnterEventHandler adds an event handler to be called when entering a InputFieldsDefinition node.
func (w *Strider) AddInputFieldsDefinitionEnterEventHandler(handler InputFieldsDefinitionEventHandler) {
	if w.inputFieldsDefinitionEventHandlers == nil {
		w.inputFieldsDefinitionEventHandlers = &InputFieldsDefinitionEventHandlers{}
	}
	w.inputFieldsDefinitionEventHandlers.enter = append(w.inputFieldsDefinitionEventHandlers.enter, handler)
}

// AddInputFieldsDefinitionLeaveEventHandler adds an event handler to be called when leaving a InputFieldsDefinition node.
func (w *Strider) AddInputFieldsDefinitionLeaveEventHandler(handler InputFieldsDefinitionEventHandler) {
	if w.inputFieldsDefinitionEventHandlers == nil {
		w.inputFieldsDefinitionEventHandlers = &InputFieldsDefinitionEventHandlers{}
	}
	w.inputFieldsDefinitionEventHandlers.leave = append(w.inputFieldsDefinitionEventHandlers.leave, handler)
}

// OnInputFieldsDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnInputFieldsDefinitionEnter(ifd *InputValueDefinitions) {
	if w.inputFieldsDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.inputFieldsDefinitionEventHandlers.enter {
		handler(ifd)
	}
}

// OnInputFieldsDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnInputFieldsDefinitionLeave(ifd *InputValueDefinitions) {
	if w.inputFieldsDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.inputFieldsDefinitionEventHandlers.leave {
		handler(ifd)
	}
}

// InputObjectTypeExtensionEventHandler function can handle enter/leave events for InputObjectTypeExtension.
type InputObjectTypeExtensionEventHandler func(*TypeExtension)

// InputObjectTypeExtensionEventHandlers stores the enter and leave events handlers.
type InputObjectTypeExtensionEventHandlers struct {
	enter []InputObjectTypeExtensionEventHandler
	leave []InputObjectTypeExtensionEventHandler
}

// AddInputObjectTypeExtensionEnterEventHandler adds an event handler to be called when entering a InputObjectTypeExtension node.
func (w *Strider) AddInputObjectTypeExtensionEnterEventHandler(handler InputObjectTypeExtensionEventHandler) {
	if w.inputObjectTypeExtensionEventHandlers == nil {
		w.inputObjectTypeExtensionEventHandlers = &InputObjectTypeExtensionEventHandlers{}
	}
	w.inputObjectTypeExtensionEventHandlers.enter = append(w.inputObjectTypeExtensionEventHandlers.enter, handler)
}

// AddInputObjectTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a InputObjectTypeExtension node.
func (w *Strider) AddInputObjectTypeExtensionLeaveEventHandler(handler InputObjectTypeExtensionEventHandler) {
	if w.inputObjectTypeExtensionEventHandlers == nil {
		w.inputObjectTypeExtensionEventHandlers = &InputObjectTypeExtensionEventHandlers{}
	}
	w.inputObjectTypeExtensionEventHandlers.leave = append(w.inputObjectTypeExtensionEventHandlers.leave, handler)
}

// OnInputObjectTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnInputObjectTypeExtensionEnter(iote *TypeExtension) {
	if w.inputObjectTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.inputObjectTypeExtensionEventHandlers.enter {
		handler(iote)
	}
}

// OnInputObjectTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnInputObjectTypeExtensionLeave(iote *TypeExtension) {
	if w.inputObjectTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.inputObjectTypeExtensionEventHandlers.leave {
		handler(iote)
	}
}

// InputValueDefinitionEventHandler function can handle enter/leave events for InputValueDefinition.
type InputValueDefinitionEventHandler func(InputValueDefinition)

// InputValueDefinitionEventHandlers stores the enter and leave events handlers.
type InputValueDefinitionEventHandlers struct {
	enter []InputValueDefinitionEventHandler
	leave []InputValueDefinitionEventHandler
}

// AddInputValueDefinitionEnterEventHandler adds an event handler to be called when entering a InputValueDefinition node.
func (w *Strider) AddInputValueDefinitionEnterEventHandler(handler InputValueDefinitionEventHandler) {
	if w.inputValueDefinitionEventHandlers == nil {
		w.inputValueDefinitionEventHandlers = &InputValueDefinitionEventHandlers{}
	}
	w.inputValueDefinitionEventHandlers.enter = append(w.inputValueDefinitionEventHandlers.enter, handler)
}

// AddInputValueDefinitionLeaveEventHandler adds an event handler to be called when leaving a InputValueDefinition node.
func (w *Strider) AddInputValueDefinitionLeaveEventHandler(handler InputValueDefinitionEventHandler) {
	if w.inputValueDefinitionEventHandlers == nil {
		w.inputValueDefinitionEventHandlers = &InputValueDefinitionEventHandlers{}
	}
	w.inputValueDefinitionEventHandlers.leave = append(w.inputValueDefinitionEventHandlers.leave, handler)
}

// OnInputValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnInputValueDefinitionEnter(ivd InputValueDefinition) {
	if w.inputValueDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.inputValueDefinitionEventHandlers.enter {
		handler(ivd)
	}
}

// OnInputValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnInputValueDefinitionLeave(ivd InputValueDefinition) {
	if w.inputValueDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.inputValueDefinitionEventHandlers.leave {
		handler(ivd)
	}
}

// InterfaceTypeExtensionEventHandler function can handle enter/leave events for InterfaceTypeExtension.
type InterfaceTypeExtensionEventHandler func(*TypeExtension)

// InterfaceTypeExtensionEventHandlers stores the enter and leave events handlers.
type InterfaceTypeExtensionEventHandlers struct {
	enter []InterfaceTypeExtensionEventHandler
	leave []InterfaceTypeExtensionEventHandler
}

// AddInterfaceTypeExtensionEnterEventHandler adds an event handler to be called when entering a InterfaceTypeExtension node.
func (w *Strider) AddInterfaceTypeExtensionEnterEventHandler(handler InterfaceTypeExtensionEventHandler) {
	if w.interfaceTypeExtensionEventHandlers == nil {
		w.interfaceTypeExtensionEventHandlers = &InterfaceTypeExtensionEventHandlers{}
	}
	w.interfaceTypeExtensionEventHandlers.enter = append(w.interfaceTypeExtensionEventHandlers.enter, handler)
}

// AddInterfaceTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a InterfaceTypeExtension node.
func (w *Strider) AddInterfaceTypeExtensionLeaveEventHandler(handler InterfaceTypeExtensionEventHandler) {
	if w.interfaceTypeExtensionEventHandlers == nil {
		w.interfaceTypeExtensionEventHandlers = &InterfaceTypeExtensionEventHandlers{}
	}
	w.interfaceTypeExtensionEventHandlers.leave = append(w.interfaceTypeExtensionEventHandlers.leave, handler)
}

// OnInterfaceTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnInterfaceTypeExtensionEnter(ite *TypeExtension) {
	if w.interfaceTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.interfaceTypeExtensionEventHandlers.enter {
		handler(ite)
	}
}

// OnInterfaceTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnInterfaceTypeExtensionLeave(ite *TypeExtension) {
	if w.interfaceTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.interfaceTypeExtensionEventHandlers.leave {
		handler(ite)
	}
}

// ObjectTypeExtensionEventHandler function can handle enter/leave events for ObjectTypeExtension.
type ObjectTypeExtensionEventHandler func(*TypeExtension)

// ObjectTypeExtensionEventHandlers stores the enter and leave events handlers.
type ObjectTypeExtensionEventHandlers struct {
	enter []ObjectTypeExtensionEventHandler
	leave []ObjectTypeExtensionEventHandler
}

// AddObjectTypeExtensionEnterEventHandler adds an event handler to be called when entering a ObjectTypeExtension node.
func (w *Strider) AddObjectTypeExtensionEnterEventHandler(handler ObjectTypeExtensionEventHandler) {
	if w.objectTypeExtensionEventHandlers == nil {
		w.objectTypeExtensionEventHandlers = &ObjectTypeExtensionEventHandlers{}
	}
	w.objectTypeExtensionEventHandlers.enter = append(w.objectTypeExtensionEventHandlers.enter, handler)
}

// AddObjectTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a ObjectTypeExtension node.
func (w *Strider) AddObjectTypeExtensionLeaveEventHandler(handler ObjectTypeExtensionEventHandler) {
	if w.objectTypeExtensionEventHandlers == nil {
		w.objectTypeExtensionEventHandlers = &ObjectTypeExtensionEventHandlers{}
	}
	w.objectTypeExtensionEventHandlers.leave = append(w.objectTypeExtensionEventHandlers.leave, handler)
}

// OnObjectTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnObjectTypeExtensionEnter(ote *TypeExtension) {
	if w.objectTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.objectTypeExtensionEventHandlers.enter {
		handler(ote)
	}
}

// OnObjectTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnObjectTypeExtensionLeave(ote *TypeExtension) {
	if w.objectTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.objectTypeExtensionEventHandlers.leave {
		handler(ote)
	}
}

// OperationDefinitionEventHandler function can handle enter/leave events for OperationDefinition.
type OperationDefinitionEventHandler func(*ExecutableDefinition)

// OperationDefinitionEventHandlers stores the enter and leave events handlers.
type OperationDefinitionEventHandlers struct {
	enter []OperationDefinitionEventHandler
	leave []OperationDefinitionEventHandler
}

// AddOperationDefinitionEnterEventHandler adds an event handler to be called when entering a OperationDefinition node.
func (w *Strider) AddOperationDefinitionEnterEventHandler(handler OperationDefinitionEventHandler) {
	if w.operationDefinitionEventHandlers == nil {
		w.operationDefinitionEventHandlers = &OperationDefinitionEventHandlers{}
	}
	w.operationDefinitionEventHandlers.enter = append(w.operationDefinitionEventHandlers.enter, handler)
}

// AddOperationDefinitionLeaveEventHandler adds an event handler to be called when leaving a OperationDefinition node.
func (w *Strider) AddOperationDefinitionLeaveEventHandler(handler OperationDefinitionEventHandler) {
	if w.operationDefinitionEventHandlers == nil {
		w.operationDefinitionEventHandlers = &OperationDefinitionEventHandlers{}
	}
	w.operationDefinitionEventHandlers.leave = append(w.operationDefinitionEventHandlers.leave, handler)
}

// OnOperationDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnOperationDefinitionEnter(od *ExecutableDefinition) {
	if w.operationDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.operationDefinitionEventHandlers.enter {
		handler(od)
	}
}

// OnOperationDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnOperationDefinitionLeave(od *ExecutableDefinition) {
	if w.operationDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.operationDefinitionEventHandlers.leave {
		handler(od)
	}
}

// OperationTypeDefinitionEventHandler function can handle enter/leave events for OperationTypeDefinition.
type OperationTypeDefinitionEventHandler func(OperationTypeDefinition)

// OperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type OperationTypeDefinitionEventHandlers struct {
	enter []OperationTypeDefinitionEventHandler
	leave []OperationTypeDefinitionEventHandler
}

// AddOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering a OperationTypeDefinition node.
func (w *Strider) AddOperationTypeDefinitionEnterEventHandler(handler OperationTypeDefinitionEventHandler) {
	if w.operationTypeDefinitionEventHandlers == nil {
		w.operationTypeDefinitionEventHandlers = &OperationTypeDefinitionEventHandlers{}
	}
	w.operationTypeDefinitionEventHandlers.enter = append(w.operationTypeDefinitionEventHandlers.enter, handler)
}

// AddOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving a OperationTypeDefinition node.
func (w *Strider) AddOperationTypeDefinitionLeaveEventHandler(handler OperationTypeDefinitionEventHandler) {
	if w.operationTypeDefinitionEventHandlers == nil {
		w.operationTypeDefinitionEventHandlers = &OperationTypeDefinitionEventHandlers{}
	}
	w.operationTypeDefinitionEventHandlers.leave = append(w.operationTypeDefinitionEventHandlers.leave, handler)
}

// OnOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnOperationTypeDefinitionEnter(otd OperationTypeDefinition) {
	if w.operationTypeDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.operationTypeDefinitionEventHandlers.enter {
		handler(otd)
	}
}

// OnOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnOperationTypeDefinitionLeave(otd OperationTypeDefinition) {
	if w.operationTypeDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.operationTypeDefinitionEventHandlers.leave {
		handler(otd)
	}
}

// RootOperationTypeDefinitionEventHandler function can handle enter/leave events for RootOperationTypeDefinition.
type RootOperationTypeDefinitionEventHandler func(RootOperationTypeDefinition)

// RootOperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type RootOperationTypeDefinitionEventHandlers struct {
	enter []RootOperationTypeDefinitionEventHandler
	leave []RootOperationTypeDefinitionEventHandler
}

// AddRootOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering a RootOperationTypeDefinition node.
func (w *Strider) AddRootOperationTypeDefinitionEnterEventHandler(handler RootOperationTypeDefinitionEventHandler) {
	if w.rootOperationTypeDefinitionEventHandlers == nil {
		w.rootOperationTypeDefinitionEventHandlers = &RootOperationTypeDefinitionEventHandlers{}
	}
	w.rootOperationTypeDefinitionEventHandlers.enter = append(w.rootOperationTypeDefinitionEventHandlers.enter, handler)
}

// AddRootOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving a RootOperationTypeDefinition node.
func (w *Strider) AddRootOperationTypeDefinitionLeaveEventHandler(handler RootOperationTypeDefinitionEventHandler) {
	if w.rootOperationTypeDefinitionEventHandlers == nil {
		w.rootOperationTypeDefinitionEventHandlers = &RootOperationTypeDefinitionEventHandlers{}
	}
	w.rootOperationTypeDefinitionEventHandlers.leave = append(w.rootOperationTypeDefinitionEventHandlers.leave, handler)
}

// OnRootOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnRootOperationTypeDefinitionEnter(rotd RootOperationTypeDefinition) {
	if w.rootOperationTypeDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.enter {
		handler(rotd)
	}
}

// OnRootOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnRootOperationTypeDefinitionLeave(rotd RootOperationTypeDefinition) {
	if w.rootOperationTypeDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.leave {
		handler(rotd)
	}
}

// ScalarTypeExtensionEventHandler function can handle enter/leave events for ScalarTypeExtension.
type ScalarTypeExtensionEventHandler func(*TypeExtension)

// ScalarTypeExtensionEventHandlers stores the enter and leave events handlers.
type ScalarTypeExtensionEventHandlers struct {
	enter []ScalarTypeExtensionEventHandler
	leave []ScalarTypeExtensionEventHandler
}

// AddScalarTypeExtensionEnterEventHandler adds an event handler to be called when entering a ScalarTypeExtension node.
func (w *Strider) AddScalarTypeExtensionEnterEventHandler(handler ScalarTypeExtensionEventHandler) {
	if w.scalarTypeExtensionEventHandlers == nil {
		w.scalarTypeExtensionEventHandlers = &ScalarTypeExtensionEventHandlers{}
	}
	w.scalarTypeExtensionEventHandlers.enter = append(w.scalarTypeExtensionEventHandlers.enter, handler)
}

// AddScalarTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a ScalarTypeExtension node.
func (w *Strider) AddScalarTypeExtensionLeaveEventHandler(handler ScalarTypeExtensionEventHandler) {
	if w.scalarTypeExtensionEventHandlers == nil {
		w.scalarTypeExtensionEventHandlers = &ScalarTypeExtensionEventHandlers{}
	}
	w.scalarTypeExtensionEventHandlers.leave = append(w.scalarTypeExtensionEventHandlers.leave, handler)
}

// OnScalarTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnScalarTypeExtensionEnter(ste *TypeExtension) {
	if w.scalarTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.scalarTypeExtensionEventHandlers.enter {
		handler(ste)
	}
}

// OnScalarTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnScalarTypeExtensionLeave(ste *TypeExtension) {
	if w.scalarTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.scalarTypeExtensionEventHandlers.leave {
		handler(ste)
	}
}

// SchemaDefinitionEventHandler function can handle enter/leave events for SchemaDefinition.
type SchemaDefinitionEventHandler func(*SchemaDefinition)

// SchemaDefinitionEventHandlers stores the enter and leave events handlers.
type SchemaDefinitionEventHandlers struct {
	enter []SchemaDefinitionEventHandler
	leave []SchemaDefinitionEventHandler
}

// AddSchemaDefinitionEnterEventHandler adds an event handler to be called when entering a SchemaDefinition node.
func (w *Strider) AddSchemaDefinitionEnterEventHandler(handler SchemaDefinitionEventHandler) {
	if w.schemaDefinitionEventHandlers == nil {
		w.schemaDefinitionEventHandlers = &SchemaDefinitionEventHandlers{}
	}
	w.schemaDefinitionEventHandlers.enter = append(w.schemaDefinitionEventHandlers.enter, handler)
}

// AddSchemaDefinitionLeaveEventHandler adds an event handler to be called when leaving a SchemaDefinition node.
func (w *Strider) AddSchemaDefinitionLeaveEventHandler(handler SchemaDefinitionEventHandler) {
	if w.schemaDefinitionEventHandlers == nil {
		w.schemaDefinitionEventHandlers = &SchemaDefinitionEventHandlers{}
	}
	w.schemaDefinitionEventHandlers.leave = append(w.schemaDefinitionEventHandlers.leave, handler)
}

// OnSchemaDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnSchemaDefinitionEnter(sd *SchemaDefinition) {
	if w.schemaDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.schemaDefinitionEventHandlers.enter {
		handler(sd)
	}
}

// OnSchemaDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnSchemaDefinitionLeave(sd *SchemaDefinition) {
	if w.schemaDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.schemaDefinitionEventHandlers.leave {
		handler(sd)
	}
}

// SchemaExtensionEventHandler function can handle enter/leave events for SchemaExtension.
type SchemaExtensionEventHandler func(*SchemaExtension)

// SchemaExtensionEventHandlers stores the enter and leave events handlers.
type SchemaExtensionEventHandlers struct {
	enter []SchemaExtensionEventHandler
	leave []SchemaExtensionEventHandler
}

// AddSchemaExtensionEnterEventHandler adds an event handler to be called when entering a SchemaExtension node.
func (w *Strider) AddSchemaExtensionEnterEventHandler(handler SchemaExtensionEventHandler) {
	if w.schemaExtensionEventHandlers == nil {
		w.schemaExtensionEventHandlers = &SchemaExtensionEventHandlers{}
	}
	w.schemaExtensionEventHandlers.enter = append(w.schemaExtensionEventHandlers.enter, handler)
}

// AddSchemaExtensionLeaveEventHandler adds an event handler to be called when leaving a SchemaExtension node.
func (w *Strider) AddSchemaExtensionLeaveEventHandler(handler SchemaExtensionEventHandler) {
	if w.schemaExtensionEventHandlers == nil {
		w.schemaExtensionEventHandlers = &SchemaExtensionEventHandlers{}
	}
	w.schemaExtensionEventHandlers.leave = append(w.schemaExtensionEventHandlers.leave, handler)
}

// OnSchemaExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnSchemaExtensionEnter(se *SchemaExtension) {
	if w.schemaExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.schemaExtensionEventHandlers.enter {
		handler(se)
	}
}

// OnSchemaExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnSchemaExtensionLeave(se *SchemaExtension) {
	if w.schemaExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.schemaExtensionEventHandlers.leave {
		handler(se)
	}
}

// SelectionEventHandler function can handle enter/leave events for Selection.
type SelectionEventHandler func(Selection)

// SelectionEventHandlers stores the enter and leave events handlers.
type SelectionEventHandlers struct {
	enter []SelectionEventHandler
	leave []SelectionEventHandler
}

// AddSelectionEnterEventHandler adds an event handler to be called when entering a Selection node.
func (w *Strider) AddSelectionEnterEventHandler(handler SelectionEventHandler) {
	if w.selectionEventHandlers == nil {
		w.selectionEventHandlers = &SelectionEventHandlers{}
	}
	w.selectionEventHandlers.enter = append(w.selectionEventHandlers.enter, handler)
}

// AddSelectionLeaveEventHandler adds an event handler to be called when leaving a Selection node.
func (w *Strider) AddSelectionLeaveEventHandler(handler SelectionEventHandler) {
	if w.selectionEventHandlers == nil {
		w.selectionEventHandlers = &SelectionEventHandlers{}
	}
	w.selectionEventHandlers.leave = append(w.selectionEventHandlers.leave, handler)
}

// OnSelectionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnSelectionEnter(s Selection) {
	if w.selectionEventHandlers == nil {
		return
	}

	for _, handler := range w.selectionEventHandlers.enter {
		handler(s)
	}
}

// OnSelectionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnSelectionLeave(s Selection) {
	if w.selectionEventHandlers == nil {
		return
	}

	for _, handler := range w.selectionEventHandlers.leave {
		handler(s)
	}
}

// SelectionsEventHandler function can handle enter/leave events for Selections.
type SelectionsEventHandler func(*Selections)

// SelectionsEventHandlers stores the enter and leave events handlers.
type SelectionsEventHandlers struct {
	enter []SelectionsEventHandler
	leave []SelectionsEventHandler
}

// AddSelectionsEnterEventHandler adds an event handler to be called when entering a Selections node.
func (w *Strider) AddSelectionsEnterEventHandler(handler SelectionsEventHandler) {
	if w.selectionsEventHandlers == nil {
		w.selectionsEventHandlers = &SelectionsEventHandlers{}
	}
	w.selectionsEventHandlers.enter = append(w.selectionsEventHandlers.enter, handler)
}

// AddSelectionsLeaveEventHandler adds an event handler to be called when leaving a Selections node.
func (w *Strider) AddSelectionsLeaveEventHandler(handler SelectionsEventHandler) {
	if w.selectionsEventHandlers == nil {
		w.selectionsEventHandlers = &SelectionsEventHandlers{}
	}
	w.selectionsEventHandlers.leave = append(w.selectionsEventHandlers.leave, handler)
}

// OnSelectionsEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnSelectionsEnter(s *Selections) {
	if w.selectionsEventHandlers == nil {
		return
	}

	for _, handler := range w.selectionsEventHandlers.enter {
		handler(s)
	}
}

// OnSelectionsLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnSelectionsLeave(s *Selections) {
	if w.selectionsEventHandlers == nil {
		return
	}

	for _, handler := range w.selectionsEventHandlers.leave {
		handler(s)
	}
}

// TypeEventHandler function can handle enter/leave events for Type.
type TypeEventHandler func(Type)

// TypeEventHandlers stores the enter and leave events handlers.
type TypeEventHandlers struct {
	enter []TypeEventHandler
	leave []TypeEventHandler
}

// AddTypeEnterEventHandler adds an event handler to be called when entering a Type node.
func (w *Strider) AddTypeEnterEventHandler(handler TypeEventHandler) {
	if w.typeEventHandlers == nil {
		w.typeEventHandlers = &TypeEventHandlers{}
	}
	w.typeEventHandlers.enter = append(w.typeEventHandlers.enter, handler)
}

// AddTypeLeaveEventHandler adds an event handler to be called when leaving a Type node.
func (w *Strider) AddTypeLeaveEventHandler(handler TypeEventHandler) {
	if w.typeEventHandlers == nil {
		w.typeEventHandlers = &TypeEventHandlers{}
	}
	w.typeEventHandlers.leave = append(w.typeEventHandlers.leave, handler)
}

// OnTypeEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeEnter(t Type) {
	if w.typeEventHandlers == nil {
		return
	}

	for _, handler := range w.typeEventHandlers.enter {
		handler(t)
	}
}

// OnTypeLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeLeave(t Type) {
	if w.typeEventHandlers == nil {
		return
	}

	for _, handler := range w.typeEventHandlers.leave {
		handler(t)
	}
}

// TypeDefinitionEventHandler function can handle enter/leave events for TypeDefinition.
type TypeDefinitionEventHandler func(*TypeDefinition)

// TypeDefinitionEventHandlers stores the enter and leave events handlers.
type TypeDefinitionEventHandlers struct {
	enter []TypeDefinitionEventHandler
	leave []TypeDefinitionEventHandler
}

// AddTypeDefinitionEnterEventHandler adds an event handler to be called when entering a TypeDefinition node.
func (w *Strider) AddTypeDefinitionEnterEventHandler(handler TypeDefinitionEventHandler) {
	if w.typeDefinitionEventHandlers == nil {
		w.typeDefinitionEventHandlers = &TypeDefinitionEventHandlers{}
	}
	w.typeDefinitionEventHandlers.enter = append(w.typeDefinitionEventHandlers.enter, handler)
}

// AddTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving a TypeDefinition node.
func (w *Strider) AddTypeDefinitionLeaveEventHandler(handler TypeDefinitionEventHandler) {
	if w.typeDefinitionEventHandlers == nil {
		w.typeDefinitionEventHandlers = &TypeDefinitionEventHandlers{}
	}
	w.typeDefinitionEventHandlers.leave = append(w.typeDefinitionEventHandlers.leave, handler)
}

// OnTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionEnter(td *TypeDefinition) {
	if w.typeDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionEventHandlers.enter {
		handler(td)
	}
}

// OnTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionLeave(td *TypeDefinition) {
	if w.typeDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionEventHandlers.leave {
		handler(td)
	}
}

// TypeDefinitionEnumEventHandler function can handle enter/leave events for TypeDefinitionEnum.
type TypeDefinitionEnumEventHandler func(*TypeDefinition)

// TypeDefinitionEnumEventHandlers stores the enter and leave events handlers.
type TypeDefinitionEnumEventHandlers struct {
	enter []TypeDefinitionEnumEventHandler
	leave []TypeDefinitionEnumEventHandler
}

// AddTypeDefinitionEnumEnterEventHandler adds an event handler to be called when entering a TypeDefinitionEnum node.
func (w *Strider) AddTypeDefinitionEnumEnterEventHandler(handler TypeDefinitionEnumEventHandler) {
	if w.typeDefinitionEnumEventHandlers == nil {
		w.typeDefinitionEnumEventHandlers = &TypeDefinitionEnumEventHandlers{}
	}
	w.typeDefinitionEnumEventHandlers.enter = append(w.typeDefinitionEnumEventHandlers.enter, handler)
}

// AddTypeDefinitionEnumLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionEnum node.
func (w *Strider) AddTypeDefinitionEnumLeaveEventHandler(handler TypeDefinitionEnumEventHandler) {
	if w.typeDefinitionEnumEventHandlers == nil {
		w.typeDefinitionEnumEventHandlers = &TypeDefinitionEnumEventHandlers{}
	}
	w.typeDefinitionEnumEventHandlers.leave = append(w.typeDefinitionEnumEventHandlers.leave, handler)
}

// OnTypeDefinitionEnumEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionEnumEnter(tde *TypeDefinition) {
	if w.typeDefinitionEnumEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionEnumEventHandlers.enter {
		handler(tde)
	}
}

// OnTypeDefinitionEnumLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionEnumLeave(tde *TypeDefinition) {
	if w.typeDefinitionEnumEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionEnumEventHandlers.leave {
		handler(tde)
	}
}

// TypeDefinitionInputObjectEventHandler function can handle enter/leave events for TypeDefinitionInputObject.
type TypeDefinitionInputObjectEventHandler func(*TypeDefinition)

// TypeDefinitionInputObjectEventHandlers stores the enter and leave events handlers.
type TypeDefinitionInputObjectEventHandlers struct {
	enter []TypeDefinitionInputObjectEventHandler
	leave []TypeDefinitionInputObjectEventHandler
}

// AddTypeDefinitionInputObjectEnterEventHandler adds an event handler to be called when entering a TypeDefinitionInputObject node.
func (w *Strider) AddTypeDefinitionInputObjectEnterEventHandler(handler TypeDefinitionInputObjectEventHandler) {
	if w.typeDefinitionInputObjectEventHandlers == nil {
		w.typeDefinitionInputObjectEventHandlers = &TypeDefinitionInputObjectEventHandlers{}
	}
	w.typeDefinitionInputObjectEventHandlers.enter = append(w.typeDefinitionInputObjectEventHandlers.enter, handler)
}

// AddTypeDefinitionInputObjectLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionInputObject node.
func (w *Strider) AddTypeDefinitionInputObjectLeaveEventHandler(handler TypeDefinitionInputObjectEventHandler) {
	if w.typeDefinitionInputObjectEventHandlers == nil {
		w.typeDefinitionInputObjectEventHandlers = &TypeDefinitionInputObjectEventHandlers{}
	}
	w.typeDefinitionInputObjectEventHandlers.leave = append(w.typeDefinitionInputObjectEventHandlers.leave, handler)
}

// OnTypeDefinitionInputObjectEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionInputObjectEnter(tdio *TypeDefinition) {
	if w.typeDefinitionInputObjectEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionInputObjectEventHandlers.enter {
		handler(tdio)
	}
}

// OnTypeDefinitionInputObjectLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionInputObjectLeave(tdio *TypeDefinition) {
	if w.typeDefinitionInputObjectEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionInputObjectEventHandlers.leave {
		handler(tdio)
	}
}

// TypeDefinitionInterfaceEventHandler function can handle enter/leave events for TypeDefinitionInterface.
type TypeDefinitionInterfaceEventHandler func(*TypeDefinition)

// TypeDefinitionInterfaceEventHandlers stores the enter and leave events handlers.
type TypeDefinitionInterfaceEventHandlers struct {
	enter []TypeDefinitionInterfaceEventHandler
	leave []TypeDefinitionInterfaceEventHandler
}

// AddTypeDefinitionInterfaceEnterEventHandler adds an event handler to be called when entering a TypeDefinitionInterface node.
func (w *Strider) AddTypeDefinitionInterfaceEnterEventHandler(handler TypeDefinitionInterfaceEventHandler) {
	if w.typeDefinitionInterfaceEventHandlers == nil {
		w.typeDefinitionInterfaceEventHandlers = &TypeDefinitionInterfaceEventHandlers{}
	}
	w.typeDefinitionInterfaceEventHandlers.enter = append(w.typeDefinitionInterfaceEventHandlers.enter, handler)
}

// AddTypeDefinitionInterfaceLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionInterface node.
func (w *Strider) AddTypeDefinitionInterfaceLeaveEventHandler(handler TypeDefinitionInterfaceEventHandler) {
	if w.typeDefinitionInterfaceEventHandlers == nil {
		w.typeDefinitionInterfaceEventHandlers = &TypeDefinitionInterfaceEventHandlers{}
	}
	w.typeDefinitionInterfaceEventHandlers.leave = append(w.typeDefinitionInterfaceEventHandlers.leave, handler)
}

// OnTypeDefinitionInterfaceEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionInterfaceEnter(tdi *TypeDefinition) {
	if w.typeDefinitionInterfaceEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionInterfaceEventHandlers.enter {
		handler(tdi)
	}
}

// OnTypeDefinitionInterfaceLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionInterfaceLeave(tdi *TypeDefinition) {
	if w.typeDefinitionInterfaceEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionInterfaceEventHandlers.leave {
		handler(tdi)
	}
}

// TypeDefinitionObjectEventHandler function can handle enter/leave events for TypeDefinitionObject.
type TypeDefinitionObjectEventHandler func(*TypeDefinition)

// TypeDefinitionObjectEventHandlers stores the enter and leave events handlers.
type TypeDefinitionObjectEventHandlers struct {
	enter []TypeDefinitionObjectEventHandler
	leave []TypeDefinitionObjectEventHandler
}

// AddTypeDefinitionObjectEnterEventHandler adds an event handler to be called when entering a TypeDefinitionObject node.
func (w *Strider) AddTypeDefinitionObjectEnterEventHandler(handler TypeDefinitionObjectEventHandler) {
	if w.typeDefinitionObjectEventHandlers == nil {
		w.typeDefinitionObjectEventHandlers = &TypeDefinitionObjectEventHandlers{}
	}
	w.typeDefinitionObjectEventHandlers.enter = append(w.typeDefinitionObjectEventHandlers.enter, handler)
}

// AddTypeDefinitionObjectLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionObject node.
func (w *Strider) AddTypeDefinitionObjectLeaveEventHandler(handler TypeDefinitionObjectEventHandler) {
	if w.typeDefinitionObjectEventHandlers == nil {
		w.typeDefinitionObjectEventHandlers = &TypeDefinitionObjectEventHandlers{}
	}
	w.typeDefinitionObjectEventHandlers.leave = append(w.typeDefinitionObjectEventHandlers.leave, handler)
}

// OnTypeDefinitionObjectEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionObjectEnter(tdo *TypeDefinition) {
	if w.typeDefinitionObjectEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionObjectEventHandlers.enter {
		handler(tdo)
	}
}

// OnTypeDefinitionObjectLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionObjectLeave(tdo *TypeDefinition) {
	if w.typeDefinitionObjectEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionObjectEventHandlers.leave {
		handler(tdo)
	}
}

// TypeDefinitionScalarEventHandler function can handle enter/leave events for TypeDefinitionScalar.
type TypeDefinitionScalarEventHandler func(*TypeDefinition)

// TypeDefinitionScalarEventHandlers stores the enter and leave events handlers.
type TypeDefinitionScalarEventHandlers struct {
	enter []TypeDefinitionScalarEventHandler
	leave []TypeDefinitionScalarEventHandler
}

// AddTypeDefinitionScalarEnterEventHandler adds an event handler to be called when entering a TypeDefinitionScalar node.
func (w *Strider) AddTypeDefinitionScalarEnterEventHandler(handler TypeDefinitionScalarEventHandler) {
	if w.typeDefinitionScalarEventHandlers == nil {
		w.typeDefinitionScalarEventHandlers = &TypeDefinitionScalarEventHandlers{}
	}
	w.typeDefinitionScalarEventHandlers.enter = append(w.typeDefinitionScalarEventHandlers.enter, handler)
}

// AddTypeDefinitionScalarLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionScalar node.
func (w *Strider) AddTypeDefinitionScalarLeaveEventHandler(handler TypeDefinitionScalarEventHandler) {
	if w.typeDefinitionScalarEventHandlers == nil {
		w.typeDefinitionScalarEventHandlers = &TypeDefinitionScalarEventHandlers{}
	}
	w.typeDefinitionScalarEventHandlers.leave = append(w.typeDefinitionScalarEventHandlers.leave, handler)
}

// OnTypeDefinitionScalarEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionScalarEnter(tds *TypeDefinition) {
	if w.typeDefinitionScalarEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionScalarEventHandlers.enter {
		handler(tds)
	}
}

// OnTypeDefinitionScalarLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionScalarLeave(tds *TypeDefinition) {
	if w.typeDefinitionScalarEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionScalarEventHandlers.leave {
		handler(tds)
	}
}

// TypeDefinitionUnionEventHandler function can handle enter/leave events for TypeDefinitionUnion.
type TypeDefinitionUnionEventHandler func(*TypeDefinition)

// TypeDefinitionUnionEventHandlers stores the enter and leave events handlers.
type TypeDefinitionUnionEventHandlers struct {
	enter []TypeDefinitionUnionEventHandler
	leave []TypeDefinitionUnionEventHandler
}

// AddTypeDefinitionUnionEnterEventHandler adds an event handler to be called when entering a TypeDefinitionUnion node.
func (w *Strider) AddTypeDefinitionUnionEnterEventHandler(handler TypeDefinitionUnionEventHandler) {
	if w.typeDefinitionUnionEventHandlers == nil {
		w.typeDefinitionUnionEventHandlers = &TypeDefinitionUnionEventHandlers{}
	}
	w.typeDefinitionUnionEventHandlers.enter = append(w.typeDefinitionUnionEventHandlers.enter, handler)
}

// AddTypeDefinitionUnionLeaveEventHandler adds an event handler to be called when leaving a TypeDefinitionUnion node.
func (w *Strider) AddTypeDefinitionUnionLeaveEventHandler(handler TypeDefinitionUnionEventHandler) {
	if w.typeDefinitionUnionEventHandlers == nil {
		w.typeDefinitionUnionEventHandlers = &TypeDefinitionUnionEventHandlers{}
	}
	w.typeDefinitionUnionEventHandlers.leave = append(w.typeDefinitionUnionEventHandlers.leave, handler)
}

// OnTypeDefinitionUnionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionUnionEnter(tdu *TypeDefinition) {
	if w.typeDefinitionUnionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionUnionEventHandlers.enter {
		handler(tdu)
	}
}

// OnTypeDefinitionUnionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeDefinitionUnionLeave(tdu *TypeDefinition) {
	if w.typeDefinitionUnionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeDefinitionUnionEventHandlers.leave {
		handler(tdu)
	}
}

// TypeExtensionEventHandler function can handle enter/leave events for TypeExtension.
type TypeExtensionEventHandler func(*TypeExtension)

// TypeExtensionEventHandlers stores the enter and leave events handlers.
type TypeExtensionEventHandlers struct {
	enter []TypeExtensionEventHandler
	leave []TypeExtensionEventHandler
}

// AddTypeExtensionEnterEventHandler adds an event handler to be called when entering a TypeExtension node.
func (w *Strider) AddTypeExtensionEnterEventHandler(handler TypeExtensionEventHandler) {
	if w.typeExtensionEventHandlers == nil {
		w.typeExtensionEventHandlers = &TypeExtensionEventHandlers{}
	}
	w.typeExtensionEventHandlers.enter = append(w.typeExtensionEventHandlers.enter, handler)
}

// AddTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a TypeExtension node.
func (w *Strider) AddTypeExtensionLeaveEventHandler(handler TypeExtensionEventHandler) {
	if w.typeExtensionEventHandlers == nil {
		w.typeExtensionEventHandlers = &TypeExtensionEventHandlers{}
	}
	w.typeExtensionEventHandlers.leave = append(w.typeExtensionEventHandlers.leave, handler)
}

// OnTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeExtensionEnter(te *TypeExtension) {
	if w.typeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeExtensionEventHandlers.enter {
		handler(te)
	}
}

// OnTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeExtensionLeave(te *TypeExtension) {
	if w.typeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeExtensionEventHandlers.leave {
		handler(te)
	}
}

// TypeSystemDefinitionEventHandler function can handle enter/leave events for TypeSystemDefinition.
type TypeSystemDefinitionEventHandler func(*TypeSystemDefinition)

// TypeSystemDefinitionEventHandlers stores the enter and leave events handlers.
type TypeSystemDefinitionEventHandlers struct {
	enter []TypeSystemDefinitionEventHandler
	leave []TypeSystemDefinitionEventHandler
}

// AddTypeSystemDefinitionEnterEventHandler adds an event handler to be called when entering a TypeSystemDefinition node.
func (w *Strider) AddTypeSystemDefinitionEnterEventHandler(handler TypeSystemDefinitionEventHandler) {
	if w.typeSystemDefinitionEventHandlers == nil {
		w.typeSystemDefinitionEventHandlers = &TypeSystemDefinitionEventHandlers{}
	}
	w.typeSystemDefinitionEventHandlers.enter = append(w.typeSystemDefinitionEventHandlers.enter, handler)
}

// AddTypeSystemDefinitionLeaveEventHandler adds an event handler to be called when leaving a TypeSystemDefinition node.
func (w *Strider) AddTypeSystemDefinitionLeaveEventHandler(handler TypeSystemDefinitionEventHandler) {
	if w.typeSystemDefinitionEventHandlers == nil {
		w.typeSystemDefinitionEventHandlers = &TypeSystemDefinitionEventHandlers{}
	}
	w.typeSystemDefinitionEventHandlers.leave = append(w.typeSystemDefinitionEventHandlers.leave, handler)
}

// OnTypeSystemDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeSystemDefinitionEnter(tsd *TypeSystemDefinition) {
	if w.typeSystemDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeSystemDefinitionEventHandlers.enter {
		handler(tsd)
	}
}

// OnTypeSystemDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeSystemDefinitionLeave(tsd *TypeSystemDefinition) {
	if w.typeSystemDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeSystemDefinitionEventHandlers.leave {
		handler(tsd)
	}
}

// TypeSystemExtensionEventHandler function can handle enter/leave events for TypeSystemExtension.
type TypeSystemExtensionEventHandler func(*TypeSystemExtension)

// TypeSystemExtensionEventHandlers stores the enter and leave events handlers.
type TypeSystemExtensionEventHandlers struct {
	enter []TypeSystemExtensionEventHandler
	leave []TypeSystemExtensionEventHandler
}

// AddTypeSystemExtensionEnterEventHandler adds an event handler to be called when entering a TypeSystemExtension node.
func (w *Strider) AddTypeSystemExtensionEnterEventHandler(handler TypeSystemExtensionEventHandler) {
	if w.typeSystemExtensionEventHandlers == nil {
		w.typeSystemExtensionEventHandlers = &TypeSystemExtensionEventHandlers{}
	}
	w.typeSystemExtensionEventHandlers.enter = append(w.typeSystemExtensionEventHandlers.enter, handler)
}

// AddTypeSystemExtensionLeaveEventHandler adds an event handler to be called when leaving a TypeSystemExtension node.
func (w *Strider) AddTypeSystemExtensionLeaveEventHandler(handler TypeSystemExtensionEventHandler) {
	if w.typeSystemExtensionEventHandlers == nil {
		w.typeSystemExtensionEventHandlers = &TypeSystemExtensionEventHandlers{}
	}
	w.typeSystemExtensionEventHandlers.leave = append(w.typeSystemExtensionEventHandlers.leave, handler)
}

// OnTypeSystemExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnTypeSystemExtensionEnter(tse *TypeSystemExtension) {
	if w.typeSystemExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeSystemExtensionEventHandlers.enter {
		handler(tse)
	}
}

// OnTypeSystemExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnTypeSystemExtensionLeave(tse *TypeSystemExtension) {
	if w.typeSystemExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.typeSystemExtensionEventHandlers.leave {
		handler(tse)
	}
}

// UnionMemberTypesEventHandler function can handle enter/leave events for UnionMemberTypes.
type UnionMemberTypesEventHandler func(*Types)

// UnionMemberTypesEventHandlers stores the enter and leave events handlers.
type UnionMemberTypesEventHandlers struct {
	enter []UnionMemberTypesEventHandler
	leave []UnionMemberTypesEventHandler
}

// AddUnionMemberTypesEnterEventHandler adds an event handler to be called when entering a UnionMemberTypes node.
func (w *Strider) AddUnionMemberTypesEnterEventHandler(handler UnionMemberTypesEventHandler) {
	if w.unionMemberTypesEventHandlers == nil {
		w.unionMemberTypesEventHandlers = &UnionMemberTypesEventHandlers{}
	}
	w.unionMemberTypesEventHandlers.enter = append(w.unionMemberTypesEventHandlers.enter, handler)
}

// AddUnionMemberTypesLeaveEventHandler adds an event handler to be called when leaving a UnionMemberTypes node.
func (w *Strider) AddUnionMemberTypesLeaveEventHandler(handler UnionMemberTypesEventHandler) {
	if w.unionMemberTypesEventHandlers == nil {
		w.unionMemberTypesEventHandlers = &UnionMemberTypesEventHandlers{}
	}
	w.unionMemberTypesEventHandlers.leave = append(w.unionMemberTypesEventHandlers.leave, handler)
}

// OnUnionMemberTypesEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnUnionMemberTypesEnter(umt *Types) {
	if w.unionMemberTypesEventHandlers == nil {
		return
	}

	for _, handler := range w.unionMemberTypesEventHandlers.enter {
		handler(umt)
	}
}

// OnUnionMemberTypesLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnUnionMemberTypesLeave(umt *Types) {
	if w.unionMemberTypesEventHandlers == nil {
		return
	}

	for _, handler := range w.unionMemberTypesEventHandlers.leave {
		handler(umt)
	}
}

// UnionTypeExtensionEventHandler function can handle enter/leave events for UnionTypeExtension.
type UnionTypeExtensionEventHandler func(*TypeExtension)

// UnionTypeExtensionEventHandlers stores the enter and leave events handlers.
type UnionTypeExtensionEventHandlers struct {
	enter []UnionTypeExtensionEventHandler
	leave []UnionTypeExtensionEventHandler
}

// AddUnionTypeExtensionEnterEventHandler adds an event handler to be called when entering a UnionTypeExtension node.
func (w *Strider) AddUnionTypeExtensionEnterEventHandler(handler UnionTypeExtensionEventHandler) {
	if w.unionTypeExtensionEventHandlers == nil {
		w.unionTypeExtensionEventHandlers = &UnionTypeExtensionEventHandlers{}
	}
	w.unionTypeExtensionEventHandlers.enter = append(w.unionTypeExtensionEventHandlers.enter, handler)
}

// AddUnionTypeExtensionLeaveEventHandler adds an event handler to be called when leaving a UnionTypeExtension node.
func (w *Strider) AddUnionTypeExtensionLeaveEventHandler(handler UnionTypeExtensionEventHandler) {
	if w.unionTypeExtensionEventHandlers == nil {
		w.unionTypeExtensionEventHandlers = &UnionTypeExtensionEventHandlers{}
	}
	w.unionTypeExtensionEventHandlers.leave = append(w.unionTypeExtensionEventHandlers.leave, handler)
}

// OnUnionTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnUnionTypeExtensionEnter(ute *TypeExtension) {
	if w.unionTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.unionTypeExtensionEventHandlers.enter {
		handler(ute)
	}
}

// OnUnionTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnUnionTypeExtensionLeave(ute *TypeExtension) {
	if w.unionTypeExtensionEventHandlers == nil {
		return
	}

	for _, handler := range w.unionTypeExtensionEventHandlers.leave {
		handler(ute)
	}
}

// ValueEventHandler function can handle enter/leave events for Value.
type ValueEventHandler func(Value)

// ValueEventHandlers stores the enter and leave events handlers.
type ValueEventHandlers struct {
	enter []ValueEventHandler
	leave []ValueEventHandler
}

// AddValueEnterEventHandler adds an event handler to be called when entering a Value node.
func (w *Strider) AddValueEnterEventHandler(handler ValueEventHandler) {
	if w.valueEventHandlers == nil {
		w.valueEventHandlers = &ValueEventHandlers{}
	}
	w.valueEventHandlers.enter = append(w.valueEventHandlers.enter, handler)
}

// AddValueLeaveEventHandler adds an event handler to be called when leaving a Value node.
func (w *Strider) AddValueLeaveEventHandler(handler ValueEventHandler) {
	if w.valueEventHandlers == nil {
		w.valueEventHandlers = &ValueEventHandlers{}
	}
	w.valueEventHandlers.leave = append(w.valueEventHandlers.leave, handler)
}

// OnValueEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnValueEnter(v Value) {
	if w.valueEventHandlers == nil {
		return
	}

	for _, handler := range w.valueEventHandlers.enter {
		handler(v)
	}
}

// OnValueLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnValueLeave(v Value) {
	if w.valueEventHandlers == nil {
		return
	}

	for _, handler := range w.valueEventHandlers.leave {
		handler(v)
	}
}

// VariableDefinitionEventHandler function can handle enter/leave events for VariableDefinition.
type VariableDefinitionEventHandler func(VariableDefinition)

// VariableDefinitionEventHandlers stores the enter and leave events handlers.
type VariableDefinitionEventHandlers struct {
	enter []VariableDefinitionEventHandler
	leave []VariableDefinitionEventHandler
}

// AddVariableDefinitionEnterEventHandler adds an event handler to be called when entering a VariableDefinition node.
func (w *Strider) AddVariableDefinitionEnterEventHandler(handler VariableDefinitionEventHandler) {
	if w.variableDefinitionEventHandlers == nil {
		w.variableDefinitionEventHandlers = &VariableDefinitionEventHandlers{}
	}
	w.variableDefinitionEventHandlers.enter = append(w.variableDefinitionEventHandlers.enter, handler)
}

// AddVariableDefinitionLeaveEventHandler adds an event handler to be called when leaving a VariableDefinition node.
func (w *Strider) AddVariableDefinitionLeaveEventHandler(handler VariableDefinitionEventHandler) {
	if w.variableDefinitionEventHandlers == nil {
		w.variableDefinitionEventHandlers = &VariableDefinitionEventHandlers{}
	}
	w.variableDefinitionEventHandlers.leave = append(w.variableDefinitionEventHandlers.leave, handler)
}

// OnVariableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnVariableDefinitionEnter(vd VariableDefinition) {
	if w.variableDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.variableDefinitionEventHandlers.enter {
		handler(vd)
	}
}

// OnVariableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnVariableDefinitionLeave(vd VariableDefinition) {
	if w.variableDefinitionEventHandlers == nil {
		return
	}

	for _, handler := range w.variableDefinitionEventHandlers.leave {
		handler(vd)
	}
}

// VariableDefinitionsEventHandler function can handle enter/leave events for VariableDefinitions.
type VariableDefinitionsEventHandler func(*VariableDefinitions)

// VariableDefinitionsEventHandlers stores the enter and leave events handlers.
type VariableDefinitionsEventHandlers struct {
	enter []VariableDefinitionsEventHandler
	leave []VariableDefinitionsEventHandler
}

// AddVariableDefinitionsEnterEventHandler adds an event handler to be called when entering a VariableDefinitions node.
func (w *Strider) AddVariableDefinitionsEnterEventHandler(handler VariableDefinitionsEventHandler) {
	if w.variableDefinitionsEventHandlers == nil {
		w.variableDefinitionsEventHandlers = &VariableDefinitionsEventHandlers{}
	}
	w.variableDefinitionsEventHandlers.enter = append(w.variableDefinitionsEventHandlers.enter, handler)
}

// AddVariableDefinitionsLeaveEventHandler adds an event handler to be called when leaving a VariableDefinitions node.
func (w *Strider) AddVariableDefinitionsLeaveEventHandler(handler VariableDefinitionsEventHandler) {
	if w.variableDefinitionsEventHandlers == nil {
		w.variableDefinitionsEventHandlers = &VariableDefinitionsEventHandlers{}
	}
	w.variableDefinitionsEventHandlers.leave = append(w.variableDefinitionsEventHandlers.leave, handler)
}

// OnVariableDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Strider) OnVariableDefinitionsEnter(vd *VariableDefinitions) {
	if w.variableDefinitionsEventHandlers == nil {
		return
	}

	for _, handler := range w.variableDefinitionsEventHandlers.enter {
		handler(vd)
	}
}

// OnVariableDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Strider) OnVariableDefinitionsLeave(vd *VariableDefinitions) {
	if w.variableDefinitionsEventHandlers == nil {
		return
	}

	for _, handler := range w.variableDefinitionsEventHandlers.leave {
		handler(vd)
	}
}
