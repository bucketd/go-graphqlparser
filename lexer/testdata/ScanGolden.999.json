{
  "Input": "\n\t\t# Mutation for testing different token types.\n\t\tmutation {\n\t\t\tcreatePost(\n\t\t\t\tid: 1024\n\t\t\t\ttitle: \"String Value\"\n\t\t\t\tcontent: \"\"\"\n\t\t\t\t\tHello,\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\t\tWelcome to GraphQL.\n\t\t\t\t\t\tLet's make this string a little bigger then. Because the larger this string\n\t\t\t\t\t\tbecomes, the more efficient our lexer should look...\n\n\t\t\t\t\tFrom, Bucketd\n\t\t\t\t\"\"\"\n\t\t\t\treadTime: 2.742\n\t\t\t)\n\t\t}\n\t",
  "Tokens": [
    {
      "Type": 2,
      "Literal": "mutation",
      "Position": 3,
      "Line": 3
    },
    {
      "Type": 1,
      "Literal": "{",
      "Position": 12,
      "Line": 3
    },
    {
      "Type": 2,
      "Literal": "createPost",
      "Position": 4,
      "Line": 4
    },
    {
      "Type": 1,
      "Literal": "(",
      "Position": 14,
      "Line": 4
    },
    {
      "Type": 2,
      "Literal": "id",
      "Position": 5,
      "Line": 5
    },
    {
      "Type": 1,
      "Literal": ":",
      "Position": 7,
      "Line": 5
    },
    {
      "Type": 3,
      "Literal": "1024",
      "Position": 9,
      "Line": 5
    },
    {
      "Type": 2,
      "Literal": "title",
      "Position": 5,
      "Line": 6
    },
    {
      "Type": 1,
      "Literal": ":",
      "Position": 10,
      "Line": 6
    },
    {
      "Type": 5,
      "Literal": "String Value",
      "Position": 12,
      "Line": 6
    },
    {
      "Type": 2,
      "Literal": "content",
      "Position": 5,
      "Line": 7
    },
    {
      "Type": 1,
      "Literal": ":",
      "Position": 12,
      "Line": 7
    },
    {
      "Type": 5,
      "Literal": "Hello,\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\n\tWelcome to GraphQL.\n\tLet's make this string a little bigger then. Because the larger this string\n\tbecomes, the more efficient our lexer should look...\n\nFrom, Bucketd",
      "Position": 16,
      "Line": 7
    },
    {
      "Type": 2,
      "Literal": "readTime",
      "Position": 5,
      "Line": 8
    },
    {
      "Type": 1,
      "Literal": ":",
      "Position": 13,
      "Line": 8
    },
    {
      "Type": 4,
      "Literal": "2.742",
      "Position": 15,
      "Line": 8
    },
    {
      "Type": 1,
      "Literal": ")",
      "Position": 4,
      "Line": 9
    },
    {
      "Type": 1,
      "Literal": "}",
      "Position": 3,
      "Line": 10
    },
    {
      "Type": 0,
      "Literal": "",
      "Position": 1,
      "Line": 11
    }
  ],
  "Errors": null
}