// Code generated by lab/walkergen
// DO NOT EDIT!
package validation

import "github.com/bucketd/go-graphqlparser/ast"

// Walker holds event handlers for entering and leaving AST nodes.
type Walker struct {
	argumentsEventHandlers ArgumentsEventHandlers
	argumentEventHandlers ArgumentEventHandlers
	definitionsEventHandlers DefinitionsEventHandlers
	definitionEventHandlers DefinitionEventHandlers
	directivesEventHandlers DirectivesEventHandlers
	directiveEventHandlers DirectiveEventHandlers
	directiveDefinitionEventHandlers DirectiveDefinitionEventHandlers
	enumValueDefinitionsEventHandlers EnumValueDefinitionsEventHandlers
	enumValueDefinitionEventHandlers EnumValueDefinitionEventHandlers
	executableDefinitionEventHandlers ExecutableDefinitionEventHandlers
	fieldDefinitionsEventHandlers FieldDefinitionsEventHandlers
	fieldDefinitionEventHandlers FieldDefinitionEventHandlers
	fragmentDefinitionEventHandlers FragmentDefinitionEventHandlers
	inputValueDefinitionsEventHandlers InputValueDefinitionsEventHandlers
	inputValueDefinitionEventHandlers InputValueDefinitionEventHandlers
	operationDefinitionEventHandlers OperationDefinitionEventHandlers
	operationTypeDefinitionsEventHandlers OperationTypeDefinitionsEventHandlers
	operationTypeDefinitionEventHandlers OperationTypeDefinitionEventHandlers
	rootOperationTypeDefinitionsEventHandlers RootOperationTypeDefinitionsEventHandlers
	rootOperationTypeDefinitionEventHandlers RootOperationTypeDefinitionEventHandlers
	schemaDefinitionEventHandlers SchemaDefinitionEventHandlers
	schemaExtensionEventHandlers SchemaExtensionEventHandlers
	selectionsEventHandlers SelectionsEventHandlers
	selectionEventHandlers SelectionEventHandlers
	typesEventHandlers TypesEventHandlers
	typeEventHandlers TypeEventHandlers
	typeConditionEventHandlers TypeConditionEventHandlers
	typeDefinitionEventHandlers TypeDefinitionEventHandlers
	typeExtensionEventHandlers TypeExtensionEventHandlers
	typeSystemDefinitionEventHandlers TypeSystemDefinitionEventHandlers
	typeSystemExtensionEventHandlers TypeSystemExtensionEventHandlers
	valueEventHandlers ValueEventHandlers
	variableDefinitionsEventHandlers VariableDefinitionsEventHandlers
	variableDefinitionEventHandlers VariableDefinitionEventHandlers
}

// NewWalker returns a new Walker instance.
func NewWalker(rules []RuleFunc) *Walker {
	walker := &Walker{}
	for _, rule := range rules {
		rule(walker)
	}

	return walker
}

// ArgumentsEventHandler function can handle enter/leave events for Arguments.
type ArgumentsEventHandler func(*Context, *ast.Arguments)

// ArgumentsEventHandlers stores the enter and leave events handlers.
type ArgumentsEventHandlers struct {
	enter []ArgumentsEventHandler
	leave []ArgumentsEventHandler
}

// AddArgumentsEnterEventHandler adds an event handler to be called when entering Arguments nodes.
func (w *Walker) AddArgumentsEnterEventHandler(h ArgumentsEventHandler) {
	w.argumentsEventHandlers.enter = append(w.argumentsEventHandlers.enter, h)
}

// AddArgumentsLeaveEventHandler adds an event handler to be called when leaving Arguments nodes.
func (w *Walker) AddArgumentsLeaveEventHandler(h ArgumentsEventHandler) {
	w.argumentsEventHandlers.leave = append(w.argumentsEventHandlers.leave, h)
}

// OnArgumentsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnArgumentsEnter(ctx *Context, n *ast.Arguments) {
	for _, handler := range w.argumentsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnArgumentsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnArgumentsLeave(ctx *Context, n *ast.Arguments) {
	for _, handler := range w.argumentsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkArguments ...
func (w *Walker) walkArguments(ctx *Context, as *ast.Arguments) {
	w.OnArgumentsEnter(ctx, as)
	as.ForEach(func(a ast.Argument, i int) {
		w.walkArgument(ctx, a)
	})
	w.OnArgumentsLeave(ctx, as)
}

// ArgumentEventHandler function can handle enter/leave events for Argument.
type ArgumentEventHandler func(*Context, ast.Argument)

// ArgumentEventHandlers stores the enter and leave events handlers.
type ArgumentEventHandlers struct {
	enter []ArgumentEventHandler
	leave []ArgumentEventHandler
}

// AddArgumentEnterEventHandler adds an event handler to be called when entering Argument nodes.
func (w *Walker) AddArgumentEnterEventHandler(h ArgumentEventHandler) {
	w.argumentEventHandlers.enter = append(w.argumentEventHandlers.enter, h)
}

// AddArgumentLeaveEventHandler adds an event handler to be called when leaving Argument nodes.
func (w *Walker) AddArgumentLeaveEventHandler(h ArgumentEventHandler) {
	w.argumentEventHandlers.leave = append(w.argumentEventHandlers.leave, h)
}

// OnArgumentEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnArgumentEnter(ctx *Context, n ast.Argument) {
	for _, handler := range w.argumentEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnArgumentLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnArgumentLeave(ctx *Context, n ast.Argument) {
	for _, handler := range w.argumentEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkArgument ...
func (w *Walker) walkArgument(ctx *Context, a ast.Argument) {
	w.OnArgumentEnter(ctx, a)
	w.OnArgumentLeave(ctx, a)
}

// DefinitionsEventHandler function can handle enter/leave events for Definitions.
type DefinitionsEventHandler func(*Context, *ast.Definitions)

// DefinitionsEventHandlers stores the enter and leave events handlers.
type DefinitionsEventHandlers struct {
	enter []DefinitionsEventHandler
	leave []DefinitionsEventHandler
}

// AddDefinitionsEnterEventHandler adds an event handler to be called when entering Definitions nodes.
func (w *Walker) AddDefinitionsEnterEventHandler(h DefinitionsEventHandler) {
	w.definitionsEventHandlers.enter = append(w.definitionsEventHandlers.enter, h)
}

// AddDefinitionsLeaveEventHandler adds an event handler to be called when leaving Definitions nodes.
func (w *Walker) AddDefinitionsLeaveEventHandler(h DefinitionsEventHandler) {
	w.definitionsEventHandlers.leave = append(w.definitionsEventHandlers.leave, h)
}

// OnDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDefinitionsEnter(ctx *Context, n *ast.Definitions) {
	for _, handler := range w.definitionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDefinitionsLeave(ctx *Context, n *ast.Definitions) {
	for _, handler := range w.definitionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkDefinitions ...
func (w *Walker) walkDefinitions(ctx *Context, ds *ast.Definitions) {
	w.OnDefinitionsEnter(ctx, ds)
	ds.ForEach(func(d ast.Definition, i int) {
		w.walkDefinition(ctx, d)
	})
	w.OnDefinitionsLeave(ctx, ds)
}

// DefinitionEventHandler function can handle enter/leave events for Definition.
type DefinitionEventHandler func(*Context, ast.Definition)

// DefinitionEventHandlers stores the enter and leave events handlers.
type DefinitionEventHandlers struct {
	enter []DefinitionEventHandler
	leave []DefinitionEventHandler
}

// AddDefinitionEnterEventHandler adds an event handler to be called when entering Definition nodes.
func (w *Walker) AddDefinitionEnterEventHandler(h DefinitionEventHandler) {
	w.definitionEventHandlers.enter = append(w.definitionEventHandlers.enter, h)
}

// AddDefinitionLeaveEventHandler adds an event handler to be called when leaving Definition nodes.
func (w *Walker) AddDefinitionLeaveEventHandler(h DefinitionEventHandler) {
	w.definitionEventHandlers.leave = append(w.definitionEventHandlers.leave, h)
}

// OnDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDefinitionEnter(ctx *Context, n ast.Definition) {
	for _, handler := range w.definitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDefinitionLeave(ctx *Context, n ast.Definition) {
	for _, handler := range w.definitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkDefinition ...
func (w *Walker) walkDefinition(ctx *Context, d ast.Definition) {
	w.OnDefinitionEnter(ctx, d)
	switch d.Kind {
	case ast.DefinitionKindExecutable:
		w.walkDefinitionKindExecutable(ctx, d.ExecutableDefinition)
	case ast.DefinitionKindTypeSystem:
		w.walkDefinitionKindTypeSystem(ctx, d.TypeSystemDefinition)
	case ast.DefinitionKindTypeSystemExtension:
		w.walkDefinitionKindTypeSystemExtension(ctx, d.TypeSystemExtension)
	}
	w.OnDefinitionLeave(ctx, d)
}

// DirectivesEventHandler function can handle enter/leave events for Directives.
type DirectivesEventHandler func(*Context, *ast.Directives)

// DirectivesEventHandlers stores the enter and leave events handlers.
type DirectivesEventHandlers struct {
	enter []DirectivesEventHandler
	leave []DirectivesEventHandler
}

// AddDirectivesEnterEventHandler adds an event handler to be called when entering Directives nodes.
func (w *Walker) AddDirectivesEnterEventHandler(h DirectivesEventHandler) {
	w.directivesEventHandlers.enter = append(w.directivesEventHandlers.enter, h)
}

// AddDirectivesLeaveEventHandler adds an event handler to be called when leaving Directives nodes.
func (w *Walker) AddDirectivesLeaveEventHandler(h DirectivesEventHandler) {
	w.directivesEventHandlers.leave = append(w.directivesEventHandlers.leave, h)
}

// OnDirectivesEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectivesEnter(ctx *Context, n *ast.Directives) {
	for _, handler := range w.directivesEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnDirectivesLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectivesLeave(ctx *Context, n *ast.Directives) {
	for _, handler := range w.directivesEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkDirectives ...
func (w *Walker) walkDirectives(ctx *Context, ds *ast.Directives) {
	w.OnDirectivesEnter(ctx, ds)
	ds.ForEach(func(d ast.Directive, i int) {
		w.walkDirective(ctx, d)
	})
	w.OnDirectivesLeave(ctx, ds)
}

// DirectiveEventHandler function can handle enter/leave events for Directive.
type DirectiveEventHandler func(*Context, ast.Directive)

// DirectiveEventHandlers stores the enter and leave events handlers.
type DirectiveEventHandlers struct {
	enter []DirectiveEventHandler
	leave []DirectiveEventHandler
}

// AddDirectiveEnterEventHandler adds an event handler to be called when entering Directive nodes.
func (w *Walker) AddDirectiveEnterEventHandler(h DirectiveEventHandler) {
	w.directiveEventHandlers.enter = append(w.directiveEventHandlers.enter, h)
}

// AddDirectiveLeaveEventHandler adds an event handler to be called when leaving Directive nodes.
func (w *Walker) AddDirectiveLeaveEventHandler(h DirectiveEventHandler) {
	w.directiveEventHandlers.leave = append(w.directiveEventHandlers.leave, h)
}

// OnDirectiveEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectiveEnter(ctx *Context, n ast.Directive) {
	for _, handler := range w.directiveEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnDirectiveLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectiveLeave(ctx *Context, n ast.Directive) {
	for _, handler := range w.directiveEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkDirective ...
func (w *Walker) walkDirective(ctx *Context, d ast.Directive) {
	w.OnDirectiveEnter(ctx, d)
	w.OnDirectiveLeave(ctx, d)
}

// DirectiveDefinitionEventHandler function can handle enter/leave events for DirectiveDefinition.
type DirectiveDefinitionEventHandler func(*Context, *ast.DirectiveDefinition)

// DirectiveDefinitionEventHandlers stores the enter and leave events handlers.
type DirectiveDefinitionEventHandlers struct {
	enter []DirectiveDefinitionEventHandler
	leave []DirectiveDefinitionEventHandler
}

// AddDirectiveDefinitionEnterEventHandler adds an event handler to be called when entering DirectiveDefinition nodes.
func (w *Walker) AddDirectiveDefinitionEnterEventHandler(h DirectiveDefinitionEventHandler) {
	w.directiveDefinitionEventHandlers.enter = append(w.directiveDefinitionEventHandlers.enter, h)
}

// AddDirectiveDefinitionLeaveEventHandler adds an event handler to be called when leaving DirectiveDefinition nodes.
func (w *Walker) AddDirectiveDefinitionLeaveEventHandler(h DirectiveDefinitionEventHandler) {
	w.directiveDefinitionEventHandlers.leave = append(w.directiveDefinitionEventHandlers.leave, h)
}

// OnDirectiveDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnDirectiveDefinitionEnter(ctx *Context, n *ast.DirectiveDefinition) {
	for _, handler := range w.directiveDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnDirectiveDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnDirectiveDefinitionLeave(ctx *Context, n *ast.DirectiveDefinition) {
	for _, handler := range w.directiveDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkDirectiveDefinition ...
func (w *Walker) walkDirectiveDefinition(ctx *Context, dd *ast.DirectiveDefinition) {
	w.OnDirectiveDefinitionEnter(ctx, dd)
	w.OnDirectiveDefinitionLeave(ctx, dd)
}

// EnumValueDefinitionsEventHandler function can handle enter/leave events for EnumValueDefinitions.
type EnumValueDefinitionsEventHandler func(*Context, *ast.EnumValueDefinitions)

// EnumValueDefinitionsEventHandlers stores the enter and leave events handlers.
type EnumValueDefinitionsEventHandlers struct {
	enter []EnumValueDefinitionsEventHandler
	leave []EnumValueDefinitionsEventHandler
}

// AddEnumValueDefinitionsEnterEventHandler adds an event handler to be called when entering EnumValueDefinitions nodes.
func (w *Walker) AddEnumValueDefinitionsEnterEventHandler(h EnumValueDefinitionsEventHandler) {
	w.enumValueDefinitionsEventHandlers.enter = append(w.enumValueDefinitionsEventHandlers.enter, h)
}

// AddEnumValueDefinitionsLeaveEventHandler adds an event handler to be called when leaving EnumValueDefinitions nodes.
func (w *Walker) AddEnumValueDefinitionsLeaveEventHandler(h EnumValueDefinitionsEventHandler) {
	w.enumValueDefinitionsEventHandlers.leave = append(w.enumValueDefinitionsEventHandlers.leave, h)
}

// OnEnumValueDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionsEnter(ctx *Context, n *ast.EnumValueDefinitions) {
	for _, handler := range w.enumValueDefinitionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnEnumValueDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionsLeave(ctx *Context, n *ast.EnumValueDefinitions) {
	for _, handler := range w.enumValueDefinitionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkEnumValueDefinitions ...
func (w *Walker) walkEnumValueDefinitions(ctx *Context, evds *ast.EnumValueDefinitions) {
	w.OnEnumValueDefinitionsEnter(ctx, evds)
	evds.ForEach(func(evd ast.EnumValueDefinition, i int) {
		w.walkEnumValueDefinition(ctx, evd)
	})
	w.OnEnumValueDefinitionsLeave(ctx, evds)
}

// EnumValueDefinitionEventHandler function can handle enter/leave events for EnumValueDefinition.
type EnumValueDefinitionEventHandler func(*Context, ast.EnumValueDefinition)

// EnumValueDefinitionEventHandlers stores the enter and leave events handlers.
type EnumValueDefinitionEventHandlers struct {
	enter []EnumValueDefinitionEventHandler
	leave []EnumValueDefinitionEventHandler
}

// AddEnumValueDefinitionEnterEventHandler adds an event handler to be called when entering EnumValueDefinition nodes.
func (w *Walker) AddEnumValueDefinitionEnterEventHandler(h EnumValueDefinitionEventHandler) {
	w.enumValueDefinitionEventHandlers.enter = append(w.enumValueDefinitionEventHandlers.enter, h)
}

// AddEnumValueDefinitionLeaveEventHandler adds an event handler to be called when leaving EnumValueDefinition nodes.
func (w *Walker) AddEnumValueDefinitionLeaveEventHandler(h EnumValueDefinitionEventHandler) {
	w.enumValueDefinitionEventHandlers.leave = append(w.enumValueDefinitionEventHandlers.leave, h)
}

// OnEnumValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionEnter(ctx *Context, n ast.EnumValueDefinition) {
	for _, handler := range w.enumValueDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnEnumValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnEnumValueDefinitionLeave(ctx *Context, n ast.EnumValueDefinition) {
	for _, handler := range w.enumValueDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkEnumValueDefinition ...
func (w *Walker) walkEnumValueDefinition(ctx *Context, evd ast.EnumValueDefinition) {
	w.OnEnumValueDefinitionEnter(ctx, evd)
	w.OnEnumValueDefinitionLeave(ctx, evd)
}

// ExecutableDefinitionEventHandler function can handle enter/leave events for ExecutableDefinition.
type ExecutableDefinitionEventHandler func(*Context, *ast.ExecutableDefinition)

// ExecutableDefinitionEventHandlers stores the enter and leave events handlers.
type ExecutableDefinitionEventHandlers struct {
	enter []ExecutableDefinitionEventHandler
	leave []ExecutableDefinitionEventHandler
}

// AddExecutableDefinitionEnterEventHandler adds an event handler to be called when entering ExecutableDefinition nodes.
func (w *Walker) AddExecutableDefinitionEnterEventHandler(h ExecutableDefinitionEventHandler) {
	w.executableDefinitionEventHandlers.enter = append(w.executableDefinitionEventHandlers.enter, h)
}

// AddExecutableDefinitionLeaveEventHandler adds an event handler to be called when leaving ExecutableDefinition nodes.
func (w *Walker) AddExecutableDefinitionLeaveEventHandler(h ExecutableDefinitionEventHandler) {
	w.executableDefinitionEventHandlers.leave = append(w.executableDefinitionEventHandlers.leave, h)
}

// OnExecutableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnExecutableDefinitionEnter(ctx *Context, n *ast.ExecutableDefinition) {
	for _, handler := range w.executableDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnExecutableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnExecutableDefinitionLeave(ctx *Context, n *ast.ExecutableDefinition) {
	for _, handler := range w.executableDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkExecutableDefinition ...
func (w *Walker) walkExecutableDefinition(ctx *Context, ed *ast.ExecutableDefinition) {
	w.OnExecutableDefinitionEnter(ctx, ed)
	switch ed.Kind {
	case ast.ExecutableDefinitionKindOperation:
		w.walkExecutableDefinitionKindOperation(ctx, ed.OperationDefinition)
	case ast.ExecutableDefinitionKindFragment:
		w.walkExecutableDefinitionKindFragment(ctx, ed.FragmentDefinition)
	}
	w.OnExecutableDefinitionLeave(ctx, ed)
}

// FieldDefinitionsEventHandler function can handle enter/leave events for FieldDefinitions.
type FieldDefinitionsEventHandler func(*Context, *ast.FieldDefinitions)

// FieldDefinitionsEventHandlers stores the enter and leave events handlers.
type FieldDefinitionsEventHandlers struct {
	enter []FieldDefinitionsEventHandler
	leave []FieldDefinitionsEventHandler
}

// AddFieldDefinitionsEnterEventHandler adds an event handler to be called when entering FieldDefinitions nodes.
func (w *Walker) AddFieldDefinitionsEnterEventHandler(h FieldDefinitionsEventHandler) {
	w.fieldDefinitionsEventHandlers.enter = append(w.fieldDefinitionsEventHandlers.enter, h)
}

// AddFieldDefinitionsLeaveEventHandler adds an event handler to be called when leaving FieldDefinitions nodes.
func (w *Walker) AddFieldDefinitionsLeaveEventHandler(h FieldDefinitionsEventHandler) {
	w.fieldDefinitionsEventHandlers.leave = append(w.fieldDefinitionsEventHandlers.leave, h)
}

// OnFieldDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionsEnter(ctx *Context, n *ast.FieldDefinitions) {
	for _, handler := range w.fieldDefinitionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnFieldDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionsLeave(ctx *Context, n *ast.FieldDefinitions) {
	for _, handler := range w.fieldDefinitionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkFieldDefinitions ...
func (w *Walker) walkFieldDefinitions(ctx *Context, fds *ast.FieldDefinitions) {
	w.OnFieldDefinitionsEnter(ctx, fds)
	fds.ForEach(func(fd ast.FieldDefinition, i int) {
		w.walkFieldDefinition(ctx, fd)
	})
	w.OnFieldDefinitionsLeave(ctx, fds)
}

// FieldDefinitionEventHandler function can handle enter/leave events for FieldDefinition.
type FieldDefinitionEventHandler func(*Context, ast.FieldDefinition)

// FieldDefinitionEventHandlers stores the enter and leave events handlers.
type FieldDefinitionEventHandlers struct {
	enter []FieldDefinitionEventHandler
	leave []FieldDefinitionEventHandler
}

// AddFieldDefinitionEnterEventHandler adds an event handler to be called when entering FieldDefinition nodes.
func (w *Walker) AddFieldDefinitionEnterEventHandler(h FieldDefinitionEventHandler) {
	w.fieldDefinitionEventHandlers.enter = append(w.fieldDefinitionEventHandlers.enter, h)
}

// AddFieldDefinitionLeaveEventHandler adds an event handler to be called when leaving FieldDefinition nodes.
func (w *Walker) AddFieldDefinitionLeaveEventHandler(h FieldDefinitionEventHandler) {
	w.fieldDefinitionEventHandlers.leave = append(w.fieldDefinitionEventHandlers.leave, h)
}

// OnFieldDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionEnter(ctx *Context, n ast.FieldDefinition) {
	for _, handler := range w.fieldDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnFieldDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFieldDefinitionLeave(ctx *Context, n ast.FieldDefinition) {
	for _, handler := range w.fieldDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkFieldDefinition ...
func (w *Walker) walkFieldDefinition(ctx *Context, fd ast.FieldDefinition) {
	w.OnFieldDefinitionEnter(ctx, fd)
	w.OnFieldDefinitionLeave(ctx, fd)
}

// FragmentDefinitionEventHandler function can handle enter/leave events for FragmentDefinition.
type FragmentDefinitionEventHandler func(*Context, *ast.FragmentDefinition)

// FragmentDefinitionEventHandlers stores the enter and leave events handlers.
type FragmentDefinitionEventHandlers struct {
	enter []FragmentDefinitionEventHandler
	leave []FragmentDefinitionEventHandler
}

// AddFragmentDefinitionEnterEventHandler adds an event handler to be called when entering FragmentDefinition nodes.
func (w *Walker) AddFragmentDefinitionEnterEventHandler(h FragmentDefinitionEventHandler) {
	w.fragmentDefinitionEventHandlers.enter = append(w.fragmentDefinitionEventHandlers.enter, h)
}

// AddFragmentDefinitionLeaveEventHandler adds an event handler to be called when leaving FragmentDefinition nodes.
func (w *Walker) AddFragmentDefinitionLeaveEventHandler(h FragmentDefinitionEventHandler) {
	w.fragmentDefinitionEventHandlers.leave = append(w.fragmentDefinitionEventHandlers.leave, h)
}

// OnFragmentDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnFragmentDefinitionEnter(ctx *Context, n *ast.FragmentDefinition) {
	for _, handler := range w.fragmentDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnFragmentDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnFragmentDefinitionLeave(ctx *Context, n *ast.FragmentDefinition) {
	for _, handler := range w.fragmentDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkFragmentDefinition ...
func (w *Walker) walkFragmentDefinition(ctx *Context, fd *ast.FragmentDefinition) {
	w.OnFragmentDefinitionEnter(ctx, fd)
	w.OnFragmentDefinitionLeave(ctx, fd)
}

// InputValueDefinitionsEventHandler function can handle enter/leave events for InputValueDefinitions.
type InputValueDefinitionsEventHandler func(*Context, *ast.InputValueDefinitions)

// InputValueDefinitionsEventHandlers stores the enter and leave events handlers.
type InputValueDefinitionsEventHandlers struct {
	enter []InputValueDefinitionsEventHandler
	leave []InputValueDefinitionsEventHandler
}

// AddInputValueDefinitionsEnterEventHandler adds an event handler to be called when entering InputValueDefinitions nodes.
func (w *Walker) AddInputValueDefinitionsEnterEventHandler(h InputValueDefinitionsEventHandler) {
	w.inputValueDefinitionsEventHandlers.enter = append(w.inputValueDefinitionsEventHandlers.enter, h)
}

// AddInputValueDefinitionsLeaveEventHandler adds an event handler to be called when leaving InputValueDefinitions nodes.
func (w *Walker) AddInputValueDefinitionsLeaveEventHandler(h InputValueDefinitionsEventHandler) {
	w.inputValueDefinitionsEventHandlers.leave = append(w.inputValueDefinitionsEventHandlers.leave, h)
}

// OnInputValueDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionsEnter(ctx *Context, n *ast.InputValueDefinitions) {
	for _, handler := range w.inputValueDefinitionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnInputValueDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionsLeave(ctx *Context, n *ast.InputValueDefinitions) {
	for _, handler := range w.inputValueDefinitionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkInputValueDefinitions ...
func (w *Walker) walkInputValueDefinitions(ctx *Context, ivds *ast.InputValueDefinitions) {
	w.OnInputValueDefinitionsEnter(ctx, ivds)
	ivds.ForEach(func(ivd ast.InputValueDefinition, i int) {
		w.walkInputValueDefinition(ctx, ivd)
	})
	w.OnInputValueDefinitionsLeave(ctx, ivds)
}

// InputValueDefinitionEventHandler function can handle enter/leave events for InputValueDefinition.
type InputValueDefinitionEventHandler func(*Context, ast.InputValueDefinition)

// InputValueDefinitionEventHandlers stores the enter and leave events handlers.
type InputValueDefinitionEventHandlers struct {
	enter []InputValueDefinitionEventHandler
	leave []InputValueDefinitionEventHandler
}

// AddInputValueDefinitionEnterEventHandler adds an event handler to be called when entering InputValueDefinition nodes.
func (w *Walker) AddInputValueDefinitionEnterEventHandler(h InputValueDefinitionEventHandler) {
	w.inputValueDefinitionEventHandlers.enter = append(w.inputValueDefinitionEventHandlers.enter, h)
}

// AddInputValueDefinitionLeaveEventHandler adds an event handler to be called when leaving InputValueDefinition nodes.
func (w *Walker) AddInputValueDefinitionLeaveEventHandler(h InputValueDefinitionEventHandler) {
	w.inputValueDefinitionEventHandlers.leave = append(w.inputValueDefinitionEventHandlers.leave, h)
}

// OnInputValueDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionEnter(ctx *Context, n ast.InputValueDefinition) {
	for _, handler := range w.inputValueDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnInputValueDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnInputValueDefinitionLeave(ctx *Context, n ast.InputValueDefinition) {
	for _, handler := range w.inputValueDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkInputValueDefinition ...
func (w *Walker) walkInputValueDefinition(ctx *Context, ivd ast.InputValueDefinition) {
	w.OnInputValueDefinitionEnter(ctx, ivd)
	w.OnInputValueDefinitionLeave(ctx, ivd)
}

// OperationDefinitionEventHandler function can handle enter/leave events for OperationDefinition.
type OperationDefinitionEventHandler func(*Context, *ast.OperationDefinition)

// OperationDefinitionEventHandlers stores the enter and leave events handlers.
type OperationDefinitionEventHandlers struct {
	enter []OperationDefinitionEventHandler
	leave []OperationDefinitionEventHandler
}

// AddOperationDefinitionEnterEventHandler adds an event handler to be called when entering OperationDefinition nodes.
func (w *Walker) AddOperationDefinitionEnterEventHandler(h OperationDefinitionEventHandler) {
	w.operationDefinitionEventHandlers.enter = append(w.operationDefinitionEventHandlers.enter, h)
}

// AddOperationDefinitionLeaveEventHandler adds an event handler to be called when leaving OperationDefinition nodes.
func (w *Walker) AddOperationDefinitionLeaveEventHandler(h OperationDefinitionEventHandler) {
	w.operationDefinitionEventHandlers.leave = append(w.operationDefinitionEventHandlers.leave, h)
}

// OnOperationDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationDefinitionEnter(ctx *Context, n *ast.OperationDefinition) {
	for _, handler := range w.operationDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnOperationDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationDefinitionLeave(ctx *Context, n *ast.OperationDefinition) {
	for _, handler := range w.operationDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkOperationDefinition ...
func (w *Walker) walkOperationDefinition(ctx *Context, od *ast.OperationDefinition) {
	w.OnOperationDefinitionEnter(ctx, od)
	switch od.Kind {
	case ast.OperationDefinitionKindQuery:
		w.walkOperationDefinitionKindQuery(ctx, od.QueryOperationDefinition)
	case ast.OperationDefinitionKindMutation:
		w.walkOperationDefinitionKindMutation(ctx, od.MutationOperationDefinition)
	case ast.OperationDefinitionKindSubscription:
		w.walkOperationDefinitionKindSubscription(ctx, od.SubscriptionOperationDefinition)
	}
	w.OnOperationDefinitionLeave(ctx, od)
}

// OperationTypeDefinitionsEventHandler function can handle enter/leave events for OperationTypeDefinitions.
type OperationTypeDefinitionsEventHandler func(*Context, *ast.OperationTypeDefinitions)

// OperationTypeDefinitionsEventHandlers stores the enter and leave events handlers.
type OperationTypeDefinitionsEventHandlers struct {
	enter []OperationTypeDefinitionsEventHandler
	leave []OperationTypeDefinitionsEventHandler
}

// AddOperationTypeDefinitionsEnterEventHandler adds an event handler to be called when entering OperationTypeDefinitions nodes.
func (w *Walker) AddOperationTypeDefinitionsEnterEventHandler(h OperationTypeDefinitionsEventHandler) {
	w.operationTypeDefinitionsEventHandlers.enter = append(w.operationTypeDefinitionsEventHandlers.enter, h)
}

// AddOperationTypeDefinitionsLeaveEventHandler adds an event handler to be called when leaving OperationTypeDefinitions nodes.
func (w *Walker) AddOperationTypeDefinitionsLeaveEventHandler(h OperationTypeDefinitionsEventHandler) {
	w.operationTypeDefinitionsEventHandlers.leave = append(w.operationTypeDefinitionsEventHandlers.leave, h)
}

// OnOperationTypeDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionsEnter(ctx *Context, n *ast.OperationTypeDefinitions) {
	for _, handler := range w.operationTypeDefinitionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnOperationTypeDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionsLeave(ctx *Context, n *ast.OperationTypeDefinitions) {
	for _, handler := range w.operationTypeDefinitionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkOperationTypeDefinitions ...
func (w *Walker) walkOperationTypeDefinitions(ctx *Context, otds *ast.OperationTypeDefinitions) {
	w.OnOperationTypeDefinitionsEnter(ctx, otds)
	otds.ForEach(func(otd ast.OperationTypeDefinition, i int) {
		w.walkOperationTypeDefinition(ctx, otd)
	})
	w.OnOperationTypeDefinitionsLeave(ctx, otds)
}

// OperationTypeDefinitionEventHandler function can handle enter/leave events for OperationTypeDefinition.
type OperationTypeDefinitionEventHandler func(*Context, ast.OperationTypeDefinition)

// OperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type OperationTypeDefinitionEventHandlers struct {
	enter []OperationTypeDefinitionEventHandler
	leave []OperationTypeDefinitionEventHandler
}

// AddOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering OperationTypeDefinition nodes.
func (w *Walker) AddOperationTypeDefinitionEnterEventHandler(h OperationTypeDefinitionEventHandler) {
	w.operationTypeDefinitionEventHandlers.enter = append(w.operationTypeDefinitionEventHandlers.enter, h)
}

// AddOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving OperationTypeDefinition nodes.
func (w *Walker) AddOperationTypeDefinitionLeaveEventHandler(h OperationTypeDefinitionEventHandler) {
	w.operationTypeDefinitionEventHandlers.leave = append(w.operationTypeDefinitionEventHandlers.leave, h)
}

// OnOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionEnter(ctx *Context, n ast.OperationTypeDefinition) {
	for _, handler := range w.operationTypeDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnOperationTypeDefinitionLeave(ctx *Context, n ast.OperationTypeDefinition) {
	for _, handler := range w.operationTypeDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkOperationTypeDefinition ...
func (w *Walker) walkOperationTypeDefinition(ctx *Context, otd ast.OperationTypeDefinition) {
	w.OnOperationTypeDefinitionEnter(ctx, otd)
	w.OnOperationTypeDefinitionLeave(ctx, otd)
}

// RootOperationTypeDefinitionsEventHandler function can handle enter/leave events for RootOperationTypeDefinitions.
type RootOperationTypeDefinitionsEventHandler func(*Context, *ast.RootOperationTypeDefinitions)

// RootOperationTypeDefinitionsEventHandlers stores the enter and leave events handlers.
type RootOperationTypeDefinitionsEventHandlers struct {
	enter []RootOperationTypeDefinitionsEventHandler
	leave []RootOperationTypeDefinitionsEventHandler
}

// AddRootOperationTypeDefinitionsEnterEventHandler adds an event handler to be called when entering RootOperationTypeDefinitions nodes.
func (w *Walker) AddRootOperationTypeDefinitionsEnterEventHandler(h RootOperationTypeDefinitionsEventHandler) {
	w.rootOperationTypeDefinitionsEventHandlers.enter = append(w.rootOperationTypeDefinitionsEventHandlers.enter, h)
}

// AddRootOperationTypeDefinitionsLeaveEventHandler adds an event handler to be called when leaving RootOperationTypeDefinitions nodes.
func (w *Walker) AddRootOperationTypeDefinitionsLeaveEventHandler(h RootOperationTypeDefinitionsEventHandler) {
	w.rootOperationTypeDefinitionsEventHandlers.leave = append(w.rootOperationTypeDefinitionsEventHandlers.leave, h)
}

// OnRootOperationTypeDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionsEnter(ctx *Context, n *ast.RootOperationTypeDefinitions) {
	for _, handler := range w.rootOperationTypeDefinitionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnRootOperationTypeDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionsLeave(ctx *Context, n *ast.RootOperationTypeDefinitions) {
	for _, handler := range w.rootOperationTypeDefinitionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkRootOperationTypeDefinitions ...
func (w *Walker) walkRootOperationTypeDefinitions(ctx *Context, rotds *ast.RootOperationTypeDefinitions) {
	w.OnRootOperationTypeDefinitionsEnter(ctx, rotds)
	rotds.ForEach(func(rotd ast.RootOperationTypeDefinition, i int) {
		w.walkRootOperationTypeDefinition(ctx, rotd)
	})
	w.OnRootOperationTypeDefinitionsLeave(ctx, rotds)
}

// RootOperationTypeDefinitionEventHandler function can handle enter/leave events for RootOperationTypeDefinition.
type RootOperationTypeDefinitionEventHandler func(*Context, ast.RootOperationTypeDefinition)

// RootOperationTypeDefinitionEventHandlers stores the enter and leave events handlers.
type RootOperationTypeDefinitionEventHandlers struct {
	enter []RootOperationTypeDefinitionEventHandler
	leave []RootOperationTypeDefinitionEventHandler
}

// AddRootOperationTypeDefinitionEnterEventHandler adds an event handler to be called when entering RootOperationTypeDefinition nodes.
func (w *Walker) AddRootOperationTypeDefinitionEnterEventHandler(h RootOperationTypeDefinitionEventHandler) {
	w.rootOperationTypeDefinitionEventHandlers.enter = append(w.rootOperationTypeDefinitionEventHandlers.enter, h)
}

// AddRootOperationTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving RootOperationTypeDefinition nodes.
func (w *Walker) AddRootOperationTypeDefinitionLeaveEventHandler(h RootOperationTypeDefinitionEventHandler) {
	w.rootOperationTypeDefinitionEventHandlers.leave = append(w.rootOperationTypeDefinitionEventHandlers.leave, h)
}

// OnRootOperationTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionEnter(ctx *Context, n ast.RootOperationTypeDefinition) {
	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnRootOperationTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnRootOperationTypeDefinitionLeave(ctx *Context, n ast.RootOperationTypeDefinition) {
	for _, handler := range w.rootOperationTypeDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkRootOperationTypeDefinition ...
func (w *Walker) walkRootOperationTypeDefinition(ctx *Context, rotd ast.RootOperationTypeDefinition) {
	w.OnRootOperationTypeDefinitionEnter(ctx, rotd)
	w.OnRootOperationTypeDefinitionLeave(ctx, rotd)
}

// SchemaDefinitionEventHandler function can handle enter/leave events for SchemaDefinition.
type SchemaDefinitionEventHandler func(*Context, *ast.SchemaDefinition)

// SchemaDefinitionEventHandlers stores the enter and leave events handlers.
type SchemaDefinitionEventHandlers struct {
	enter []SchemaDefinitionEventHandler
	leave []SchemaDefinitionEventHandler
}

// AddSchemaDefinitionEnterEventHandler adds an event handler to be called when entering SchemaDefinition nodes.
func (w *Walker) AddSchemaDefinitionEnterEventHandler(h SchemaDefinitionEventHandler) {
	w.schemaDefinitionEventHandlers.enter = append(w.schemaDefinitionEventHandlers.enter, h)
}

// AddSchemaDefinitionLeaveEventHandler adds an event handler to be called when leaving SchemaDefinition nodes.
func (w *Walker) AddSchemaDefinitionLeaveEventHandler(h SchemaDefinitionEventHandler) {
	w.schemaDefinitionEventHandlers.leave = append(w.schemaDefinitionEventHandlers.leave, h)
}

// OnSchemaDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSchemaDefinitionEnter(ctx *Context, n *ast.SchemaDefinition) {
	for _, handler := range w.schemaDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnSchemaDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSchemaDefinitionLeave(ctx *Context, n *ast.SchemaDefinition) {
	for _, handler := range w.schemaDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkSchemaDefinition ...
func (w *Walker) walkSchemaDefinition(ctx *Context, sd *ast.SchemaDefinition) {
	w.OnSchemaDefinitionEnter(ctx, sd)
	w.OnSchemaDefinitionLeave(ctx, sd)
}

// SchemaExtensionEventHandler function can handle enter/leave events for SchemaExtension.
type SchemaExtensionEventHandler func(*Context, *ast.SchemaExtension)

// SchemaExtensionEventHandlers stores the enter and leave events handlers.
type SchemaExtensionEventHandlers struct {
	enter []SchemaExtensionEventHandler
	leave []SchemaExtensionEventHandler
}

// AddSchemaExtensionEnterEventHandler adds an event handler to be called when entering SchemaExtension nodes.
func (w *Walker) AddSchemaExtensionEnterEventHandler(h SchemaExtensionEventHandler) {
	w.schemaExtensionEventHandlers.enter = append(w.schemaExtensionEventHandlers.enter, h)
}

// AddSchemaExtensionLeaveEventHandler adds an event handler to be called when leaving SchemaExtension nodes.
func (w *Walker) AddSchemaExtensionLeaveEventHandler(h SchemaExtensionEventHandler) {
	w.schemaExtensionEventHandlers.leave = append(w.schemaExtensionEventHandlers.leave, h)
}

// OnSchemaExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSchemaExtensionEnter(ctx *Context, n *ast.SchemaExtension) {
	for _, handler := range w.schemaExtensionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnSchemaExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSchemaExtensionLeave(ctx *Context, n *ast.SchemaExtension) {
	for _, handler := range w.schemaExtensionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkSchemaExtension ...
func (w *Walker) walkSchemaExtension(ctx *Context, se *ast.SchemaExtension) {
	w.OnSchemaExtensionEnter(ctx, se)
	w.OnSchemaExtensionLeave(ctx, se)
}

// SelectionsEventHandler function can handle enter/leave events for Selections.
type SelectionsEventHandler func(*Context, *ast.Selections)

// SelectionsEventHandlers stores the enter and leave events handlers.
type SelectionsEventHandlers struct {
	enter []SelectionsEventHandler
	leave []SelectionsEventHandler
}

// AddSelectionsEnterEventHandler adds an event handler to be called when entering Selections nodes.
func (w *Walker) AddSelectionsEnterEventHandler(h SelectionsEventHandler) {
	w.selectionsEventHandlers.enter = append(w.selectionsEventHandlers.enter, h)
}

// AddSelectionsLeaveEventHandler adds an event handler to be called when leaving Selections nodes.
func (w *Walker) AddSelectionsLeaveEventHandler(h SelectionsEventHandler) {
	w.selectionsEventHandlers.leave = append(w.selectionsEventHandlers.leave, h)
}

// OnSelectionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSelectionsEnter(ctx *Context, n *ast.Selections) {
	for _, handler := range w.selectionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnSelectionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSelectionsLeave(ctx *Context, n *ast.Selections) {
	for _, handler := range w.selectionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkSelections ...
func (w *Walker) walkSelections(ctx *Context, ss *ast.Selections) {
	w.OnSelectionsEnter(ctx, ss)
	ss.ForEach(func(s ast.Selection, i int) {
		w.walkSelection(ctx, s)
	})
	w.OnSelectionsLeave(ctx, ss)
}

// SelectionEventHandler function can handle enter/leave events for Selection.
type SelectionEventHandler func(*Context, ast.Selection)

// SelectionEventHandlers stores the enter and leave events handlers.
type SelectionEventHandlers struct {
	enter []SelectionEventHandler
	leave []SelectionEventHandler
}

// AddSelectionEnterEventHandler adds an event handler to be called when entering Selection nodes.
func (w *Walker) AddSelectionEnterEventHandler(h SelectionEventHandler) {
	w.selectionEventHandlers.enter = append(w.selectionEventHandlers.enter, h)
}

// AddSelectionLeaveEventHandler adds an event handler to be called when leaving Selection nodes.
func (w *Walker) AddSelectionLeaveEventHandler(h SelectionEventHandler) {
	w.selectionEventHandlers.leave = append(w.selectionEventHandlers.leave, h)
}

// OnSelectionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnSelectionEnter(ctx *Context, n ast.Selection) {
	for _, handler := range w.selectionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnSelectionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnSelectionLeave(ctx *Context, n ast.Selection) {
	for _, handler := range w.selectionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkSelection ...
func (w *Walker) walkSelection(ctx *Context, s ast.Selection) {
	w.OnSelectionEnter(ctx, s)
	switch s.Kind {
	case ast.SelectionKindField:
		w.walkSelectionKindField(ctx, s.FieldSelection)
	case ast.SelectionKindFragmentSpread:
		w.walkSelectionKindFragmentSpread(ctx, s.FragmentSpreadSelection)
	case ast.SelectionKindInlineFragment:
		w.walkSelectionKindInlineFragment(ctx, s.InlineFragmentSelection)
	}
	w.OnSelectionLeave(ctx, s)
}

// TypesEventHandler function can handle enter/leave events for Types.
type TypesEventHandler func(*Context, *ast.Types)

// TypesEventHandlers stores the enter and leave events handlers.
type TypesEventHandlers struct {
	enter []TypesEventHandler
	leave []TypesEventHandler
}

// AddTypesEnterEventHandler adds an event handler to be called when entering Types nodes.
func (w *Walker) AddTypesEnterEventHandler(h TypesEventHandler) {
	w.typesEventHandlers.enter = append(w.typesEventHandlers.enter, h)
}

// AddTypesLeaveEventHandler adds an event handler to be called when leaving Types nodes.
func (w *Walker) AddTypesLeaveEventHandler(h TypesEventHandler) {
	w.typesEventHandlers.leave = append(w.typesEventHandlers.leave, h)
}

// OnTypesEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypesEnter(ctx *Context, n *ast.Types) {
	for _, handler := range w.typesEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnTypesLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypesLeave(ctx *Context, n *ast.Types) {
	for _, handler := range w.typesEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkTypes ...
func (w *Walker) walkTypes(ctx *Context, ts *ast.Types) {
	w.OnTypesEnter(ctx, ts)
	ts.ForEach(func(t ast.Type, i int) {
		w.walkType(ctx, t)
	})
	w.OnTypesLeave(ctx, ts)
}

// TypeEventHandler function can handle enter/leave events for Type.
type TypeEventHandler func(*Context, ast.Type)

// TypeEventHandlers stores the enter and leave events handlers.
type TypeEventHandlers struct {
	enter []TypeEventHandler
	leave []TypeEventHandler
}

// AddTypeEnterEventHandler adds an event handler to be called when entering Type nodes.
func (w *Walker) AddTypeEnterEventHandler(h TypeEventHandler) {
	w.typeEventHandlers.enter = append(w.typeEventHandlers.enter, h)
}

// AddTypeLeaveEventHandler adds an event handler to be called when leaving Type nodes.
func (w *Walker) AddTypeLeaveEventHandler(h TypeEventHandler) {
	w.typeEventHandlers.leave = append(w.typeEventHandlers.leave, h)
}

// OnTypeEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeEnter(ctx *Context, n ast.Type) {
	for _, handler := range w.typeEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnTypeLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeLeave(ctx *Context, n ast.Type) {
	for _, handler := range w.typeEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkType ...
func (w *Walker) walkType(ctx *Context, t ast.Type) {
	w.OnTypeEnter(ctx, t)
	switch t.Kind {
	case ast.TypeKindNamed:
		w.walkTypeKindNamed(ctx, t.NamedType)
	case ast.TypeKindList:
		w.walkTypeKindList(ctx, t.ListType)
	}
	w.OnTypeLeave(ctx, t)
}

// TypeConditionEventHandler function can handle enter/leave events for TypeCondition.
type TypeConditionEventHandler func(*Context, *ast.TypeCondition)

// TypeConditionEventHandlers stores the enter and leave events handlers.
type TypeConditionEventHandlers struct {
	enter []TypeConditionEventHandler
	leave []TypeConditionEventHandler
}

// AddTypeConditionEnterEventHandler adds an event handler to be called when entering TypeCondition nodes.
func (w *Walker) AddTypeConditionEnterEventHandler(h TypeConditionEventHandler) {
	w.typeConditionEventHandlers.enter = append(w.typeConditionEventHandlers.enter, h)
}

// AddTypeConditionLeaveEventHandler adds an event handler to be called when leaving TypeCondition nodes.
func (w *Walker) AddTypeConditionLeaveEventHandler(h TypeConditionEventHandler) {
	w.typeConditionEventHandlers.leave = append(w.typeConditionEventHandlers.leave, h)
}

// OnTypeConditionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeConditionEnter(ctx *Context, n *ast.TypeCondition) {
	for _, handler := range w.typeConditionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnTypeConditionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeConditionLeave(ctx *Context, n *ast.TypeCondition) {
	for _, handler := range w.typeConditionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkTypeCondition ...
func (w *Walker) walkTypeCondition(ctx *Context, tc *ast.TypeCondition) {
	w.OnTypeConditionEnter(ctx, tc)
	w.OnTypeConditionLeave(ctx, tc)
}

// TypeDefinitionEventHandler function can handle enter/leave events for TypeDefinition.
type TypeDefinitionEventHandler func(*Context, *ast.TypeDefinition)

// TypeDefinitionEventHandlers stores the enter and leave events handlers.
type TypeDefinitionEventHandlers struct {
	enter []TypeDefinitionEventHandler
	leave []TypeDefinitionEventHandler
}

// AddTypeDefinitionEnterEventHandler adds an event handler to be called when entering TypeDefinition nodes.
func (w *Walker) AddTypeDefinitionEnterEventHandler(h TypeDefinitionEventHandler) {
	w.typeDefinitionEventHandlers.enter = append(w.typeDefinitionEventHandlers.enter, h)
}

// AddTypeDefinitionLeaveEventHandler adds an event handler to be called when leaving TypeDefinition nodes.
func (w *Walker) AddTypeDefinitionLeaveEventHandler(h TypeDefinitionEventHandler) {
	w.typeDefinitionEventHandlers.leave = append(w.typeDefinitionEventHandlers.leave, h)
}

// OnTypeDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionEnter(ctx *Context, n *ast.TypeDefinition) {
	for _, handler := range w.typeDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnTypeDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeDefinitionLeave(ctx *Context, n *ast.TypeDefinition) {
	for _, handler := range w.typeDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkTypeDefinition ...
func (w *Walker) walkTypeDefinition(ctx *Context, td *ast.TypeDefinition) {
	w.OnTypeDefinitionEnter(ctx, td)
	switch td.Kind {
	case ast.TypeDefinitionKindScalar:
		w.walkTypeDefinitionKindScalar(ctx, td.ScalarTypeDefinition)
	case ast.TypeDefinitionKindObject:
		w.walkTypeDefinitionKindObject(ctx, td.ObjectTypeDefinition)
	case ast.TypeDefinitionKindInterface:
		w.walkTypeDefinitionKindInterface(ctx, td.InterfaceTypeDefinition)
	case ast.TypeDefinitionKindUnion:
		w.walkTypeDefinitionKindUnion(ctx, td.UnionTypeDefinition)
	case ast.TypeDefinitionKindEnum:
		w.walkTypeDefinitionKindEnum(ctx, td.EnumTypeDefinition)
	case ast.TypeDefinitionKindInputObject:
		w.walkTypeDefinitionKindInputObject(ctx, td.InputObjectTypeDefinition)
	}
	w.OnTypeDefinitionLeave(ctx, td)
}

// TypeExtensionEventHandler function can handle enter/leave events for TypeExtension.
type TypeExtensionEventHandler func(*Context, *ast.TypeExtension)

// TypeExtensionEventHandlers stores the enter and leave events handlers.
type TypeExtensionEventHandlers struct {
	enter []TypeExtensionEventHandler
	leave []TypeExtensionEventHandler
}

// AddTypeExtensionEnterEventHandler adds an event handler to be called when entering TypeExtension nodes.
func (w *Walker) AddTypeExtensionEnterEventHandler(h TypeExtensionEventHandler) {
	w.typeExtensionEventHandlers.enter = append(w.typeExtensionEventHandlers.enter, h)
}

// AddTypeExtensionLeaveEventHandler adds an event handler to be called when leaving TypeExtension nodes.
func (w *Walker) AddTypeExtensionLeaveEventHandler(h TypeExtensionEventHandler) {
	w.typeExtensionEventHandlers.leave = append(w.typeExtensionEventHandlers.leave, h)
}

// OnTypeExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeExtensionEnter(ctx *Context, n *ast.TypeExtension) {
	for _, handler := range w.typeExtensionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnTypeExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeExtensionLeave(ctx *Context, n *ast.TypeExtension) {
	for _, handler := range w.typeExtensionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkTypeExtension ...
func (w *Walker) walkTypeExtension(ctx *Context, te *ast.TypeExtension) {
	w.OnTypeExtensionEnter(ctx, te)
	switch te.Kind {
	case ast.TypeExtensionKindScalar:
		w.walkTypeExtensionKindScalar(ctx, te.ScalarTypeExtension)
	case ast.TypeExtensionKindObject:
		w.walkTypeExtensionKindObject(ctx, te.ObjectTypeExtension)
	case ast.TypeExtensionKindInterface:
		w.walkTypeExtensionKindInterface(ctx, te.InterfaceTypeExtension)
	case ast.TypeExtensionKindUnion:
		w.walkTypeExtensionKindUnion(ctx, te.UnionTypeExtension)
	case ast.TypeExtensionKindEnum:
		w.walkTypeExtensionKindEnum(ctx, te.EnumTypeExtension)
	case ast.TypeExtensionKindInputObject:
		w.walkTypeExtensionKindInputObject(ctx, te.InputObjectTypeExtension)
	}
	w.OnTypeExtensionLeave(ctx, te)
}

// TypeSystemDefinitionEventHandler function can handle enter/leave events for TypeSystemDefinition.
type TypeSystemDefinitionEventHandler func(*Context, *ast.TypeSystemDefinition)

// TypeSystemDefinitionEventHandlers stores the enter and leave events handlers.
type TypeSystemDefinitionEventHandlers struct {
	enter []TypeSystemDefinitionEventHandler
	leave []TypeSystemDefinitionEventHandler
}

// AddTypeSystemDefinitionEnterEventHandler adds an event handler to be called when entering TypeSystemDefinition nodes.
func (w *Walker) AddTypeSystemDefinitionEnterEventHandler(h TypeSystemDefinitionEventHandler) {
	w.typeSystemDefinitionEventHandlers.enter = append(w.typeSystemDefinitionEventHandlers.enter, h)
}

// AddTypeSystemDefinitionLeaveEventHandler adds an event handler to be called when leaving TypeSystemDefinition nodes.
func (w *Walker) AddTypeSystemDefinitionLeaveEventHandler(h TypeSystemDefinitionEventHandler) {
	w.typeSystemDefinitionEventHandlers.leave = append(w.typeSystemDefinitionEventHandlers.leave, h)
}

// OnTypeSystemDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeSystemDefinitionEnter(ctx *Context, n *ast.TypeSystemDefinition) {
	for _, handler := range w.typeSystemDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnTypeSystemDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeSystemDefinitionLeave(ctx *Context, n *ast.TypeSystemDefinition) {
	for _, handler := range w.typeSystemDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkTypeSystemDefinition ...
func (w *Walker) walkTypeSystemDefinition(ctx *Context, tsd *ast.TypeSystemDefinition) {
	w.OnTypeSystemDefinitionEnter(ctx, tsd)
	switch tsd.Kind {
	case ast.TypeSystemDefinitionKindSchema:
		w.walkTypeSystemDefinitionKindSchema(ctx, tsd.SchemaTypeSystemDefinition)
	case ast.TypeSystemDefinitionKindType:
		w.walkTypeSystemDefinitionKindType(ctx, tsd.TypeTypeSystemDefinition)
	case ast.TypeSystemDefinitionKindDirective:
		w.walkTypeSystemDefinitionKindDirective(ctx, tsd.DirectiveTypeSystemDefinition)
	}
	w.OnTypeSystemDefinitionLeave(ctx, tsd)
}

// TypeSystemExtensionEventHandler function can handle enter/leave events for TypeSystemExtension.
type TypeSystemExtensionEventHandler func(*Context, *ast.TypeSystemExtension)

// TypeSystemExtensionEventHandlers stores the enter and leave events handlers.
type TypeSystemExtensionEventHandlers struct {
	enter []TypeSystemExtensionEventHandler
	leave []TypeSystemExtensionEventHandler
}

// AddTypeSystemExtensionEnterEventHandler adds an event handler to be called when entering TypeSystemExtension nodes.
func (w *Walker) AddTypeSystemExtensionEnterEventHandler(h TypeSystemExtensionEventHandler) {
	w.typeSystemExtensionEventHandlers.enter = append(w.typeSystemExtensionEventHandlers.enter, h)
}

// AddTypeSystemExtensionLeaveEventHandler adds an event handler to be called when leaving TypeSystemExtension nodes.
func (w *Walker) AddTypeSystemExtensionLeaveEventHandler(h TypeSystemExtensionEventHandler) {
	w.typeSystemExtensionEventHandlers.leave = append(w.typeSystemExtensionEventHandlers.leave, h)
}

// OnTypeSystemExtensionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnTypeSystemExtensionEnter(ctx *Context, n *ast.TypeSystemExtension) {
	for _, handler := range w.typeSystemExtensionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnTypeSystemExtensionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnTypeSystemExtensionLeave(ctx *Context, n *ast.TypeSystemExtension) {
	for _, handler := range w.typeSystemExtensionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkTypeSystemExtension ...
func (w *Walker) walkTypeSystemExtension(ctx *Context, tse *ast.TypeSystemExtension) {
	w.OnTypeSystemExtensionEnter(ctx, tse)
	switch tse.Kind {
	case ast.TypeSystemExtensionKindSchema:
		w.walkTypeSystemExtensionKindSchema(ctx, tse.SchemaTypeSystemExtension)
	case ast.TypeSystemExtensionKindType:
		w.walkTypeSystemExtensionKindType(ctx, tse.TypeTypeSystemExtension)
	}
	w.OnTypeSystemExtensionLeave(ctx, tse)
}

// ValueEventHandler function can handle enter/leave events for Value.
type ValueEventHandler func(*Context, ast.Value)

// ValueEventHandlers stores the enter and leave events handlers.
type ValueEventHandlers struct {
	enter []ValueEventHandler
	leave []ValueEventHandler
}

// AddValueEnterEventHandler adds an event handler to be called when entering Value nodes.
func (w *Walker) AddValueEnterEventHandler(h ValueEventHandler) {
	w.valueEventHandlers.enter = append(w.valueEventHandlers.enter, h)
}

// AddValueLeaveEventHandler adds an event handler to be called when leaving Value nodes.
func (w *Walker) AddValueLeaveEventHandler(h ValueEventHandler) {
	w.valueEventHandlers.leave = append(w.valueEventHandlers.leave, h)
}

// OnValueEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnValueEnter(ctx *Context, n ast.Value) {
	for _, handler := range w.valueEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnValueLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnValueLeave(ctx *Context, n ast.Value) {
	for _, handler := range w.valueEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkValue ...
func (w *Walker) walkValue(ctx *Context, v ast.Value) {
	w.OnValueEnter(ctx, v)
	switch v.Kind {
	case ast.ValueKindVariable:
		w.walkValueKindVariable(ctx, v.VariableValue)
	case ast.ValueKindInt:
		w.walkValueKindInt(ctx, v.IntValue)
	case ast.ValueKindFloat:
		w.walkValueKindFloat(ctx, v.FloatValue)
	case ast.ValueKindString:
		w.walkValueKindString(ctx, v.StringValue)
	case ast.ValueKindBoolean:
		w.walkValueKindBoolean(ctx, v.BooleanValue)
	case ast.ValueKindNull:
		w.walkValueKindNull(ctx, v.NullValue)
	case ast.ValueKindEnum:
		w.walkValueKindEnum(ctx, v.EnumValue)
	case ast.ValueKindList:
		w.walkValueKindList(ctx, v.ListValue)
	case ast.ValueKindObject:
		w.walkValueKindObject(ctx, v.ObjectValue)
	}
	w.OnValueLeave(ctx, v)
}

// VariableDefinitionsEventHandler function can handle enter/leave events for VariableDefinitions.
type VariableDefinitionsEventHandler func(*Context, *ast.VariableDefinitions)

// VariableDefinitionsEventHandlers stores the enter and leave events handlers.
type VariableDefinitionsEventHandlers struct {
	enter []VariableDefinitionsEventHandler
	leave []VariableDefinitionsEventHandler
}

// AddVariableDefinitionsEnterEventHandler adds an event handler to be called when entering VariableDefinitions nodes.
func (w *Walker) AddVariableDefinitionsEnterEventHandler(h VariableDefinitionsEventHandler) {
	w.variableDefinitionsEventHandlers.enter = append(w.variableDefinitionsEventHandlers.enter, h)
}

// AddVariableDefinitionsLeaveEventHandler adds an event handler to be called when leaving VariableDefinitions nodes.
func (w *Walker) AddVariableDefinitionsLeaveEventHandler(h VariableDefinitionsEventHandler) {
	w.variableDefinitionsEventHandlers.leave = append(w.variableDefinitionsEventHandlers.leave, h)
}

// OnVariableDefinitionsEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionsEnter(ctx *Context, n *ast.VariableDefinitions) {
	for _, handler := range w.variableDefinitionsEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnVariableDefinitionsLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionsLeave(ctx *Context, n *ast.VariableDefinitions) {
	for _, handler := range w.variableDefinitionsEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkVariableDefinitions ...
func (w *Walker) walkVariableDefinitions(ctx *Context, vds *ast.VariableDefinitions) {
	w.OnVariableDefinitionsEnter(ctx, vds)
	vds.ForEach(func(vd ast.VariableDefinition, i int) {
		w.walkVariableDefinition(ctx, vd)
	})
	w.OnVariableDefinitionsLeave(ctx, vds)
}

// VariableDefinitionEventHandler function can handle enter/leave events for VariableDefinition.
type VariableDefinitionEventHandler func(*Context, ast.VariableDefinition)

// VariableDefinitionEventHandlers stores the enter and leave events handlers.
type VariableDefinitionEventHandlers struct {
	enter []VariableDefinitionEventHandler
	leave []VariableDefinitionEventHandler
}

// AddVariableDefinitionEnterEventHandler adds an event handler to be called when entering VariableDefinition nodes.
func (w *Walker) AddVariableDefinitionEnterEventHandler(h VariableDefinitionEventHandler) {
	w.variableDefinitionEventHandlers.enter = append(w.variableDefinitionEventHandlers.enter, h)
}

// AddVariableDefinitionLeaveEventHandler adds an event handler to be called when leaving VariableDefinition nodes.
func (w *Walker) AddVariableDefinitionLeaveEventHandler(h VariableDefinitionEventHandler) {
	w.variableDefinitionEventHandlers.leave = append(w.variableDefinitionEventHandlers.leave, h)
}

// OnVariableDefinitionEnter calls the enter event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionEnter(ctx *Context, n ast.VariableDefinition) {
	for _, handler := range w.variableDefinitionEventHandlers.enter {
		handler(ctx, n)
	}
}

// OnVariableDefinitionLeave calls the leave event handlers registered for this node type.
func (w *Walker) OnVariableDefinitionLeave(ctx *Context, n ast.VariableDefinition) {
	for _, handler := range w.variableDefinitionEventHandlers.leave {
		handler(ctx, n)
	}
}

// walkVariableDefinition ...
func (w *Walker) walkVariableDefinition(ctx *Context, vd ast.VariableDefinition) {
	w.OnVariableDefinitionEnter(ctx, vd)
	w.OnVariableDefinitionLeave(ctx, vd)
}
